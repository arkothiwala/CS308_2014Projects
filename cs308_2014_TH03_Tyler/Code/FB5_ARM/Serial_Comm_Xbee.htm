<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\rahee\Downloads\AAstudies\ERTS\Project\bot_code\Serial_Comm_Xbee.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\rahee\Downloads\AAstudies\ERTS\Project\bot_code\Serial_Comm_Xbee.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Sat Apr 12 18:36:03 2014
<BR><P>
<H3>Maximum Stack Usage =         72 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Right_Degrees &rArr; Angle_Rotate &rArr; __aeabi_ddiv
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[22ef568]">Reset_Handler</a>
 <LI><a href="#[22ef5a4]">__user_initial_stackheap</a>
 <LI><a href="#[22ef7c0]">Undef_Handler</a>
 <LI><a href="#[22ef784]">SWI_Handler</a>
 <LI><a href="#[22ef748]">PAbt_Handler</a>
 <LI><a href="#[22ef70c]">DAbt_Handler</a>
 <LI><a href="#[22ef6d0]">IRQ_Handler</a>
 <LI><a href="#[22ef694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22ef7c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22ef7c0]">Undef_Handler</a><BR>
 <LI><a href="#[22ef784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22ef784]">SWI_Handler</a><BR>
 <LI><a href="#[22ef748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22ef748]">PAbt_Handler</a><BR>
 <LI><a href="#[22ef70c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22ef70c]">DAbt_Handler</a><BR>
 <LI><a href="#[22ef6d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22ef6d0]">IRQ_Handler</a><BR>
 <LI><a href="#[22ef694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22ef694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22ef568]">Reset_Handler</a>
 <LI><a href="#[22ef7c0]">Undef_Handler</a>
 <LI><a href="#[22ef784]">SWI_Handler</a>
 <LI><a href="#[22ef748]">PAbt_Handler</a>
 <LI><a href="#[22ef70c]">DAbt_Handler</a>
 <LI><a href="#[22ef6d0]">IRQ_Handler</a>
 <LI><a href="#[22ef694]">FIQ_Handler</a>
 <LI><a href="#[22ed9c0]">__main</a>
 <LI><a href="#[22ee050]">main</a>
 <LI><a href="#[22e5a04]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22ef568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22ed9c0]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[22e33d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[22ebb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[22e33d0]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[22ed9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22e3394]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ebb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[22e3358]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22e31b4]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e31b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[22e31b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[22e30c4]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[22e8ac4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e6a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e9e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[22e70c0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[22e7138]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[22e74f8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[22e7390]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[22e6fd0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[22e7048]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[22e7408]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[22e7318]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[22e78f4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[22e7750]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[22e76d8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[22e7660]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[22e75e8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[22e7570]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[22e7804]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[22e6f94]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[22e7480]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[22e72a0]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[22e787c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[22e5d4c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22e67d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[22e50e0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[22e4f00]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[22e4ec4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[22e502c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[22e5194]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[22e4fb4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[22ebb0c]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22e3394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[22ed9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22e9f28]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[22e9ba4]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[22e9028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22e9e74]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e8ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[22e9eb0]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[22e9dc0]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[22e8ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[22e9dfc]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[22e8470]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22e8ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[22e67d8]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[22e5d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[22e6814]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[22e679c]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22e6238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[22ef5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e9028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22eeb18]"></a>init_button</STRONG> (ARM, 24 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[22eeadc]"></a>get_button_press</STRONG> (ARM, 72 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22eeaa0]"></a>DelaymSec</STRONG> (ARM, 44 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22eea64]"></a>Init_Buzzer_Pin</STRONG> (ARM, 80 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[22eea28]"></a>R_Stop</STRONG> (ARM, 24 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>

<P><STRONG><a name="[22ee9ec]"></a>L_Stop</STRONG> (ARM, 24 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>

<P><STRONG><a name="[22ee9b0]"></a>Stop</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Stop
<LI><a href="#[22eea28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22ee320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[22ee5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right2
<LI><a href="#[22ee5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left2
<LI><a href="#[22ee62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right
<LI><a href="#[22ee668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left
<LI><a href="#[22ee6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
<LI><a href="#[22ee758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motion_Pin
<LI><a href="#[22ee848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
<LI><a href="#[22ee884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward
<LI><a href="#[22ee8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left
<LI><a href="#[22ee938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right
</UL>

<P><STRONG><a name="[22ee974]"></a>L_Forward</STRONG> (ARM, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right
<LI><a href="#[22ee884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward
<LI><a href="#[22ee938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right
</UL>

<P><STRONG><a name="[22ee938]"></a>Soft_Right</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Forward
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right_Degrees
<LI><a href="#[22ee848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
</UL>

<P><STRONG><a name="[22ee8fc]"></a>R_Forward</STRONG> (ARM, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left
<LI><a href="#[22ee884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward
<LI><a href="#[22ee8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left
</UL>

<P><STRONG><a name="[22ee8c0]"></a>Soft_Left</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Forward
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left_Degrees
<LI><a href="#[22ee848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
</UL>

<P><STRONG><a name="[22ee884]"></a>Forward</STRONG> (ARM, 24 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Forward
<LI><a href="#[22ee974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Forward
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
<LI><a href="#[22ee848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
</UL>

<P><STRONG><a name="[22ee848]"></a>IRQ_UART1</STRONG> (ARM, 356 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward
<LI><a href="#[22ee8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left
<LI><a href="#[22ee938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>

<P><STRONG><a name="[22ee80c]"></a>Init_UART1</STRONG> (ARM, 120 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[22ee7d0]"></a>UART1_SendByte</STRONG> (ARM, 32 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22ee794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendStr
</UL>

<P><STRONG><a name="[22ee794]"></a>UART1_SendStr</STRONG> (ARM, 44 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
</UL>

<P><STRONG><a name="[22ee758]"></a>Init_Motion_Pin</STRONG> (ARM, 168 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Motion_Pin &rArr; Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[22ee578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[22ee71c]"></a>L_Back</STRONG> (ARM, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left2
<LI><a href="#[22ee668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left
<LI><a href="#[22ee6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
</UL>

<P><STRONG><a name="[22ee6e0]"></a>R_Back</STRONG> (ARM, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right2
<LI><a href="#[22ee62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right
<LI><a href="#[22ee6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
</UL>

<P><STRONG><a name="[22ee6a4]"></a>Back</STRONG> (ARM, 24 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Back
<LI><a href="#[22ee71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Back
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_mm
</UL>

<P><STRONG><a name="[22ee668]"></a>Left</STRONG> (ARM, 24 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Left &rArr; Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Back
<LI><a href="#[22ee8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Forward
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_Degrees
</UL>

<P><STRONG><a name="[22ee62c]"></a>Right</STRONG> (ARM, 24 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Right &rArr; Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Back
<LI><a href="#[22ee974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Forward
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_Degrees
</UL>

<P><STRONG><a name="[22ee5f0]"></a>Soft_Left2</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L_Back
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left_2_Degrees
</UL>

<P><STRONG><a name="[22ee5b4]"></a>Soft_Right2</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_Back
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right_2_Degrees
</UL>

<P><STRONG><a name="[22ee578]"></a>Init_Ports</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Init_Ports &rArr; Init_Motion_Pin &rArr; Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motion_Pin
<LI><a href="#[22eea64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[22ee53c]"></a>Init_Peripherals</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_Peripherals &rArr; Init_Ports &rArr; Init_Motion_Pin &rArr; Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
<LI><a href="#[22ee80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART1
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22ee500]"></a>Init_ADC_Pin</STRONG> (ARM, 60 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[22ee4c4]"></a>Init_ADC0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[22ee488]"></a>Init_ADC1</STRONG> (ARM, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[22ee44c]"></a>AD0_Conversion</STRONG> (ARM, 108 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[22ee410]"></a>AD1_Conversion</STRONG> (ARM, 108 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[22ee3d4]"></a>Sharp_GP2D12_Estimation</STRONG> (ARM, 180 bytes, Stack size 64 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[22ec5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22eca84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[22ece44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22ecf70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[22ed27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[22ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[22ee398]"></a>Init</STRONG> (ARM, 24 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
<LI><a href="#[22ee4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC0
<LI><a href="#[22ee500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22ee35c]"></a>Angle_Rotate</STRONG> (ARM, 192 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Angle_Rotate &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[22ec520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[22ec82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[22eccdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22ed858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right_2_Degrees
<LI><a href="#[22ee17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left_2_Degrees
<LI><a href="#[22ee1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right_Degrees
<LI><a href="#[22ee1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left_Degrees
<LI><a href="#[22ee230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_Degrees
<LI><a href="#[22ee26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_Degrees
</UL>

<P><STRONG><a name="[22ee320]"></a>Linear_Distance_mm</STRONG> (ARM, 240 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ec82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[22ecf70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[22ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22ed858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_mm
<LI><a href="#[22ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
</UL>

<P><STRONG><a name="[22ee2e4]"></a>Forward_mm</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[22ee884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward
</UL>

<P><STRONG><a name="[22ee2a8]"></a>Back_mm</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[22ee6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back
</UL>

<P><STRONG><a name="[22ee26c]"></a>Left_Degrees</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Left_Degrees &rArr; Angle_Rotate &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[22ee668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22ee230]"></a>Right_Degrees</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Right_Degrees &rArr; Angle_Rotate &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[22ee62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22ee1f4]"></a>Soft_Left_Degrees</STRONG> (ARM, 32 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[22ee8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left
</UL>

<P><STRONG><a name="[22ee1b8]"></a>Soft_Right_Degrees</STRONG> (ARM, 32 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[22ee938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right
</UL>

<P><STRONG><a name="[22ee17c]"></a>Soft_Left_2_Degrees</STRONG> (ARM, 32 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[22ee5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left2
</UL>

<P><STRONG><a name="[22ee140]"></a>Soft_Right_2_Degrees</STRONG> (ARM, 32 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[22ee5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right2
</UL>

<P><STRONG><a name="[22ee104]"></a>IRQ_Eint0</STRONG> (ARM, 52 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[22ee0c8]"></a>IRQ_Eint2</STRONG> (ARM, 52 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[22ee08c]"></a>Ext_INT_Setup</STRONG> (ARM, 156 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22ee050]"></a>main</STRONG> (ARM, 268 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = main &rArr; Right_Degrees &rArr; Angle_Rotate &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[22ee08c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_INT_Setup
<LI><a href="#[22ee230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_Degrees
<LI><a href="#[22ee26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_Degrees
<LI><a href="#[22ee398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[22ee53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
<LI><a href="#[22ee758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motion_Pin
<LI><a href="#[22ee7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
<LI><a href="#[22ee9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[22eeaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaymSec
<LI><a href="#[22eeadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[22edb28]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22edaec]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22edab0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[22eb8b4]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e9898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[22eb878]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e9898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[22ea3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via Veneer)
<LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow (via Veneer)
</UL>

<P><STRONG><a name="[22e9898]"></a>__aeabi_errno_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22eb878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[22eb8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
</UL>

<P><STRONG><a name="[22e985c]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[22e9820]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[22e9190]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[22e9154]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e9028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22e9118]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[22e9028]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[22e9154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[22ef5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[22e9ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[22e8ec0]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e8470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[22e8e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e9dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[22e6490]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e6a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[22e6238]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e679c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[22e5a04]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[22e59c8]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[22ea630]"></a>__kernel_poly</STRONG> (ARM, 256 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22ece44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22ec1d8]"></a>pow</STRONG> (ARM, 3876 bytes, Stack size 224 bytes, pow.o(i.pow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ea3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[22ea630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22eaa2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[22eaa68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[22eb0f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22eb4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[22eb530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[22eb5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22eb878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[22ece44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[22ed024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22ee3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_GP2D12_Estimation
</UL>

<P><STRONG><a name="[22ea3d8]"></a>sqrt</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sqrt.o(i.sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e9460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[22e958c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22eb878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22ed858]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Called By]<UL><LI><a href="#[22ee320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[22ed81c]"></a>_d2f</STRONG> (ARM, 168 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22ed7e0]"></a>__fpl_inf_d2f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, d2f.o(x$fpl$d2f), UNUSED)

<P><STRONG><a name="[22eb5e4]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ea630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22eb5a8]"></a>_dadd</STRONG> (ARM, 452 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[22eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22eb56c]"></a>__fpl_inf_dadd</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[22eb314]"></a>__fpl_dcheck_NaN2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck.o(x$fpl$dcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e9334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[22e96f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[22eb47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[22eb5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[22ece08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[22ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[22eb1e8]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e9334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[22e9460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[22eaa2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[22ed240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[22ed81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[22e96f4]"></a>__fpl_dcmp_InfNaN</STRONG> (ARM, 128 bytes, Stack size 4 bytes, dcmpin.o(x$fpl$dcmpinfnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e8524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
<LI><a href="#[22eb314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e9550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[22eb0bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[22e96b8]"></a>__fpl_inf_dcmp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dcmpin.o(x$fpl$dcmpinfnan), UNUSED)

<P><STRONG><a name="[22ed54c]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[22ee320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[22ee3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_GP2D12_Estimation
</UL>

<P><STRONG><a name="[22ed510]"></a>_ddiv</STRONG> (ARM, 464 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[22ed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv_mantissas
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22ed4d4]"></a>__fpl_inf_ddiv</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ddiv.o(x$fpl$ddiv), UNUSED)

<P><STRONG><a name="[22ed498]"></a>_ddiv_mantissas</STRONG> (ARM, 380 bytes, Stack size 20 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[22ed27c]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 8 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ee3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_GP2D12_Estimation
</UL>

<P><STRONG><a name="[22ed240]"></a>_dfix</STRONG> (ARM, 172 bytes, Stack size 8 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22ed204]"></a>__fpl_inf_dfix</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dfix.o(x$fpl$dfix), UNUSED)

<P><STRONG><a name="[22ed024]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22ecfe8]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[22ecfac]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ecf34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[22ecf70]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ee320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[22ee3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_GP2D12_Estimation
</UL>

<P><STRONG><a name="[22ecf34]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ecfac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[22e958c]"></a>__aeabi_cdcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ea3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[22e9550]"></a>_dcmple</STRONG> (ARM, 132 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e96f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[22ece44]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ea630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[22ee3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_GP2D12_Estimation
</UL>

<P><STRONG><a name="[22ece08]"></a>_dmul</STRONG> (ARM, 460 bytes, Stack size 16 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22ecdcc]"></a>__fpl_inf_dmul</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dmul.o(x$fpl$dmul), UNUSED)

<P><STRONG><a name="[22eb0f8]"></a>__aeabi_cdrcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22eb0bc]"></a>_drcmple</STRONG> (ARM, 156 bytes, Stack size 0 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e96f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[22eb530]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22eb4f4]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[22eb65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[22e9460]"></a>_dsqrt</STRONG> (ARM, 384 bytes, Stack size 16 bytes, dsqrt.o(x$fpl$dsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[22ea3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[22e9424]"></a>__fpl_inf_dsqrt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dsqrt.o(x$fpl$dsqrt), UNUSED)

<P><STRONG><a name="[22eb4b8]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22eb47c]"></a>_dsub</STRONG> (ARM, 572 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[22eb65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22eb440]"></a>__fpl_inf_dsub</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[22eaf90]"></a>__dunder</STRONG> (ARM, 276 bytes, Stack size 4 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[22eaf54]"></a>__dunder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[22eccdc]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Called By]<UL><LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[22ecca0]"></a>_f2d</STRONG> (ARM, 96 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eae64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22ecc64]"></a>__fpl_inf_f2d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, f2d.o(x$fpl$f2d), UNUSED)

<P><STRONG><a name="[22eae64]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e9334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[22ec7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[22eca48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[22ecca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[22eca84]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ee3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_GP2D12_Estimation
</UL>

<P><STRONG><a name="[22eca48]"></a>_ffix</STRONG> (ARM, 112 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eae64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22eca0c]"></a>__fpl_inf_ffix</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ffix.o(x$fpl$ffix), UNUSED)

<P><STRONG><a name="[22ec82c]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Called By]<UL><LI><a href="#[22ee320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[22ec7f0]"></a>_ffixu</STRONG> (ARM, 92 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eae64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[22ec7b4]"></a>__fpl_inf_ffixu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ffixu.o(x$fpl$ffixu), UNUSED)

<P><STRONG><a name="[22ec5d4]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ee3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sharp_GP2D12_Estimation
</UL>

<P><STRONG><a name="[22ec598]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[22ec55c]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ec4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[22ec520]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[22ee35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[22ec4e4]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22ec55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[22e6a30]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e6490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[22e8ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[22e69f4]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[22ead74]"></a>__funder</STRONG> (ARM, 144 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[22ead38]"></a>__funder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[22e9334]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e8524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[22eae64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[22eb1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[22eb314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[22eaa68]"></a>__ARM_scalbn</STRONG> (ARM, 0 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22eaa2c]"></a>scalbn</STRONG> (ARM, 108 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22eb1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[22ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[22ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[22ea9f0]"></a>__fpl_inf_scalbn</STRONG> (ARM, 0 bytes, Stack size unknown bytes, scalbn.o(x$fpl$scalbn), UNUSED)

<P><STRONG><a name="[22e8524]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e9334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[22e96f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[22ea900]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[22ef7c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22ef7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22ef7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22ef784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22ef784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22ef784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22ef748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22ef748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22ef748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22ef70c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22ef70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22ef70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22ef6d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22ef6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22ef6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22ef694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22ef694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22ef694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22eb65c]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22eb47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[22eb4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[22eb620]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22eb4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[22eb5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[22ed6f0]"></a>__fpl_infinity</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e9460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[22e96f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[22eaa2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scalbn
<LI><a href="#[22eb47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[22eb5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[22ec7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[22eca48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[22ecca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[22ece08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[22ed240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[22ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[22ed81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[22e8e48]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22e8ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>


White_Line_Following.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c8  00800200  00004330  000043c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008003c8  008003c8  0000458c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000458c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d2  00000000  00000000  000045ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000122e  00000000  00000000  0000497e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000259  00000000  00000000  00005bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001acc  00000000  00000000  00005e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  000078d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a1  00000000  00000000  00007bd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e3       	ldi	r30, 0x30	; 48
      fc:	f3 e4       	ldi	r31, 0x43	; 67
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 3c       	cpi	r26, 0xC8	; 200
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 ec       	ldi	r26, 0xC8	; 200
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 3d       	cpi	r26, 0xDC	; 220
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <main>
     122:	0c 94 96 21 	jmp	0x432c	; 0x432c <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 4b 21 	call	0x4296	; 0x4296 <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 cd 03 	sts	0x03CD, r25
    12ec:	80 93 cc 03 	sts	0x03CC, r24
		lcd_wr_char(million);
    12f0:	80 91 cc 03 	lds	r24, 0x03CC
    12f4:	90 91 cd 03 	lds	r25, 0x03CD
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 4b 21 	call	0x4296	; 0x4296 <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 cf 03 	sts	0x03CF, r25
    1324:	80 93 ce 03 	sts	0x03CE, r24
		thousand = temp%10 + 48;
    1328:	80 91 ce 03 	lds	r24, 0x03CE
    132c:	90 91 cf 03 	lds	r25, 0x03CF
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 4b 21 	call	0x4296	; 0x4296 <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 db 03 	sts	0x03DB, r25
    1340:	80 93 da 03 	sts	0x03DA, r24
		lcd_wr_char(thousand);
    1344:	80 91 da 03 	lds	r24, 0x03DA
    1348:	90 91 db 03 	lds	r25, 0x03DB
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 4b 21 	call	0x4296	; 0x4296 <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 cf 03 	sts	0x03CF, r25
    1378:	80 93 ce 03 	sts	0x03CE, r24
		hundred = temp%10 + 48;
    137c:	80 91 ce 03 	lds	r24, 0x03CE
    1380:	90 91 cf 03 	lds	r25, 0x03CF
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 4b 21 	call	0x4296	; 0x4296 <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 d7 03 	sts	0x03D7, r25
    1394:	80 93 d6 03 	sts	0x03D6, r24
		lcd_wr_char(hundred);
    1398:	80 91 d6 03 	lds	r24, 0x03D6
    139c:	90 91 d7 03 	lds	r25, 0x03D7
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 4b 21 	call	0x4296	; 0x4296 <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 cf 03 	sts	0x03CF, r25
    13cc:	80 93 ce 03 	sts	0x03CE, r24
		tens = temp%10 + 48;
    13d0:	80 91 ce 03 	lds	r24, 0x03CE
    13d4:	90 91 cf 03 	lds	r25, 0x03CF
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 4b 21 	call	0x4296	; 0x4296 <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 d4 03 	sts	0x03D4, r25
    13e8:	80 93 d3 03 	sts	0x03D3, r24
		lcd_wr_char(tens);
    13ec:	80 91 d3 03 	lds	r24, 0x03D3
    13f0:	90 91 d4 03 	lds	r25, 0x03D4
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 4b 21 	call	0x4296	; 0x4296 <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 d9 03 	sts	0x03D9, r25
    1420:	80 93 d8 03 	sts	0x03D8, r24
		lcd_wr_char(unit);
    1424:	80 91 d8 03 	lds	r24, 0x03D8
    1428:	90 91 d9 03 	lds	r25, 0x03D9
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <servo1_pin_config>:
unsigned char Right_white_line = 0;


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    145a:	a4 e2       	ldi	r26, 0x24	; 36
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e4 e2       	ldi	r30, 0x24	; 36
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 62       	ori	r24, 0x20	; 32
    1466:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1468:	a5 e2       	ldi	r26, 0x25	; 37
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e2       	ldi	r30, 0x25	; 37
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 62       	ori	r24, 0x20	; 32
    1474:	8c 93       	st	X, r24
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    1484:	a4 e2       	ldi	r26, 0x24	; 36
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e4 e2       	ldi	r30, 0x24	; 36
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	80 64       	ori	r24, 0x40	; 64
    1490:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    1492:	a5 e2       	ldi	r26, 0x25	; 37
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e2       	ldi	r30, 0x25	; 37
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 64       	ori	r24, 0x40	; 64
    149e:	8c 93       	st	X, r24
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    14ae:	a4 e2       	ldi	r26, 0x24	; 36
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e4 e2       	ldi	r30, 0x24	; 36
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 68       	ori	r24, 0x80	; 128
    14ba:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    14bc:	a5 e2       	ldi	r26, 0x25	; 37
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e5 e2       	ldi	r30, 0x25	; 37
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	80 68       	ori	r24, 0x80	; 128
    14c8:	8c 93       	st	X, r24
}
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    14d8:	a7 e2       	ldi	r26, 0x27	; 39
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e7 e2       	ldi	r30, 0x27	; 39
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	87 6f       	ori	r24, 0xF7	; 247
    14e4:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    14e6:	a8 e2       	ldi	r26, 0x28	; 40
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e8 e2       	ldi	r30, 0x28	; 40
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	80 78       	andi	r24, 0x80	; 128
    14f2:	8c 93       	st	X, r24
}
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    1502:	e0 e3       	ldi	r30, 0x30	; 48
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	10 82       	st	Z, r1
 PORTF = 0x00;
    1508:	e1 e3       	ldi	r30, 0x31	; 49
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	10 82       	st	Z, r1
 DDRK = 0x00;
    150e:	e7 e0       	ldi	r30, 0x07	; 7
    1510:	f1 e0       	ldi	r31, 0x01	; 1
    1512:	10 82       	st	Z, r1
 PORTK = 0x00;
    1514:	e8 e0       	ldi	r30, 0x08	; 8
    1516:	f1 e0       	ldi	r31, 0x01	; 1
    1518:	10 82       	st	Z, r1
}
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1528:	a1 e2       	ldi	r26, 0x21	; 33
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e1 e2       	ldi	r30, 0x21	; 33
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8f 60       	ori	r24, 0x0F	; 15
    1534:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    1536:	a2 e2       	ldi	r26, 0x22	; 34
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e2 e2       	ldi	r30, 0x22	; 34
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 7f       	andi	r24, 0xF0	; 240
    1542:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1544:	aa e0       	ldi	r26, 0x0A	; 10
    1546:	b1 e0       	ldi	r27, 0x01	; 1
    1548:	ea e0       	ldi	r30, 0x0A	; 10
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	80 81       	ld	r24, Z
    154e:	88 61       	ori	r24, 0x18	; 24
    1550:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1552:	ab e0       	ldi	r26, 0x0B	; 11
    1554:	b1 e0       	ldi	r27, 0x01	; 1
    1556:	eb e0       	ldi	r30, 0x0B	; 11
    1558:	f1 e0       	ldi	r31, 0x01	; 1
    155a:	80 81       	ld	r24, Z
    155c:	88 61       	ori	r24, 0x18	; 24
    155e:	8c 93       	st	X, r24
}
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <buzzer_pin_config>:

void buzzer_pin_config (void)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    156e:	a7 e2       	ldi	r26, 0x27	; 39
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e7 e2       	ldi	r30, 0x27	; 39
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 60       	ori	r24, 0x08	; 8
    157a:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    157c:	a8 e2       	ldi	r26, 0x28	; 40
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e8 e2       	ldi	r30, 0x28	; 40
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	87 7f       	andi	r24, 0xF7	; 247
    1588:	8c 93       	st	X, r24
}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1598:	e1 e8       	ldi	r30, 0x81	; 129
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    159e:	e5 e8       	ldi	r30, 0x85	; 133
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8c ef       	ldi	r24, 0xFC	; 252
    15a4:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    15a6:	e4 e8       	ldi	r30, 0x84	; 132
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    15ae:	e9 e8       	ldi	r30, 0x89	; 137
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    15b6:	e8 e8       	ldi	r30, 0x88	; 136
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    15be:	eb e8       	ldi	r30, 0x8B	; 139
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    15c6:	ea e8       	ldi	r30, 0x8A	; 138
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    15ce:	ed e8       	ldi	r30, 0x8D	; 141
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    15d6:	ec e8       	ldi	r30, 0x8C	; 140
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	80 83       	st	Z, r24
 ICR1H  = 0x03;	
    15de:	e7 e8       	ldi	r30, 0x87	; 135
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    15e6:	e6 e8       	ldi	r30, 0x86	; 134
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    15ee:	e0 e8       	ldi	r30, 0x80	; 128
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8b ea       	ldi	r24, 0xAB	; 171
    15f4:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    15f6:	e2 e8       	ldi	r30, 0x82	; 130
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    15fc:	e1 e8       	ldi	r30, 0x81	; 129
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8c e0       	ldi	r24, 0x0C	; 12
    1602:	80 83       	st	Z, r24
}
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <port_init>:


//Function to Initialize PORTS
void port_init()
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
	buzzer_pin_config();
    1612:	0e 94 b3 0a 	call	0x1566	; 0x1566 <buzzer_pin_config>
	lcd_port_config();
    1616:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <lcd_port_config>
	adc_pin_config();
    161a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <adc_pin_config>
	motion_pin_config();	
    161e:	0e 94 90 0a 	call	0x1520	; 0x1520 <motion_pin_config>
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    1622:	0e 94 29 0a 	call	0x1452	; 0x1452 <servo1_pin_config>
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
    1626:	0e 94 3e 0a 	call	0x147c	; 0x147c <servo2_pin_config>
 	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
    162a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <servo3_pin_config>
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    163c:	e1 e2       	ldi	r30, 0x21	; 33
    163e:	f1 e0       	ldi	r31, 0x01	; 1
    1640:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1642:	e5 e2       	ldi	r30, 0x25	; 37
    1644:	f1 e0       	ldi	r31, 0x01	; 1
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    164a:	e4 e2       	ldi	r30, 0x24	; 36
    164c:	f1 e0       	ldi	r31, 0x01	; 1
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1652:	e9 e2       	ldi	r30, 0x29	; 41
    1654:	f1 e0       	ldi	r31, 0x01	; 1
    1656:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1658:	e8 e2       	ldi	r30, 0x28	; 40
    165a:	f1 e0       	ldi	r31, 0x01	; 1
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1660:	eb e2       	ldi	r30, 0x2B	; 43
    1662:	f1 e0       	ldi	r31, 0x01	; 1
    1664:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1666:	ea e2       	ldi	r30, 0x2A	; 42
    1668:	f1 e0       	ldi	r31, 0x01	; 1
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    166e:	ed e2       	ldi	r30, 0x2D	; 45
    1670:	f1 e0       	ldi	r31, 0x01	; 1
    1672:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1674:	ec e2       	ldi	r30, 0x2C	; 44
    1676:	f1 e0       	ldi	r31, 0x01	; 1
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    167c:	e0 e2       	ldi	r30, 0x20	; 32
    167e:	f1 e0       	ldi	r31, 0x01	; 1
    1680:	89 ea       	ldi	r24, 0xA9	; 169
    1682:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1684:	e1 e2       	ldi	r30, 0x21	; 33
    1686:	f1 e0       	ldi	r31, 0x01	; 1
    1688:	8b e0       	ldi	r24, 0x0B	; 11
    168a:	80 83       	st	Z, r24
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    169a:	e1 ec       	ldi	r30, 0xC1	; 193
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    16a0:	e0 ec       	ldi	r30, 0xC0	; 192
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    16a6:	e2 ec       	ldi	r30, 0xC2	; 194
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	86 e0       	ldi	r24, 0x06	; 6
    16ac:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
    16ae:	e4 ec       	ldi	r30, 0xC4	; 196
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8f e5       	ldi	r24, 0x5F	; 95
    16b4:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    16b6:	e5 ec       	ldi	r30, 0xC5	; 197
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    16bc:	e1 ec       	ldi	r30, 0xC1	; 193
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	88 e9       	ldi	r24, 0x98	; 152
    16c2:	80 83       	st	Z, r24
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <adc_init>:

void adc_init()
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    16d2:	ea e7       	ldi	r30, 0x7A	; 122
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    16d8:	eb e7       	ldi	r30, 0x7B	; 123
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    16de:	ec e7       	ldi	r30, 0x7C	; 124
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 e2       	ldi	r24, 0x20	; 32
    16e4:	80 83       	st	Z, r24
	ACSR = 0x80;
    16e6:	e0 e5       	ldi	r30, 0x50	; 80
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 e8       	ldi	r24, 0x80	; 128
    16ec:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    16ee:	ea e7       	ldi	r30, 0x7A	; 122
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	86 e8       	ldi	r24, 0x86	; 134
    16f4:	80 83       	st	Z, r24
}
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	0f 92       	push	r0
    1702:	0f 92       	push	r0
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	88 30       	cpi	r24, 0x08	; 8
    170e:	20 f0       	brcs	.+8      	; 0x1718 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1710:	eb e7       	ldi	r30, 0x7B	; 123
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	88 e0       	ldi	r24, 0x08	; 8
    1716:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	87 70       	andi	r24, 0x07	; 7
    171c:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    171e:	ec e7       	ldi	r30, 0x7C	; 124
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	80 62       	ori	r24, 0x20	; 32
    1726:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1728:	aa e7       	ldi	r26, 0x7A	; 122
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ea e7       	ldi	r30, 0x7A	; 122
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	80 64       	ori	r24, 0x40	; 64
    1734:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    1736:	ea e7       	ldi	r30, 0x7A	; 122
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	80 71       	andi	r24, 0x10	; 16
    1742:	90 70       	andi	r25, 0x00	; 0
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	b9 f3       	breq	.-18     	; 0x1736 <ADC_Conversion+0x3a>
	a=ADCH;
    1748:	e9 e7       	ldi	r30, 0x79	; 121
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1750:	aa e7       	ldi	r26, 0x7A	; 122
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ea e7       	ldi	r30, 0x7A	; 122
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 61       	ori	r24, 0x10	; 16
    175c:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    175e:	eb e7       	ldi	r30, 0x7B	; 123
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	10 82       	st	Z, r1
	return a;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
}
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <print_sensor+0x6>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	6a 83       	std	Y+2, r22	; 0x02
    177e:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <ADC_Conversion>
    1786:	80 93 d0 03 	sts	0x03D0, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    178a:	80 91 d0 03 	lds	r24, 0x03D0
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	6a 81       	ldd	r22, Y+2	; 0x02
    1796:	a9 01       	movw	r20, r18
    1798:	23 e0       	ldi	r18, 0x03	; 3
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	0f 92       	push	r0
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    17bc:	e8 e2       	ldi	r30, 0x28	; 40
    17be:	f1 e0       	ldi	r31, 0x01	; 1
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    17c4:	ea e2       	ldi	r30, 0x2A	; 42
    17c6:	f1 e0       	ldi	r31, 0x01	; 1
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	80 83       	st	Z, r24
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <motion_set>:
//Function used for setting motor's direction

void motion_set (unsigned char Direction)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	0f 92       	push	r0
    17dc:	0f 92       	push	r0
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    17e4:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	8f 70       	andi	r24, 0x0F	; 15
    17ea:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    17ec:	e2 e2       	ldi	r30, 0x22	; 34
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	80 7f       	andi	r24, 0xF0	; 240
    17f8:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    17fa:	99 81       	ldd	r25, Y+1	; 0x01
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	89 2b       	or	r24, r25
    1800:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    1802:	e2 e2       	ldi	r30, 0x22	; 34
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	80 83       	st	Z, r24
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <forward>:

void forward (void) 
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    181c:	86 e0       	ldi	r24, 0x06	; 6
    181e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <motion_set>
}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <stop>:

void stop (void)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <motion_set>
}
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    1844:	8a e0       	ldi	r24, 0x0A	; 10
    1846:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <motion_set>
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <left>:


void left (void) //Left wheel backward, Right wheel forward
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    1858:	85 e0       	ldi	r24, 0x05	; 5
    185a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <motion_set>
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <init_devices>:



void init_devices (void)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    186c:	f8 94       	cli
	port_init();
    186e:	0e 94 05 0b 	call	0x160a	; 0x160a <port_init>
	uart0_init(); //Initailize UART1 for serial communiaction
    1872:	0e 94 49 0b 	call	0x1692	; 0x1692 <uart0_init>
	adc_init();
    1876:	0e 94 65 0b 	call	0x16ca	; 0x16ca <adc_init>
	timer5_init();
    187a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <timer5_init>
	timer1_init();
    187e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <timer1_init>
	sei();   //Enables the global interrupts
    1882:	78 94       	sei
}
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <servo_1>:
/*Code used for servo motors. Only 3 motors in the given robotic arm were used*/


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <servo_1+0xa>
    1894:	0f 92       	push	r0
    1896:	0f 92       	push	r0
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 e0       	ldi	r26, 0x00	; 0
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	ab 83       	std	Y+3, r26	; 0x03
    18ac:	bc 83       	std	Y+4, r27	; 0x04
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 e0       	ldi	r26, 0x00	; 0
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	bc 01       	movw	r22, r24
    18ba:	cd 01       	movw	r24, r26
    18bc:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__floatunsisf>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	2b e7       	ldi	r18, 0x7B	; 123
    18ca:	34 e1       	ldi	r19, 0x14	; 20
    18cc:	4e ee       	ldi	r20, 0xEE	; 238
    18ce:	5f e3       	ldi	r21, 0x3F	; 63
    18d0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__divsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4c e0       	ldi	r20, 0x0C	; 12
    18e2:	52 e4       	ldi	r21, 0x42	; 66
    18e4:	0e 94 26 1c 	call	0x384c	; 0x384c <__addsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	ab 83       	std	Y+3, r26	; 0x03
    18f2:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
    18f4:	e9 e8       	ldi	r30, 0x89	; 137
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
    18fa:	08 e8       	ldi	r16, 0x88	; 136
    18fc:	10 e0       	ldi	r17, 0x00	; 0
    18fe:	69 81       	ldd	r22, Y+1	; 0x01
    1900:	7a 81       	ldd	r23, Y+2	; 0x02
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	f8 01       	movw	r30, r16
    1910:	80 83       	st	Z, r24
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	08 95       	ret

00001926 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <servo_2+0xa>
    1930:	0f 92       	push	r0
    1932:	0f 92       	push	r0
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	ab 83       	std	Y+3, r26	; 0x03
    1948:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e0       	ldi	r26, 0x00	; 0
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__floatunsisf>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	2b e7       	ldi	r18, 0x7B	; 123
    1966:	34 e1       	ldi	r19, 0x14	; 20
    1968:	4e ee       	ldi	r20, 0xEE	; 238
    196a:	5f e3       	ldi	r21, 0x3F	; 63
    196c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__divsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	4c e0       	ldi	r20, 0x0C	; 12
    197e:	52 e4       	ldi	r21, 0x42	; 66
    1980:	0e 94 26 1c 	call	0x384c	; 0x384c <__addsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	ab 83       	std	Y+3, r26	; 0x03
    198e:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
    1990:	eb e8       	ldi	r30, 0x8B	; 139
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
    1996:	0a e8       	ldi	r16, 0x8A	; 138
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	69 81       	ldd	r22, Y+1	; 0x01
    199c:	7a 81       	ldd	r23, Y+2	; 0x02
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	f8 01       	movw	r30, r16
    19ac:	80 83       	st	Z, r24
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <servo_3+0xa>
    19cc:	0f 92       	push	r0
    19ce:	0f 92       	push	r0
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e0       	ldi	r26, 0x00	; 0
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	89 83       	std	Y+1, r24	; 0x01
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	ab 83       	std	Y+3, r26	; 0x03
    19e4:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees / 1.86) + 35.0;
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	a0 e0       	ldi	r26, 0x00	; 0
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__floatunsisf>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	2b e7       	ldi	r18, 0x7B	; 123
    1a02:	34 e1       	ldi	r19, 0x14	; 20
    1a04:	4e ee       	ldi	r20, 0xEE	; 238
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__divsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4c e0       	ldi	r20, 0x0C	; 12
    1a1a:	52 e4       	ldi	r21, 0x42	; 66
    1a1c:	0e 94 26 1c 	call	0x384c	; 0x384c <__addsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	89 83       	std	Y+1, r24	; 0x01
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	ab 83       	std	Y+3, r26	; 0x03
    1a2a:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    1a2c:	ed e8       	ldi	r30, 0x8D	; 141
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
    1a32:	0c e8       	ldi	r16, 0x8C	; 140
    1a34:	10 e0       	ldi	r17, 0x00	; 0
    1a36:	69 81       	ldd	r22, Y+1	; 0x01
    1a38:	7a 81       	ldd	r23, Y+2	; 0x02
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	f8 01       	movw	r30, r16
    1a48:	80 83       	st	Z, r24
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	08 95       	ret

00001a5e <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
    1a66:	e9 e8       	ldi	r30, 0x89	; 137
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
    1a6e:	e8 e8       	ldi	r30, 0x88	; 136
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8f ef       	ldi	r24, 0xFF	; 255
    1a74:	80 83       	st	Z, r24
}
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
    1a84:	eb e8       	ldi	r30, 0x8B	; 139
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
    1a8c:	ea e8       	ldi	r30, 0x8A	; 138
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	80 83       	st	Z, r24
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    1aa2:	ed e8       	ldi	r30, 0x8D	; 141
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
    1aaa:	ec e8       	ldi	r30, 0x8C	; 140
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	80 83       	st	Z, r24
} 
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <buzzer_on>:




void buzzer_on (void)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	0f 92       	push	r0
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1ac2:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1ac4:	e6 e2       	ldi	r30, 0x26	; 38
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	88 60       	ori	r24, 0x08	; 8
    1ad0:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1ad2:	e8 e2       	ldi	r30, 0x28	; 40
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	80 83       	st	Z, r24
}
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <buzzer_off>:

void buzzer_off (void)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1aec:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1aee:	e6 e2       	ldi	r30, 0x26	; 38
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1afc:	e8 e2       	ldi	r30, 0x28	; 40
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	80 83       	st	Z, r24
}
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <Read_And_Print>:

/*This function read whiteline sensors*/

void Read_And_Print(){
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	stop();
    1b14:	0e 94 14 0c 	call	0x1828	; 0x1828 <stop>
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <ADC_Conversion>
    1b1e:	80 93 c9 03 	sts	0x03C9, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <ADC_Conversion>
    1b28:	80 93 ca 03 	sts	0x03CA, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <ADC_Conversion>
    1b32:	80 93 cb 03 	sts	0x03CB, r24

	/*lcd_print(2, 1, Left_white_line, 3);
	lcd_print(2, 7, Center_white_line, 3);
	lcd_print(2, 13, Right_white_line, 3);*/

}
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <Line_Forward_Helper>:


/*This is just a helper function to Line_Forward which move the firebird 
on a line for a given duration*/

void Line_Forward_Helper(){
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
  Read_And_Print();
    1b44:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <Read_And_Print>
   
  
  if(Center_white_line>40)
    1b48:	80 91 ca 03 	lds	r24, 0x03CA
    1b4c:	89 32       	cpi	r24, 0x29	; 41
    1b4e:	38 f0       	brcs	.+14     	; 0x1b5e <Line_Forward_Helper+0x22>
  {
  	velocity(200,200);
    1b50:	88 ec       	ldi	r24, 0xC8	; 200
    1b52:	68 ec       	ldi	r22, 0xC8	; 200
    1b54:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <velocity>
   	forward();
    1b58:	0e 94 0a 0c 	call	0x1814	; 0x1814 <forward>
    1b5c:	2c c0       	rjmp	.+88     	; 0x1bb6 <Line_Forward_Helper+0x7a>
  }
  else if(Left_white_line > Right_white_line+5)
    1b5e:	80 91 c9 03 	lds	r24, 0x03C9
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	80 91 cb 03 	lds	r24, 0x03CB
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	05 96       	adiw	r24, 0x05	; 5
    1b70:	82 17       	cp	r24, r18
    1b72:	93 07       	cpc	r25, r19
    1b74:	3c f4       	brge	.+14     	; 0x1b84 <Line_Forward_Helper+0x48>
  {
  	velocity(180,220);
    1b76:	84 eb       	ldi	r24, 0xB4	; 180
    1b78:	6c ed       	ldi	r22, 0xDC	; 220
    1b7a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <velocity>
    forward();
    1b7e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <forward>
    1b82:	19 c0       	rjmp	.+50     	; 0x1bb6 <Line_Forward_Helper+0x7a>
  }
  else if(Right_white_line > Left_white_line+5)
    1b84:	80 91 cb 03 	lds	r24, 0x03CB
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	80 91 c9 03 	lds	r24, 0x03C9
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	05 96       	adiw	r24, 0x05	; 5
    1b96:	82 17       	cp	r24, r18
    1b98:	93 07       	cpc	r25, r19
    1b9a:	3c f4       	brge	.+14     	; 0x1baa <Line_Forward_Helper+0x6e>
  {
  	velocity(220,180);
    1b9c:	8c ed       	ldi	r24, 0xDC	; 220
    1b9e:	64 eb       	ldi	r22, 0xB4	; 180
    1ba0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <velocity>
    forward();
    1ba4:	0e 94 0a 0c 	call	0x1814	; 0x1814 <forward>
    1ba8:	06 c0       	rjmp	.+12     	; 0x1bb6 <Line_Forward_Helper+0x7a>
  } else 
  {
   velocity(10,10);
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
    1bac:	6a e0       	ldi	r22, 0x0A	; 10
    1bae:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <velocity>
   forward();
    1bb2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <forward>
  }
}
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <Line_Forward>:

void Line_Forward(int mSec){
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	62 97       	sbiw	r28, 0x12	; 18
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	9a 8b       	std	Y+18, r25	; 0x12
    1bd2:	89 8b       	std	Y+17, r24	; 0x11
	int time=0;
    1bd4:	18 8a       	std	Y+16, r1	; 0x10
    1bd6:	1f 86       	std	Y+15, r1	; 0x0f
    1bd8:	7b c0       	rjmp	.+246    	; 0x1cd0 <Line_Forward+0x114>
	while(time<=mSec){
		Read_And_Print();
    1bda:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <Read_And_Print>
		Line_Forward_Helper();
    1bde:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Line_Forward_Helper>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a0 e2       	ldi	r26, 0x20	; 32
    1be8:	b1 e4       	ldi	r27, 0x41	; 65
    1bea:	8b 87       	std	Y+11, r24	; 0x0b
    1bec:	9c 87       	std	Y+12, r25	; 0x0c
    1bee:	ad 87       	std	Y+13, r26	; 0x0d
    1bf0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfa:	26 e6       	ldi	r18, 0x66	; 102
    1bfc:	36 e6       	ldi	r19, 0x66	; 102
    1bfe:	46 e6       	ldi	r20, 0x66	; 102
    1c00:	55 e4       	ldi	r21, 0x45	; 69
    1c02:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	8f 83       	std	Y+7, r24	; 0x07
    1c0c:	98 87       	std	Y+8, r25	; 0x08
    1c0e:	a9 87       	std	Y+9, r26	; 0x09
    1c10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c12:	6f 81       	ldd	r22, Y+7	; 0x07
    1c14:	78 85       	ldd	r23, Y+8	; 0x08
    1c16:	89 85       	ldd	r24, Y+9	; 0x09
    1c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e8       	ldi	r20, 0x80	; 128
    1c20:	5f e3       	ldi	r21, 0x3F	; 63
    1c22:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    1c26:	88 23       	and	r24, r24
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <Line_Forward+0x78>
		__ticks = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
    1c32:	3f c0       	rjmp	.+126    	; 0x1cb2 <Line_Forward+0xf6>
	else if (__tmp > 65535)
    1c34:	6f 81       	ldd	r22, Y+7	; 0x07
    1c36:	78 85       	ldd	r23, Y+8	; 0x08
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	3f ef       	ldi	r19, 0xFF	; 255
    1c40:	4f e7       	ldi	r20, 0x7F	; 127
    1c42:	57 e4       	ldi	r21, 0x47	; 71
    1c44:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    1c48:	18 16       	cp	r1, r24
    1c4a:	4c f5       	brge	.+82     	; 0x1c9e <Line_Forward+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e2       	ldi	r20, 0x20	; 32
    1c5a:	51 e4       	ldi	r21, 0x41	; 65
    1c5c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <Line_Forward+0xd8>
    1c76:	80 e7       	ldi	r24, 0x70	; 112
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	9c 83       	std	Y+4, r25	; 0x04
    1c7c:	8b 83       	std	Y+3, r24	; 0x03
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <Line_Forward+0xc6>
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	9e 83       	std	Y+6, r25	; 0x06
    1c92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	69 f7       	brne	.-38     	; 0x1c76 <Line_Forward+0xba>
    1c9c:	14 c0       	rjmp	.+40     	; 0x1cc6 <Line_Forward+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <Line_Forward+0x102>
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		time+=10;
    1cc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc8:	98 89       	ldd	r25, Y+16	; 0x10
    1cca:	0a 96       	adiw	r24, 0x0a	; 10
    1ccc:	98 8b       	std	Y+16, r25	; 0x10
    1cce:	8f 87       	std	Y+15, r24	; 0x0f
  }
}

void Line_Forward(int mSec){
	int time=0;
	while(time<=mSec){
    1cd0:	2f 85       	ldd	r18, Y+15	; 0x0f
    1cd2:	38 89       	ldd	r19, Y+16	; 0x10
    1cd4:	89 89       	ldd	r24, Y+17	; 0x11
    1cd6:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd8:	82 17       	cp	r24, r18
    1cda:	93 07       	cpc	r25, r19
    1cdc:	0c f0       	brlt	.+2      	; 0x1ce0 <Line_Forward+0x124>
    1cde:	7d cf       	rjmp	.-262    	; 0x1bda <Line_Forward+0x1e>
		Line_Forward_Helper();
		_delay_ms(10);
		time+=10;
	}
	
}
    1ce0:	62 96       	adiw	r28, 0x12	; 18
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <Move_Line>:

/*This function moves the firebird x number of node (nodes are defined as positions 
in the arena where all the whiteline sensors are indicating black)*/

void Move_Line(int x){
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	62 97       	sbiw	r28, 0x12	; 18
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	9a 8b       	std	Y+18, r25	; 0x12
    1d08:	89 8b       	std	Y+17, r24	; 0x11
	int count = 0;
    1d0a:	18 8a       	std	Y+16, r1	; 0x10
    1d0c:	1f 86       	std	Y+15, r1	; 0x0f
	lcd_print(1,1,count,3);
    1d0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d10:	38 89       	ldd	r19, Y+16	; 0x10
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	61 e0       	ldi	r22, 0x01	; 1
    1d16:	a9 01       	movw	r20, r18
    1d18:	23 e0       	ldi	r18, 0x03	; 3
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    1d20:	a5 c0       	rjmp	.+330    	; 0x1e6c <Move_Line+0x17a>
	while(count != 2*x)	
	 { 
	  Read_And_Print();
    1d22:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <Read_And_Print>
	  if(Center_white_line>40){
    1d26:	80 91 ca 03 	lds	r24, 0x03CA
    1d2a:	89 32       	cpi	r24, 0x29	; 41
    1d2c:	08 f4       	brcc	.+2      	; 0x1d30 <Move_Line+0x3e>
    1d2e:	9a c0       	rjmp	.+308    	; 0x1e64 <Move_Line+0x172>
	  	if(Left_white_line >40){
    1d30:	80 91 c9 03 	lds	r24, 0x03C9
    1d34:	89 32       	cpi	r24, 0x29	; 41
    1d36:	08 f4       	brcc	.+2      	; 0x1d3a <Move_Line+0x48>
    1d38:	95 c0       	rjmp	.+298    	; 0x1e64 <Move_Line+0x172>
			if(Right_white_line>40){
    1d3a:	80 91 cb 03 	lds	r24, 0x03CB
    1d3e:	89 32       	cpi	r24, 0x29	; 41
    1d40:	08 f4       	brcc	.+2      	; 0x1d44 <Move_Line+0x52>
    1d42:	90 c0       	rjmp	.+288    	; 0x1e64 <Move_Line+0x172>
				stop();
    1d44:	0e 94 14 0c 	call	0x1828	; 0x1828 <stop>
				count++;
    1d48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d4a:	98 89       	ldd	r25, Y+16	; 0x10
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	98 8b       	std	Y+16, r25	; 0x10
    1d50:	8f 87       	std	Y+15, r24	; 0x0f
				lcd_print(1,1,count,3);
    1d52:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d54:	38 89       	ldd	r19, Y+16	; 0x10
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	23 e0       	ldi	r18, 0x03	; 3
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	0e 94 45 09 	call	0x128a	; 0x128a <lcd_print>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	aa ef       	ldi	r26, 0xFA	; 250
    1d6a:	b3 e4       	ldi	r27, 0x43	; 67
    1d6c:	8b 87       	std	Y+11, r24	; 0x0b
    1d6e:	9c 87       	std	Y+12, r25	; 0x0c
    1d70:	ad 87       	std	Y+13, r26	; 0x0d
    1d72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7c:	26 e6       	ldi	r18, 0x66	; 102
    1d7e:	36 e6       	ldi	r19, 0x66	; 102
    1d80:	46 e6       	ldi	r20, 0x66	; 102
    1d82:	55 e4       	ldi	r21, 0x45	; 69
    1d84:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8f 83       	std	Y+7, r24	; 0x07
    1d8e:	98 87       	std	Y+8, r25	; 0x08
    1d90:	a9 87       	std	Y+9, r26	; 0x09
    1d92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <Move_Line+0xc4>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <Move_Line+0x142>
	else if (__tmp > 65535)
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <Move_Line+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9e 83       	std	Y+6, r25	; 0x06
    1df4:	8d 83       	std	Y+5, r24	; 0x05
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <Move_Line+0x124>
    1df8:	80 e7       	ldi	r24, 0x70	; 112
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	8b 83       	std	Y+3, r24	; 0x03
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <Move_Line+0x112>
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <Move_Line+0x106>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <Move_Line+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6f 81       	ldd	r22, Y+7	; 0x07
    1e22:	78 85       	ldd	r23, Y+8	; 0x08
    1e24:	89 85       	ldd	r24, Y+9	; 0x09
    1e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e28:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9e 83       	std	Y+6, r25	; 0x06
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
    1e36:	9e 81       	ldd	r25, Y+6	; 0x06
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <Move_Line+0x14e>
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
				
				_delay_ms(500);
				if(count!=2*x)Line_Forward(100);
    1e48:	89 89       	ldd	r24, Y+17	; 0x11
    1e4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4c:	9c 01       	movw	r18, r24
    1e4e:	22 0f       	add	r18, r18
    1e50:	33 1f       	adc	r19, r19
    1e52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e54:	98 89       	ldd	r25, Y+16	; 0x10
    1e56:	28 17       	cp	r18, r24
    1e58:	39 07       	cpc	r19, r25
    1e5a:	21 f0       	breq	.+8      	; 0x1e64 <Move_Line+0x172>
    1e5c:	84 e6       	ldi	r24, 0x64	; 100
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Line_Forward>
			}
		}
	  }
	  Line_Forward(300);
    1e64:	8c e2       	ldi	r24, 0x2C	; 44
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Line_Forward>
in the arena where all the whiteline sensors are indicating black)*/

void Move_Line(int x){
	int count = 0;
	lcd_print(1,1,count,3);
	while(count != 2*x)	
    1e6c:	89 89       	ldd	r24, Y+17	; 0x11
    1e6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e70:	9c 01       	movw	r18, r24
    1e72:	22 0f       	add	r18, r18
    1e74:	33 1f       	adc	r19, r19
    1e76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e78:	98 89       	ldd	r25, Y+16	; 0x10
    1e7a:	28 17       	cp	r18, r24
    1e7c:	39 07       	cpc	r19, r25
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <Move_Line+0x190>
    1e80:	50 cf       	rjmp	.-352    	; 0x1d22 <Move_Line+0x30>
		}
	  }
	  Line_Forward(300);
	  
	 }
	 stop();
    1e82:	0e 94 14 0c 	call	0x1828	; 0x1828 <stop>
}
    1e86:	62 96       	adiw	r28, 0x12	; 18
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <Move_Right>:

/*This function helps firebird make a right turn so that after the turn, firebird places itself on the black line only*/


void Move_Right(){
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	6c 97       	sbiw	r28, 0x1c	; 28
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
	//Line_Forward(200);
	
  	Read_And_Print();
    1eac:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <Read_And_Print>
	right();
    1eb0:	0e 94 1e 0c 	call	0x183c	; 0x183c <right>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a6 e9       	ldi	r26, 0x96	; 150
    1eba:	b3 e4       	ldi	r27, 0x43	; 67
    1ebc:	89 8f       	std	Y+25, r24	; 0x19
    1ebe:	9a 8f       	std	Y+26, r25	; 0x1a
    1ec0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ec2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ecc:	26 e6       	ldi	r18, 0x66	; 102
    1ece:	36 e6       	ldi	r19, 0x66	; 102
    1ed0:	46 e6       	ldi	r20, 0x66	; 102
    1ed2:	55 e4       	ldi	r21, 0x45	; 69
    1ed4:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8d 8b       	std	Y+21, r24	; 0x15
    1ede:	9e 8b       	std	Y+22, r25	; 0x16
    1ee0:	af 8b       	std	Y+23, r26	; 0x17
    1ee2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ee4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eea:	98 8d       	ldd	r25, Y+24	; 0x18
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <Move_Right+0x6e>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 8b       	std	Y+20, r25	; 0x14
    1f02:	8b 8b       	std	Y+19, r24	; 0x13
    1f04:	3f c0       	rjmp	.+126    	; 0x1f84 <Move_Right+0xec>
	else if (__tmp > 65535)
    1f06:	6d 89       	ldd	r22, Y+21	; 0x15
    1f08:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	4c f5       	brge	.+82     	; 0x1f70 <Move_Right+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e2       	ldi	r20, 0x20	; 32
    1f2c:	51 e4       	ldi	r21, 0x41	; 65
    1f2e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9c 8b       	std	Y+20, r25	; 0x14
    1f44:	8b 8b       	std	Y+19, r24	; 0x13
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <Move_Right+0xce>
    1f48:	80 e7       	ldi	r24, 0x70	; 112
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	9a 8b       	std	Y+18, r25	; 0x12
    1f4e:	89 8b       	std	Y+17, r24	; 0x11
    1f50:	89 89       	ldd	r24, Y+17	; 0x11
    1f52:	9a 89       	ldd	r25, Y+18	; 0x12
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <Move_Right+0xbc>
    1f58:	9a 8b       	std	Y+18, r25	; 0x12
    1f5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	8b 89       	ldd	r24, Y+19	; 0x13
    1f68:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <Move_Right+0xb0>
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <Move_Right+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	6d 89       	ldd	r22, Y+21	; 0x15
    1f72:	7e 89       	ldd	r23, Y+22	; 0x16
    1f74:	8f 89       	ldd	r24, Y+23	; 0x17
    1f76:	98 8d       	ldd	r25, Y+24	; 0x18
    1f78:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9c 8b       	std	Y+20, r25	; 0x14
    1f82:	8b 8b       	std	Y+19, r24	; 0x13
    1f84:	8b 89       	ldd	r24, Y+19	; 0x13
    1f86:	9c 89       	ldd	r25, Y+20	; 0x14
    1f88:	98 8b       	std	Y+16, r25	; 0x10
    1f8a:	8f 87       	std	Y+15, r24	; 0x0f
    1f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8e:	98 89       	ldd	r25, Y+16	; 0x10
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <Move_Right+0xf8>
    1f94:	98 8b       	std	Y+16, r25	; 0x10
    1f96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	Read_And_Print();
    1f98:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <Read_And_Print>
    1f9c:	76 c0       	rjmp	.+236    	; 0x208a <Move_Right+0x1f2>
	while(Center_white_line<40){	
		right();
    1f9e:	0e 94 1e 0c 	call	0x183c	; 0x183c <right>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e2       	ldi	r26, 0x20	; 32
    1fa8:	b1 e4       	ldi	r27, 0x41	; 65
    1faa:	8b 87       	std	Y+11, r24	; 0x0b
    1fac:	9c 87       	std	Y+12, r25	; 0x0c
    1fae:	ad 87       	std	Y+13, r26	; 0x0d
    1fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fba:	26 e6       	ldi	r18, 0x66	; 102
    1fbc:	36 e6       	ldi	r19, 0x66	; 102
    1fbe:	46 e6       	ldi	r20, 0x66	; 102
    1fc0:	55 e4       	ldi	r21, 0x45	; 69
    1fc2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	8f 83       	std	Y+7, r24	; 0x07
    1fcc:	98 87       	std	Y+8, r25	; 0x08
    1fce:	a9 87       	std	Y+9, r26	; 0x09
    1fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd4:	78 85       	ldd	r23, Y+8	; 0x08
    1fd6:	89 85       	ldd	r24, Y+9	; 0x09
    1fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e8       	ldi	r20, 0x80	; 128
    1fe0:	5f e3       	ldi	r21, 0x3F	; 63
    1fe2:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    1fe6:	88 23       	and	r24, r24
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <Move_Right+0x15c>
		__ticks = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9e 83       	std	Y+6, r25	; 0x06
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	3f c0       	rjmp	.+126    	; 0x2072 <Move_Right+0x1da>
	else if (__tmp > 65535)
    1ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff6:	78 85       	ldd	r23, Y+8	; 0x08
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	4c f5       	brge	.+82     	; 0x205e <Move_Right+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e2       	ldi	r20, 0x20	; 32
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	bc 01       	movw	r22, r24
    2026:	cd 01       	movw	r24, r26
    2028:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <Move_Right+0x1bc>
    2036:	80 e7       	ldi	r24, 0x70	; 112
    2038:	91 e0       	ldi	r25, 0x01	; 1
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <Move_Right+0x1aa>
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	9e 81       	ldd	r25, Y+6	; 0x06
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	69 f7       	brne	.-38     	; 0x2036 <Move_Right+0x19e>
    205c:	14 c0       	rjmp	.+40     	; 0x2086 <Move_Right+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9e 83       	std	Y+6, r25	; 0x06
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	8d 81       	ldd	r24, Y+5	; 0x05
    2074:	9e 81       	ldd	r25, Y+6	; 0x06
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <Move_Right+0x1e6>
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Read_And_Print();
    2086:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <Read_And_Print>
	
  	Read_And_Print();
	right();
	_delay_ms(300);
	Read_And_Print();
	while(Center_white_line<40){	
    208a:	80 91 ca 03 	lds	r24, 0x03CA
    208e:	88 32       	cpi	r24, 0x28	; 40
    2090:	08 f4       	brcc	.+2      	; 0x2094 <Move_Right+0x1fc>
    2092:	85 cf       	rjmp	.-246    	; 0x1f9e <Move_Right+0x106>
		right();
		_delay_ms(10);
		Read_And_Print();
	}
	stop();
    2094:	0e 94 14 0c 	call	0x1828	; 0x1828 <stop>
}
    2098:	6c 96       	adiw	r28, 0x1c	; 28
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <Move>:

/*This function takes the firebird from one coordinate to another. Function parameters are difference of coordinates*/


void Move(int x_diff, int y_diff){
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	a0 97       	sbiw	r28, 0x20	; 32
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	9e 8f       	std	Y+30, r25	; 0x1e
    20c0:	8d 8f       	std	Y+29, r24	; 0x1d
    20c2:	78 a3       	std	Y+32, r23	; 0x20
    20c4:	6f 8f       	std	Y+31, r22	; 0x1f
	
	Line_Forward(500);
    20c6:	84 ef       	ldi	r24, 0xF4	; 244
    20c8:	91 e0       	ldi	r25, 0x01	; 1
    20ca:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Line_Forward>
	stop();
    20ce:	0e 94 14 0c 	call	0x1828	; 0x1828 <stop>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	aa ef       	ldi	r26, 0xFA	; 250
    20d8:	b3 e4       	ldi	r27, 0x43	; 67
    20da:	89 8f       	std	Y+25, r24	; 0x19
    20dc:	9a 8f       	std	Y+26, r25	; 0x1a
    20de:	ab 8f       	std	Y+27, r26	; 0x1b
    20e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e2:	69 8d       	ldd	r22, Y+25	; 0x19
    20e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ea:	26 e6       	ldi	r18, 0x66	; 102
    20ec:	36 e6       	ldi	r19, 0x66	; 102
    20ee:	46 e6       	ldi	r20, 0x66	; 102
    20f0:	55 e4       	ldi	r21, 0x45	; 69
    20f2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	8d 8b       	std	Y+21, r24	; 0x15
    20fc:	9e 8b       	std	Y+22, r25	; 0x16
    20fe:	af 8b       	std	Y+23, r26	; 0x17
    2100:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2102:	6d 89       	ldd	r22, Y+21	; 0x15
    2104:	7e 89       	ldd	r23, Y+22	; 0x16
    2106:	8f 89       	ldd	r24, Y+23	; 0x17
    2108:	98 8d       	ldd	r25, Y+24	; 0x18
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <Move+0x7a>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	3f c0       	rjmp	.+126    	; 0x21a2 <Move+0xf8>
	else if (__tmp > 65535)
    2124:	6d 89       	ldd	r22, Y+21	; 0x15
    2126:	7e 89       	ldd	r23, Y+22	; 0x16
    2128:	8f 89       	ldd	r24, Y+23	; 0x17
    212a:	98 8d       	ldd	r25, Y+24	; 0x18
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	4f e7       	ldi	r20, 0x7F	; 127
    2132:	57 e4       	ldi	r21, 0x47	; 71
    2134:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2138:	18 16       	cp	r1, r24
    213a:	4c f5       	brge	.+82     	; 0x218e <Move+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	69 8d       	ldd	r22, Y+25	; 0x19
    213e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2140:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2142:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	8b 8b       	std	Y+19, r24	; 0x13
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <Move+0xda>
    2166:	80 e7       	ldi	r24, 0x70	; 112
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	9a 8b       	std	Y+18, r25	; 0x12
    216c:	89 8b       	std	Y+17, r24	; 0x11
    216e:	89 89       	ldd	r24, Y+17	; 0x11
    2170:	9a 89       	ldd	r25, Y+18	; 0x12
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <Move+0xc8>
    2176:	9a 8b       	std	Y+18, r25	; 0x12
    2178:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	8b 89       	ldd	r24, Y+19	; 0x13
    217c:	9c 89       	ldd	r25, Y+20	; 0x14
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2184:	8b 89       	ldd	r24, Y+19	; 0x13
    2186:	9c 89       	ldd	r25, Y+20	; 0x14
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	69 f7       	brne	.-38     	; 0x2166 <Move+0xbc>
    218c:	14 c0       	rjmp	.+40     	; 0x21b6 <Move+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	6d 89       	ldd	r22, Y+21	; 0x15
    2190:	7e 89       	ldd	r23, Y+22	; 0x16
    2192:	8f 89       	ldd	r24, Y+23	; 0x17
    2194:	98 8d       	ldd	r25, Y+24	; 0x18
    2196:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9c 8b       	std	Y+20, r25	; 0x14
    21a0:	8b 8b       	std	Y+19, r24	; 0x13
    21a2:	8b 89       	ldd	r24, Y+19	; 0x13
    21a4:	9c 89       	ldd	r25, Y+20	; 0x14
    21a6:	98 8b       	std	Y+16, r25	; 0x10
    21a8:	8f 87       	std	Y+15, r24	; 0x0f
    21aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ac:	98 89       	ldd	r25, Y+16	; 0x10
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <Move+0x104>
    21b2:	98 8b       	std	Y+16, r25	; 0x10
    21b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	Move_Line(x_diff);
    21b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ba:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <Move_Line>
	Move_Right();
    21be:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <Move_Right>
	stop();
    21c2:	0e 94 14 0c 	call	0x1828	; 0x1828 <stop>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	aa e7       	ldi	r26, 0x7A	; 122
    21cc:	b4 e4       	ldi	r27, 0x44	; 68
    21ce:	8b 87       	std	Y+11, r24	; 0x0b
    21d0:	9c 87       	std	Y+12, r25	; 0x0c
    21d2:	ad 87       	std	Y+13, r26	; 0x0d
    21d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	26 e6       	ldi	r18, 0x66	; 102
    21e0:	36 e6       	ldi	r19, 0x66	; 102
    21e2:	46 e6       	ldi	r20, 0x66	; 102
    21e4:	55 e4       	ldi	r21, 0x45	; 69
    21e6:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	8f 83       	std	Y+7, r24	; 0x07
    21f0:	98 87       	std	Y+8, r25	; 0x08
    21f2:	a9 87       	std	Y+9, r26	; 0x09
    21f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f6:	6f 81       	ldd	r22, Y+7	; 0x07
    21f8:	78 85       	ldd	r23, Y+8	; 0x08
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	2c f4       	brge	.+10     	; 0x2218 <__stack+0x19>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	3f c0       	rjmp	.+126    	; 0x2296 <__stack+0x97>
	else if (__tmp > 65535)
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	4c f5       	brge	.+82     	; 0x2282 <__stack+0x83>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	6b 85       	ldd	r22, Y+11	; 0x0b
    2232:	7c 85       	ldd	r23, Y+12	; 0x0c
    2234:	8d 85       	ldd	r24, Y+13	; 0x0d
    2236:	9e 85       	ldd	r25, Y+14	; 0x0e
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e2       	ldi	r20, 0x20	; 32
    223e:	51 e4       	ldi	r21, 0x41	; 65
    2240:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9e 83       	std	Y+6, r25	; 0x06
    2256:	8d 83       	std	Y+5, r24	; 0x05
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <__stack+0x79>
    225a:	80 e7       	ldi	r24, 0x70	; 112
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	9c 83       	std	Y+4, r25	; 0x04
    2260:	8b 83       	std	Y+3, r24	; 0x03
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <__stack+0x67>
    226a:	9c 83       	std	Y+4, r25	; 0x04
    226c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	69 f7       	brne	.-38     	; 0x225a <__stack+0x5b>
    2280:	14 c0       	rjmp	.+40     	; 0x22aa <__stack+0xab>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	8d 83       	std	Y+5, r24	; 0x05
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <__stack+0xa3>
    22a6:	9a 83       	std	Y+2, r25	; 0x02
    22a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	Move_Line(y_diff);
    22aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ac:	98 a1       	ldd	r25, Y+32	; 0x20
    22ae:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <Move_Line>
	stop();	
    22b2:	0e 94 14 0c 	call	0x1828	; 0x1828 <stop>
}
    22b6:	a0 96       	adiw	r28, 0x20	; 32
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <Lift>:

/*This function lifts an object*/


void Lift(){
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	ce 57       	subi	r28, 0x7E	; 126
    22d6:	d0 40       	sbci	r29, 0x00	; 0
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
	//servo 1 grip
	//servo 2 upper
	//servo 3 lower
	
	//Open and come to pick 
	for (i = 0; i <120; i++)
    22e2:	10 92 d2 03 	sts	0x03D2, r1
    22e6:	10 92 d1 03 	sts	0x03D1, r1
    22ea:	35 c2       	rjmp	.+1130   	; 0x2756 <Lift+0x48e>
	 {
	  servo_1(i);
    22ec:	80 91 d1 03 	lds	r24, 0x03D1
    22f0:	90 91 d2 03 	lds	r25, 0x03D2
    22f4:	0e 94 45 0c 	call	0x188a	; 0x188a <servo_1>
    22f8:	fe 01       	movw	r30, r28
    22fa:	e5 58       	subi	r30, 0x85	; 133
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 ef       	ldi	r26, 0xF0	; 240
    2304:	b1 e4       	ldi	r27, 0x41	; 65
    2306:	80 83       	st	Z, r24
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	a2 83       	std	Z+2, r26	; 0x02
    230c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230e:	8e 01       	movw	r16, r28
    2310:	09 58       	subi	r16, 0x89	; 137
    2312:	1f 4f       	sbci	r17, 0xFF	; 255
    2314:	fe 01       	movw	r30, r28
    2316:	e5 58       	subi	r30, 0x85	; 133
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	60 81       	ld	r22, Z
    231c:	71 81       	ldd	r23, Z+1	; 0x01
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	26 e6       	ldi	r18, 0x66	; 102
    2324:	36 e6       	ldi	r19, 0x66	; 102
    2326:	46 e6       	ldi	r20, 0x66	; 102
    2328:	55 e4       	ldi	r21, 0x45	; 69
    232a:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	80 83       	st	Z, r24
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	a2 83       	std	Z+2, r26	; 0x02
    233a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233c:	fe 01       	movw	r30, r28
    233e:	e9 58       	subi	r30, 0x89	; 137
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	44 f4       	brge	.+16     	; 0x236a <Lift+0xa2>
		__ticks = 1;
    235a:	fe 01       	movw	r30, r28
    235c:	eb 58       	subi	r30, 0x8B	; 139
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
    2368:	64 c0       	rjmp	.+200    	; 0x2432 <Lift+0x16a>
	else if (__tmp > 65535)
    236a:	fe 01       	movw	r30, r28
    236c:	e9 58       	subi	r30, 0x89	; 137
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	0c f0       	brlt	.+2      	; 0x238a <Lift+0xc2>
    2388:	43 c0       	rjmp	.+134    	; 0x2410 <Lift+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	fe 01       	movw	r30, r28
    238c:	e5 58       	subi	r30, 0x85	; 133
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e2       	ldi	r20, 0x20	; 32
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8e 01       	movw	r16, r28
    23aa:	0b 58       	subi	r16, 0x8B	; 139
    23ac:	1f 4f       	sbci	r17, 0xFF	; 255
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	f8 01       	movw	r30, r16
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	80 83       	st	Z, r24
    23c0:	1f c0       	rjmp	.+62     	; 0x2400 <Lift+0x138>
    23c2:	fe 01       	movw	r30, r28
    23c4:	ed 58       	subi	r30, 0x8D	; 141
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 e7       	ldi	r24, 0x70	; 112
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
    23d0:	fe 01       	movw	r30, r28
    23d2:	ed 58       	subi	r30, 0x8D	; 141
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <Lift+0x112>
    23de:	fe 01       	movw	r30, r28
    23e0:	ed 58       	subi	r30, 0x8D	; 141
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	de 01       	movw	r26, r28
    23ea:	ab 58       	subi	r26, 0x8B	; 139
    23ec:	bf 4f       	sbci	r27, 0xFF	; 255
    23ee:	fe 01       	movw	r30, r28
    23f0:	eb 58       	subi	r30, 0x8B	; 139
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	11 96       	adiw	r26, 0x01	; 1
    23fc:	9c 93       	st	X, r25
    23fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	fe 01       	movw	r30, r28
    2402:	eb 58       	subi	r30, 0x8B	; 139
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	d1 f6       	brne	.-76     	; 0x23c2 <Lift+0xfa>
    240e:	27 c0       	rjmp	.+78     	; 0x245e <Lift+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	8e 01       	movw	r16, r28
    2412:	0b 58       	subi	r16, 0x8B	; 139
    2414:	1f 4f       	sbci	r17, 0xFF	; 255
    2416:	fe 01       	movw	r30, r28
    2418:	e9 58       	subi	r30, 0x89	; 137
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	f8 01       	movw	r30, r16
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    2432:	de 01       	movw	r26, r28
    2434:	af 58       	subi	r26, 0x8F	; 143
    2436:	bf 4f       	sbci	r27, 0xFF	; 255
    2438:	fe 01       	movw	r30, r28
    243a:	eb 58       	subi	r30, 0x8B	; 139
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	8d 93       	st	X+, r24
    2444:	9c 93       	st	X, r25
    2446:	fe 01       	movw	r30, r28
    2448:	ef 58       	subi	r30, 0x8F	; 143
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	91 81       	ldd	r25, Z+1	; 0x01
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <Lift+0x188>
    2454:	fe 01       	movw	r30, r28
    2456:	ef 58       	subi	r30, 0x8F	; 143
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
	  _delay_ms(30);
	  servo_2(i);
    245e:	80 91 d1 03 	lds	r24, 0x03D1
    2462:	90 91 d2 03 	lds	r25, 0x03D2
    2466:	0e 94 93 0c 	call	0x1926	; 0x1926 <servo_2>
    246a:	fe 01       	movw	r30, r28
    246c:	e3 59       	subi	r30, 0x93	; 147
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 ef       	ldi	r26, 0xF0	; 240
    2476:	b1 e4       	ldi	r27, 0x41	; 65
    2478:	80 83       	st	Z, r24
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	a2 83       	std	Z+2, r26	; 0x02
    247e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	8e 01       	movw	r16, r28
    2482:	07 59       	subi	r16, 0x97	; 151
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    2486:	fe 01       	movw	r30, r28
    2488:	e3 59       	subi	r30, 0x93	; 147
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	26 e6       	ldi	r18, 0x66	; 102
    2496:	36 e6       	ldi	r19, 0x66	; 102
    2498:	46 e6       	ldi	r20, 0x66	; 102
    249a:	55 e4       	ldi	r21, 0x45	; 69
    249c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	f8 01       	movw	r30, r16
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	a2 83       	std	Z+2, r26	; 0x02
    24ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ae:	fe 01       	movw	r30, r28
    24b0:	e7 59       	subi	r30, 0x97	; 151
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	44 f4       	brge	.+16     	; 0x24dc <Lift+0x214>
		__ticks = 1;
    24cc:	fe 01       	movw	r30, r28
    24ce:	e9 59       	subi	r30, 0x99	; 153
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
    24da:	64 c0       	rjmp	.+200    	; 0x25a4 <Lift+0x2dc>
	else if (__tmp > 65535)
    24dc:	fe 01       	movw	r30, r28
    24de:	e7 59       	subi	r30, 0x97	; 151
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	0c f0       	brlt	.+2      	; 0x24fc <Lift+0x234>
    24fa:	43 c0       	rjmp	.+134    	; 0x2582 <Lift+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	fe 01       	movw	r30, r28
    24fe:	e3 59       	subi	r30, 0x93	; 147
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8e 01       	movw	r16, r28
    251c:	09 59       	subi	r16, 0x99	; 153
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	1f c0       	rjmp	.+62     	; 0x2572 <Lift+0x2aa>
    2534:	fe 01       	movw	r30, r28
    2536:	eb 59       	subi	r30, 0x9B	; 155
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 e7       	ldi	r24, 0x70	; 112
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	fe 01       	movw	r30, r28
    2544:	eb 59       	subi	r30, 0x9B	; 155
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <Lift+0x284>
    2550:	fe 01       	movw	r30, r28
    2552:	eb 59       	subi	r30, 0x9B	; 155
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	de 01       	movw	r26, r28
    255c:	a9 59       	subi	r26, 0x99	; 153
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e9 59       	subi	r30, 0x99	; 153
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	9c 93       	st	X, r25
    2570:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	fe 01       	movw	r30, r28
    2574:	e9 59       	subi	r30, 0x99	; 153
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	d1 f6       	brne	.-76     	; 0x2534 <Lift+0x26c>
    2580:	27 c0       	rjmp	.+78     	; 0x25d0 <Lift+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	8e 01       	movw	r16, r28
    2584:	09 59       	subi	r16, 0x99	; 153
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	e7 59       	subi	r30, 0x97	; 151
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	f8 01       	movw	r30, r16
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	de 01       	movw	r26, r28
    25a6:	ad 59       	subi	r26, 0x9D	; 157
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	e9 59       	subi	r30, 0x99	; 153
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	8d 93       	st	X+, r24
    25b6:	9c 93       	st	X, r25
    25b8:	fe 01       	movw	r30, r28
    25ba:	ed 59       	subi	r30, 0x9D	; 157
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <Lift+0x2fa>
    25c6:	fe 01       	movw	r30, r28
    25c8:	ed 59       	subi	r30, 0x9D	; 157
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
	  _delay_ms(30);
	  servo_3(i);
    25d0:	80 91 d1 03 	lds	r24, 0x03D1
    25d4:	90 91 d2 03 	lds	r25, 0x03D2
    25d8:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <servo_3>
    25dc:	fe 01       	movw	r30, r28
    25de:	e1 5a       	subi	r30, 0xA1	; 161
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a0 ef       	ldi	r26, 0xF0	; 240
    25e8:	b1 e4       	ldi	r27, 0x41	; 65
    25ea:	80 83       	st	Z, r24
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	a2 83       	std	Z+2, r26	; 0x02
    25f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	8e 01       	movw	r16, r28
    25f4:	05 5a       	subi	r16, 0xA5	; 165
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	fe 01       	movw	r30, r28
    25fa:	e1 5a       	subi	r30, 0xA1	; 161
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	60 81       	ld	r22, Z
    2600:	71 81       	ldd	r23, Z+1	; 0x01
    2602:	82 81       	ldd	r24, Z+2	; 0x02
    2604:	93 81       	ldd	r25, Z+3	; 0x03
    2606:	26 e6       	ldi	r18, 0x66	; 102
    2608:	36 e6       	ldi	r19, 0x66	; 102
    260a:	46 e6       	ldi	r20, 0x66	; 102
    260c:	55 e4       	ldi	r21, 0x45	; 69
    260e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	f8 01       	movw	r30, r16
    2618:	80 83       	st	Z, r24
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	a2 83       	std	Z+2, r26	; 0x02
    261e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2620:	fe 01       	movw	r30, r28
    2622:	e5 5a       	subi	r30, 0xA5	; 165
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	44 f4       	brge	.+16     	; 0x264e <Lift+0x386>
		__ticks = 1;
    263e:	fe 01       	movw	r30, r28
    2640:	e7 5a       	subi	r30, 0xA7	; 167
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	64 c0       	rjmp	.+200    	; 0x2716 <Lift+0x44e>
	else if (__tmp > 65535)
    264e:	fe 01       	movw	r30, r28
    2650:	e5 5a       	subi	r30, 0xA5	; 165
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2668:	18 16       	cp	r1, r24
    266a:	0c f0       	brlt	.+2      	; 0x266e <Lift+0x3a6>
    266c:	43 c0       	rjmp	.+134    	; 0x26f4 <Lift+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	fe 01       	movw	r30, r28
    2670:	e1 5a       	subi	r30, 0xA1	; 161
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	8e 01       	movw	r16, r28
    268e:	07 5a       	subi	r16, 0xA7	; 167
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	f8 01       	movw	r30, r16
    26a0:	91 83       	std	Z+1, r25	; 0x01
    26a2:	80 83       	st	Z, r24
    26a4:	1f c0       	rjmp	.+62     	; 0x26e4 <Lift+0x41c>
    26a6:	fe 01       	movw	r30, r28
    26a8:	e9 5a       	subi	r30, 0xA9	; 169
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 e7       	ldi	r24, 0x70	; 112
    26ae:	91 e0       	ldi	r25, 0x01	; 1
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	fe 01       	movw	r30, r28
    26b6:	e9 5a       	subi	r30, 0xA9	; 169
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <Lift+0x3f6>
    26c2:	fe 01       	movw	r30, r28
    26c4:	e9 5a       	subi	r30, 0xA9	; 169
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	de 01       	movw	r26, r28
    26ce:	a7 5a       	subi	r26, 0xA7	; 167
    26d0:	bf 4f       	sbci	r27, 0xFF	; 255
    26d2:	fe 01       	movw	r30, r28
    26d4:	e7 5a       	subi	r30, 0xA7	; 167
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	11 96       	adiw	r26, 0x01	; 1
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e4:	fe 01       	movw	r30, r28
    26e6:	e7 5a       	subi	r30, 0xA7	; 167
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	d1 f6       	brne	.-76     	; 0x26a6 <Lift+0x3de>
    26f2:	28 c0       	rjmp	.+80     	; 0x2744 <Lift+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	8e 01       	movw	r16, r28
    26f6:	07 5a       	subi	r16, 0xA7	; 167
    26f8:	1f 4f       	sbci	r17, 0xFF	; 255
    26fa:	fe 01       	movw	r30, r28
    26fc:	e5 5a       	subi	r30, 0xA5	; 165
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	f8 01       	movw	r30, r16
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
    2716:	de 01       	movw	r26, r28
    2718:	ab 5a       	subi	r26, 0xAB	; 171
    271a:	bf 4f       	sbci	r27, 0xFF	; 255
    271c:	fe 01       	movw	r30, r28
    271e:	e7 5a       	subi	r30, 0xA7	; 167
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	11 96       	adiw	r26, 0x01	; 1
    2728:	9c 93       	st	X, r25
    272a:	8e 93       	st	-X, r24
    272c:	fe 01       	movw	r30, r28
    272e:	eb 5a       	subi	r30, 0xAB	; 171
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <Lift+0x46e>
    273a:	fe 01       	movw	r30, r28
    273c:	eb 5a       	subi	r30, 0xAB	; 171
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
	//servo 1 grip
	//servo 2 upper
	//servo 3 lower
	
	//Open and come to pick 
	for (i = 0; i <120; i++)
    2744:	80 91 d1 03 	lds	r24, 0x03D1
    2748:	90 91 d2 03 	lds	r25, 0x03D2
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	90 93 d2 03 	sts	0x03D2, r25
    2752:	80 93 d1 03 	sts	0x03D1, r24
    2756:	80 91 d1 03 	lds	r24, 0x03D1
    275a:	90 91 d2 03 	lds	r25, 0x03D2
    275e:	88 37       	cpi	r24, 0x78	; 120
    2760:	91 05       	cpc	r25, r1
    2762:	0c f4       	brge	.+2      	; 0x2766 <Lift+0x49e>
    2764:	c3 cd       	rjmp	.-1146   	; 0x22ec <Lift+0x24>
	 /*for (i = 120; i >90; i--)
	 {
	  servo_2(i);
	  _delay_ms(30);
	 }*/
	 for (i = 120; i <150; i++)
    2766:	88 e7       	ldi	r24, 0x78	; 120
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	90 93 d2 03 	sts	0x03D2, r25
    276e:	80 93 d1 03 	sts	0x03D1, r24
    2772:	4d c1       	rjmp	.+666    	; 0x2a0e <Lift+0x746>
	 {
	  servo_1(i);
    2774:	80 91 d1 03 	lds	r24, 0x03D1
    2778:	90 91 d2 03 	lds	r25, 0x03D2
    277c:	0e 94 45 0c 	call	0x188a	; 0x188a <servo_1>
    2780:	fe 01       	movw	r30, r28
    2782:	ef 5a       	subi	r30, 0xAF	; 175
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	a0 ef       	ldi	r26, 0xF0	; 240
    278c:	b1 e4       	ldi	r27, 0x41	; 65
    278e:	80 83       	st	Z, r24
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	a2 83       	std	Z+2, r26	; 0x02
    2794:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2796:	8e 01       	movw	r16, r28
    2798:	03 5b       	subi	r16, 0xB3	; 179
    279a:	1f 4f       	sbci	r17, 0xFF	; 255
    279c:	fe 01       	movw	r30, r28
    279e:	ef 5a       	subi	r30, 0xAF	; 175
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	60 81       	ld	r22, Z
    27a4:	71 81       	ldd	r23, Z+1	; 0x01
    27a6:	82 81       	ldd	r24, Z+2	; 0x02
    27a8:	93 81       	ldd	r25, Z+3	; 0x03
    27aa:	26 e6       	ldi	r18, 0x66	; 102
    27ac:	36 e6       	ldi	r19, 0x66	; 102
    27ae:	46 e6       	ldi	r20, 0x66	; 102
    27b0:	55 e4       	ldi	r21, 0x45	; 69
    27b2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	f8 01       	movw	r30, r16
    27bc:	80 83       	st	Z, r24
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	a2 83       	std	Z+2, r26	; 0x02
    27c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27c4:	fe 01       	movw	r30, r28
    27c6:	e3 5b       	subi	r30, 0xB3	; 179
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	44 f4       	brge	.+16     	; 0x27f2 <Lift+0x52a>
		__ticks = 1;
    27e2:	fe 01       	movw	r30, r28
    27e4:	e5 5b       	subi	r30, 0xB5	; 181
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
    27f0:	64 c0       	rjmp	.+200    	; 0x28ba <Lift+0x5f2>
	else if (__tmp > 65535)
    27f2:	fe 01       	movw	r30, r28
    27f4:	e3 5b       	subi	r30, 0xB3	; 179
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	0c f0       	brlt	.+2      	; 0x2812 <Lift+0x54a>
    2810:	43 c0       	rjmp	.+134    	; 0x2898 <Lift+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2812:	fe 01       	movw	r30, r28
    2814:	ef 5a       	subi	r30, 0xAF	; 175
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e2       	ldi	r20, 0x20	; 32
    2826:	51 e4       	ldi	r21, 0x41	; 65
    2828:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8e 01       	movw	r16, r28
    2832:	05 5b       	subi	r16, 0xB5	; 181
    2834:	1f 4f       	sbci	r17, 0xFF	; 255
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	f8 01       	movw	r30, r16
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
    2848:	1f c0       	rjmp	.+62     	; 0x2888 <Lift+0x5c0>
    284a:	fe 01       	movw	r30, r28
    284c:	e7 5b       	subi	r30, 0xB7	; 183
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 e7       	ldi	r24, 0x70	; 112
    2852:	91 e0       	ldi	r25, 0x01	; 1
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    2858:	fe 01       	movw	r30, r28
    285a:	e7 5b       	subi	r30, 0xB7	; 183
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <Lift+0x59a>
    2866:	fe 01       	movw	r30, r28
    2868:	e7 5b       	subi	r30, 0xB7	; 183
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2870:	de 01       	movw	r26, r28
    2872:	a5 5b       	subi	r26, 0xB5	; 181
    2874:	bf 4f       	sbci	r27, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	e5 5b       	subi	r30, 0xB5	; 181
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	11 96       	adiw	r26, 0x01	; 1
    2884:	9c 93       	st	X, r25
    2886:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2888:	fe 01       	movw	r30, r28
    288a:	e5 5b       	subi	r30, 0xB5	; 181
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 81       	ld	r24, Z
    2890:	91 81       	ldd	r25, Z+1	; 0x01
    2892:	00 97       	sbiw	r24, 0x00	; 0
    2894:	d1 f6       	brne	.-76     	; 0x284a <Lift+0x582>
    2896:	27 c0       	rjmp	.+78     	; 0x28e6 <Lift+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2898:	8e 01       	movw	r16, r28
    289a:	05 5b       	subi	r16, 0xB5	; 181
    289c:	1f 4f       	sbci	r17, 0xFF	; 255
    289e:	fe 01       	movw	r30, r28
    28a0:	e3 5b       	subi	r30, 0xB3	; 179
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	60 81       	ld	r22, Z
    28a6:	71 81       	ldd	r23, Z+1	; 0x01
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	93 81       	ldd	r25, Z+3	; 0x03
    28ac:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	f8 01       	movw	r30, r16
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
    28ba:	de 01       	movw	r26, r28
    28bc:	a9 5b       	subi	r26, 0xB9	; 185
    28be:	bf 4f       	sbci	r27, 0xFF	; 255
    28c0:	fe 01       	movw	r30, r28
    28c2:	e5 5b       	subi	r30, 0xB5	; 181
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	8d 93       	st	X+, r24
    28cc:	9c 93       	st	X, r25
    28ce:	fe 01       	movw	r30, r28
    28d0:	e9 5b       	subi	r30, 0xB9	; 185
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <Lift+0x610>
    28dc:	fe 01       	movw	r30, r28
    28de:	e9 5b       	subi	r30, 0xB9	; 185
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	80 83       	st	Z, r24
	  _delay_ms(30);
	  //servo_2(i);
	  //_delay_ms(30);
	  servo_3(i);
    28e6:	80 91 d1 03 	lds	r24, 0x03D1
    28ea:	90 91 d2 03 	lds	r25, 0x03D2
    28ee:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <servo_3>
    28f2:	fe 01       	movw	r30, r28
    28f4:	ed 5b       	subi	r30, 0xBD	; 189
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 ef       	ldi	r26, 0xF0	; 240
    28fe:	b1 e4       	ldi	r27, 0x41	; 65
    2900:	80 83       	st	Z, r24
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	a2 83       	std	Z+2, r26	; 0x02
    2906:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	8e 01       	movw	r16, r28
    290a:	01 5c       	subi	r16, 0xC1	; 193
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	fe 01       	movw	r30, r28
    2910:	ed 5b       	subi	r30, 0xBD	; 189
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	26 e6       	ldi	r18, 0x66	; 102
    291e:	36 e6       	ldi	r19, 0x66	; 102
    2920:	46 e6       	ldi	r20, 0x66	; 102
    2922:	55 e4       	ldi	r21, 0x45	; 69
    2924:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	f8 01       	movw	r30, r16
    292e:	80 83       	st	Z, r24
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	a2 83       	std	Z+2, r26	; 0x02
    2934:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2936:	fe 01       	movw	r30, r28
    2938:	ff 96       	adiw	r30, 0x3f	; 63
    293a:	60 81       	ld	r22, Z
    293c:	71 81       	ldd	r23, Z+1	; 0x01
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	93 81       	ldd	r25, Z+3	; 0x03
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e8       	ldi	r20, 0x80	; 128
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    294e:	88 23       	and	r24, r24
    2950:	2c f4       	brge	.+10     	; 0x295c <Lift+0x694>
		__ticks = 1;
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9e af       	std	Y+62, r25	; 0x3e
    2958:	8d af       	std	Y+61, r24	; 0x3d
    295a:	46 c0       	rjmp	.+140    	; 0x29e8 <Lift+0x720>
	else if (__tmp > 65535)
    295c:	fe 01       	movw	r30, r28
    295e:	ff 96       	adiw	r30, 0x3f	; 63
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	64 f5       	brge	.+88     	; 0x29d0 <Lift+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2978:	fe 01       	movw	r30, r28
    297a:	ed 5b       	subi	r30, 0xBD	; 189
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e af       	std	Y+62, r25	; 0x3e
    29a4:	8d af       	std	Y+61, r24	; 0x3d
    29a6:	0f c0       	rjmp	.+30     	; 0x29c6 <Lift+0x6fe>
    29a8:	80 e7       	ldi	r24, 0x70	; 112
    29aa:	91 e0       	ldi	r25, 0x01	; 1
    29ac:	9c af       	std	Y+60, r25	; 0x3c
    29ae:	8b af       	std	Y+59, r24	; 0x3b
    29b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    29b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <Lift+0x6ec>
    29b8:	9c af       	std	Y+60, r25	; 0x3c
    29ba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    29be:	9e ad       	ldd	r25, Y+62	; 0x3e
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	9e af       	std	Y+62, r25	; 0x3e
    29c4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	69 f7       	brne	.-38     	; 0x29a8 <Lift+0x6e0>
    29ce:	16 c0       	rjmp	.+44     	; 0x29fc <Lift+0x734>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d0:	fe 01       	movw	r30, r28
    29d2:	ff 96       	adiw	r30, 0x3f	; 63
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9e af       	std	Y+62, r25	; 0x3e
    29e6:	8d af       	std	Y+61, r24	; 0x3d
    29e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    29ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ec:	9a af       	std	Y+58, r25	; 0x3a
    29ee:	89 af       	std	Y+57, r24	; 0x39
    29f0:	89 ad       	ldd	r24, Y+57	; 0x39
    29f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <Lift+0x72c>
    29f8:	9a af       	std	Y+58, r25	; 0x3a
    29fa:	89 af       	std	Y+57, r24	; 0x39
	 /*for (i = 120; i >90; i--)
	 {
	  servo_2(i);
	  _delay_ms(30);
	 }*/
	 for (i = 120; i <150; i++)
    29fc:	80 91 d1 03 	lds	r24, 0x03D1
    2a00:	90 91 d2 03 	lds	r25, 0x03D2
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	90 93 d2 03 	sts	0x03D2, r25
    2a0a:	80 93 d1 03 	sts	0x03D1, r24
    2a0e:	80 91 d1 03 	lds	r24, 0x03D1
    2a12:	90 91 d2 03 	lds	r25, 0x03D2
    2a16:	86 39       	cpi	r24, 0x96	; 150
    2a18:	91 05       	cpc	r25, r1
    2a1a:	0c f4       	brge	.+2      	; 0x2a1e <Lift+0x756>
    2a1c:	ab ce       	rjmp	.-682    	; 0x2774 <Lift+0x4ac>
	  _delay_ms(30);
	 }
	
	//Grab
	
	for (i = 150; i >30; i--)
    2a1e:	86 e9       	ldi	r24, 0x96	; 150
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	90 93 d2 03 	sts	0x03D2, r25
    2a26:	80 93 d1 03 	sts	0x03D1, r24
    2a2a:	81 c0       	rjmp	.+258    	; 0x2b2e <Lift+0x866>
	 {
	  servo_1(i);
    2a2c:	80 91 d1 03 	lds	r24, 0x03D1
    2a30:	90 91 d2 03 	lds	r25, 0x03D2
    2a34:	0e 94 45 0c 	call	0x188a	; 0x188a <servo_1>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 ef       	ldi	r26, 0xF0	; 240
    2a3e:	b1 e4       	ldi	r27, 0x41	; 65
    2a40:	8d ab       	std	Y+53, r24	; 0x35
    2a42:	9e ab       	std	Y+54, r25	; 0x36
    2a44:	af ab       	std	Y+55, r26	; 0x37
    2a46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a48:	6d a9       	ldd	r22, Y+53	; 0x35
    2a4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a50:	26 e6       	ldi	r18, 0x66	; 102
    2a52:	36 e6       	ldi	r19, 0x66	; 102
    2a54:	46 e6       	ldi	r20, 0x66	; 102
    2a56:	55 e4       	ldi	r21, 0x45	; 69
    2a58:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	89 ab       	std	Y+49, r24	; 0x31
    2a62:	9a ab       	std	Y+50, r25	; 0x32
    2a64:	ab ab       	std	Y+51, r26	; 0x33
    2a66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a68:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e8       	ldi	r20, 0x80	; 128
    2a76:	5f e3       	ldi	r21, 0x3F	; 63
    2a78:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	2c f4       	brge	.+10     	; 0x2a8a <Lift+0x7c2>
		__ticks = 1;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	98 ab       	std	Y+48, r25	; 0x30
    2a86:	8f a7       	std	Y+47, r24	; 0x2f
    2a88:	3f c0       	rjmp	.+126    	; 0x2b08 <Lift+0x840>
	else if (__tmp > 65535)
    2a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a90:	9c a9       	ldd	r25, Y+52	; 0x34
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	57 e4       	ldi	r21, 0x47	; 71
    2a9a:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2a9e:	18 16       	cp	r1, r24
    2aa0:	4c f5       	brge	.+82     	; 0x2af4 <Lift+0x82c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa2:	6d a9       	ldd	r22, Y+53	; 0x35
    2aa4:	7e a9       	ldd	r23, Y+54	; 0x36
    2aa6:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa8:	98 ad       	ldd	r25, Y+56	; 0x38
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e2       	ldi	r20, 0x20	; 32
    2ab0:	51 e4       	ldi	r21, 0x41	; 65
    2ab2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	98 ab       	std	Y+48, r25	; 0x30
    2ac8:	8f a7       	std	Y+47, r24	; 0x2f
    2aca:	0f c0       	rjmp	.+30     	; 0x2aea <Lift+0x822>
    2acc:	80 e7       	ldi	r24, 0x70	; 112
    2ace:	91 e0       	ldi	r25, 0x01	; 1
    2ad0:	9e a7       	std	Y+46, r25	; 0x2e
    2ad2:	8d a7       	std	Y+45, r24	; 0x2d
    2ad4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ad6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	f1 f7       	brne	.-4      	; 0x2ad8 <Lift+0x810>
    2adc:	9e a7       	std	Y+46, r25	; 0x2e
    2ade:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	98 ab       	std	Y+48, r25	; 0x30
    2ae8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aec:	98 a9       	ldd	r25, Y+48	; 0x30
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	69 f7       	brne	.-38     	; 0x2acc <Lift+0x804>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <Lift+0x854>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af4:	69 a9       	ldd	r22, Y+49	; 0x31
    2af6:	7a a9       	ldd	r23, Y+50	; 0x32
    2af8:	8b a9       	ldd	r24, Y+51	; 0x33
    2afa:	9c a9       	ldd	r25, Y+52	; 0x34
    2afc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	98 ab       	std	Y+48, r25	; 0x30
    2b06:	8f a7       	std	Y+47, r24	; 0x2f
    2b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b0c:	9c a7       	std	Y+44, r25	; 0x2c
    2b0e:	8b a7       	std	Y+43, r24	; 0x2b
    2b10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	f1 f7       	brne	.-4      	; 0x2b14 <Lift+0x84c>
    2b18:	9c a7       	std	Y+44, r25	; 0x2c
    2b1a:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms(30);
	 }
	
	//Grab
	
	for (i = 150; i >30; i--)
    2b1c:	80 91 d1 03 	lds	r24, 0x03D1
    2b20:	90 91 d2 03 	lds	r25, 0x03D2
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	90 93 d2 03 	sts	0x03D2, r25
    2b2a:	80 93 d1 03 	sts	0x03D1, r24
    2b2e:	80 91 d1 03 	lds	r24, 0x03D1
    2b32:	90 91 d2 03 	lds	r25, 0x03D2
    2b36:	8f 31       	cpi	r24, 0x1F	; 31
    2b38:	91 05       	cpc	r25, r1
    2b3a:	0c f0       	brlt	.+2      	; 0x2b3e <Lift+0x876>
    2b3c:	77 cf       	rjmp	.-274    	; 0x2a2c <Lift+0x764>
	//  servo_3(i);
	//  _delay_ms(30);
	 }
	
	//pick
	for (i = 150; i >120; i--)
    2b3e:	86 e9       	ldi	r24, 0x96	; 150
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	90 93 d2 03 	sts	0x03D2, r25
    2b46:	80 93 d1 03 	sts	0x03D1, r24
    2b4a:	81 c0       	rjmp	.+258    	; 0x2c4e <Lift+0x986>
	 {
	//  servo_1(i);
	//  _delay_ms(30);
	  servo_3(i);
    2b4c:	80 91 d1 03 	lds	r24, 0x03D1
    2b50:	90 91 d2 03 	lds	r25, 0x03D2
    2b54:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <servo_3>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a0 ef       	ldi	r26, 0xF0	; 240
    2b5e:	b1 e4       	ldi	r27, 0x41	; 65
    2b60:	8f a3       	std	Y+39, r24	; 0x27
    2b62:	98 a7       	std	Y+40, r25	; 0x28
    2b64:	a9 a7       	std	Y+41, r26	; 0x29
    2b66:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	6f a1       	ldd	r22, Y+39	; 0x27
    2b6a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b6c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b70:	26 e6       	ldi	r18, 0x66	; 102
    2b72:	36 e6       	ldi	r19, 0x66	; 102
    2b74:	46 e6       	ldi	r20, 0x66	; 102
    2b76:	55 e4       	ldi	r21, 0x45	; 69
    2b78:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	8b a3       	std	Y+35, r24	; 0x23
    2b82:	9c a3       	std	Y+36, r25	; 0x24
    2b84:	ad a3       	std	Y+37, r26	; 0x25
    2b86:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b88:	6b a1       	ldd	r22, Y+35	; 0x23
    2b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	2c f4       	brge	.+10     	; 0x2baa <Lift+0x8e2>
		__ticks = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9a a3       	std	Y+34, r25	; 0x22
    2ba6:	89 a3       	std	Y+33, r24	; 0x21
    2ba8:	3f c0       	rjmp	.+126    	; 0x2c28 <Lift+0x960>
	else if (__tmp > 65535)
    2baa:	6b a1       	ldd	r22, Y+35	; 0x23
    2bac:	7c a1       	ldd	r23, Y+36	; 0x24
    2bae:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	4c f5       	brge	.+82     	; 0x2c14 <Lift+0x94c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc4:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc6:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	9a a3       	std	Y+34, r25	; 0x22
    2be8:	89 a3       	std	Y+33, r24	; 0x21
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <Lift+0x942>
    2bec:	80 e7       	ldi	r24, 0x70	; 112
    2bee:	91 e0       	ldi	r25, 0x01	; 1
    2bf0:	98 a3       	std	Y+32, r25	; 0x20
    2bf2:	8f 8f       	std	Y+31, r24	; 0x1f
    2bf4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bf6:	98 a1       	ldd	r25, Y+32	; 0x20
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <Lift+0x930>
    2bfc:	98 a3       	std	Y+32, r25	; 0x20
    2bfe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c00:	89 a1       	ldd	r24, Y+33	; 0x21
    2c02:	9a a1       	ldd	r25, Y+34	; 0x22
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	9a a3       	std	Y+34, r25	; 0x22
    2c08:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	69 f7       	brne	.-38     	; 0x2bec <Lift+0x924>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <Lift+0x974>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	6b a1       	ldd	r22, Y+35	; 0x23
    2c16:	7c a1       	ldd	r23, Y+36	; 0x24
    2c18:	8d a1       	ldd	r24, Y+37	; 0x25
    2c1a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c1c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	9a a3       	std	Y+34, r25	; 0x22
    2c26:	89 a3       	std	Y+33, r24	; 0x21
    2c28:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c2e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <Lift+0x96c>
    2c38:	9e 8f       	std	Y+30, r25	; 0x1e
    2c3a:	8d 8f       	std	Y+29, r24	; 0x1d
	//  servo_3(i);
	//  _delay_ms(30);
	 }
	
	//pick
	for (i = 150; i >120; i--)
    2c3c:	80 91 d1 03 	lds	r24, 0x03D1
    2c40:	90 91 d2 03 	lds	r25, 0x03D2
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	90 93 d2 03 	sts	0x03D2, r25
    2c4a:	80 93 d1 03 	sts	0x03D1, r24
    2c4e:	80 91 d1 03 	lds	r24, 0x03D1
    2c52:	90 91 d2 03 	lds	r25, 0x03D2
    2c56:	89 37       	cpi	r24, 0x79	; 121
    2c58:	91 05       	cpc	r25, r1
    2c5a:	0c f0       	brlt	.+2      	; 0x2c5e <Lift+0x996>
    2c5c:	77 cf       	rjmp	.-274    	; 0x2b4c <Lift+0x884>
	//  servo_1(i);
	//  _delay_ms(30);
	  servo_3(i);
	  _delay_ms(30);
	 }
	for (i = 120; i >0; i--)
    2c5e:	88 e7       	ldi	r24, 0x78	; 120
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	90 93 d2 03 	sts	0x03D2, r25
    2c66:	80 93 d1 03 	sts	0x03D1, r24
    2c6a:	f9 c0       	rjmp	.+498    	; 0x2e5e <Lift+0xb96>
	 {
	//  servo_1(i);
	//  _delay_ms(30);
	  servo_2(i);
    2c6c:	80 91 d1 03 	lds	r24, 0x03D1
    2c70:	90 91 d2 03 	lds	r25, 0x03D2
    2c74:	0e 94 93 0c 	call	0x1926	; 0x1926 <servo_2>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 ef       	ldi	r26, 0xF0	; 240
    2c7e:	b1 e4       	ldi	r27, 0x41	; 65
    2c80:	89 8f       	std	Y+25, r24	; 0x19
    2c82:	9a 8f       	std	Y+26, r25	; 0x1a
    2c84:	ab 8f       	std	Y+27, r26	; 0x1b
    2c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	26 e6       	ldi	r18, 0x66	; 102
    2c92:	36 e6       	ldi	r19, 0x66	; 102
    2c94:	46 e6       	ldi	r20, 0x66	; 102
    2c96:	55 e4       	ldi	r21, 0x45	; 69
    2c98:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8d 8b       	std	Y+21, r24	; 0x15
    2ca2:	9e 8b       	std	Y+22, r25	; 0x16
    2ca4:	af 8b       	std	Y+23, r26	; 0x17
    2ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    2caa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cac:	8f 89       	ldd	r24, Y+23	; 0x17
    2cae:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <Lift+0xa02>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9c 8b       	std	Y+20, r25	; 0x14
    2cc6:	8b 8b       	std	Y+19, r24	; 0x13
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <Lift+0xa80>
	else if (__tmp > 65535)
    2cca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cce:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <Lift+0xa6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9c 8b       	std	Y+20, r25	; 0x14
    2d08:	8b 8b       	std	Y+19, r24	; 0x13
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <Lift+0xa62>
    2d0c:	80 e7       	ldi	r24, 0x70	; 112
    2d0e:	91 e0       	ldi	r25, 0x01	; 1
    2d10:	9a 8b       	std	Y+18, r25	; 0x12
    2d12:	89 8b       	std	Y+17, r24	; 0x11
    2d14:	89 89       	ldd	r24, Y+17	; 0x11
    2d16:	9a 89       	ldd	r25, Y+18	; 0x12
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <Lift+0xa50>
    2d1c:	9a 8b       	std	Y+18, r25	; 0x12
    2d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8b 89       	ldd	r24, Y+19	; 0x13
    2d22:	9c 89       	ldd	r25, Y+20	; 0x14
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <Lift+0xa44>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <Lift+0xa94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	6d 89       	ldd	r22, Y+21	; 0x15
    2d36:	7e 89       	ldd	r23, Y+22	; 0x16
    2d38:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9c 8b       	std	Y+20, r25	; 0x14
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	98 8b       	std	Y+16, r25	; 0x10
    2d4e:	8f 87       	std	Y+15, r24	; 0x0f
    2d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d52:	98 89       	ldd	r25, Y+16	; 0x10
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <Lift+0xa8c>
    2d58:	98 8b       	std	Y+16, r25	; 0x10
    2d5a:	8f 87       	std	Y+15, r24	; 0x0f
	  _delay_ms(30);
	  servo_3(i);
    2d5c:	80 91 d1 03 	lds	r24, 0x03D1
    2d60:	90 91 d2 03 	lds	r25, 0x03D2
    2d64:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <servo_3>
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a0 ef       	ldi	r26, 0xF0	; 240
    2d6e:	b1 e4       	ldi	r27, 0x41	; 65
    2d70:	8b 87       	std	Y+11, r24	; 0x0b
    2d72:	9c 87       	std	Y+12, r25	; 0x0c
    2d74:	ad 87       	std	Y+13, r26	; 0x0d
    2d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d80:	26 e6       	ldi	r18, 0x66	; 102
    2d82:	36 e6       	ldi	r19, 0x66	; 102
    2d84:	46 e6       	ldi	r20, 0x66	; 102
    2d86:	55 e4       	ldi	r21, 0x45	; 69
    2d88:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8f 83       	std	Y+7, r24	; 0x07
    2d92:	98 87       	std	Y+8, r25	; 0x08
    2d94:	a9 87       	std	Y+9, r26	; 0x09
    2d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d98:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9a:	78 85       	ldd	r23, Y+8	; 0x08
    2d9c:	89 85       	ldd	r24, Y+9	; 0x09
    2d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <Lift+0xaf2>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <Lift+0xb70>
	else if (__tmp > 65535)
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	3f ef       	ldi	r19, 0xFF	; 255
    2dc6:	4f e7       	ldi	r20, 0x7F	; 127
    2dc8:	57 e4       	ldi	r21, 0x47	; 71
    2dca:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <Lift+0xb5c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e2       	ldi	r20, 0x20	; 32
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <Lift+0xb52>
    2dfc:	80 e7       	ldi	r24, 0x70	; 112
    2dfe:	91 e0       	ldi	r25, 0x01	; 1
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <Lift+0xb40>
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <Lift+0xb34>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <Lift+0xb84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6f 81       	ldd	r22, Y+7	; 0x07
    2e26:	78 85       	ldd	r23, Y+8	; 0x08
    2e28:	89 85       	ldd	r24, Y+9	; 0x09
    2e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9e 83       	std	Y+6, r25	; 0x06
    2e36:	8d 83       	std	Y+5, r24	; 0x05
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <Lift+0xb7c>
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
	//  servo_1(i);
	//  _delay_ms(30);
	  servo_3(i);
	  _delay_ms(30);
	 }
	for (i = 120; i >0; i--)
    2e4c:	80 91 d1 03 	lds	r24, 0x03D1
    2e50:	90 91 d2 03 	lds	r25, 0x03D2
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	90 93 d2 03 	sts	0x03D2, r25
    2e5a:	80 93 d1 03 	sts	0x03D1, r24
    2e5e:	80 91 d1 03 	lds	r24, 0x03D1
    2e62:	90 91 d2 03 	lds	r25, 0x03D2
    2e66:	18 16       	cp	r1, r24
    2e68:	19 06       	cpc	r1, r25
    2e6a:	0c f4       	brge	.+2      	; 0x2e6e <Lift+0xba6>
    2e6c:	ff ce       	rjmp	.-514    	; 0x2c6c <Lift+0x9a4>
	 }


	// _delay_ms(2000);
	// 
}
    2e6e:	c2 58       	subi	r28, 0x82	; 130
    2e70:	df 4f       	sbci	r29, 0xFF	; 255
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	1f 91       	pop	r17
    2e82:	0f 91       	pop	r16
    2e84:	08 95       	ret

00002e86 <Drop>:

void Drop (){
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
	servo_1_free(); 
    2e8e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <servo_1_free>
}
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <__vector_25>:


/*This function helps in serial communication. This helped in sending commands to firebird*/

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    2e98:	1f 92       	push	r1
    2e9a:	0f 92       	push	r0
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	0f 92       	push	r0
    2ea0:	00 90 5b 00 	lds	r0, 0x005B
    2ea4:	0f 92       	push	r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	2f 93       	push	r18
    2eae:	3f 93       	push	r19
    2eb0:	4f 93       	push	r20
    2eb2:	5f 93       	push	r21
    2eb4:	6f 93       	push	r22
    2eb6:	7f 93       	push	r23
    2eb8:	8f 93       	push	r24
    2eba:	9f 93       	push	r25
    2ebc:	af 93       	push	r26
    2ebe:	bf 93       	push	r27
    2ec0:	ef 93       	push	r30
    2ec2:	ff 93       	push	r31
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	c6 54       	subi	r28, 0x46	; 70
    2ece:	d0 40       	sbci	r29, 0x00	; 0
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	cd bf       	out	0x3d, r28	; 61
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
    2ed4:	e6 ec       	ldi	r30, 0xC6	; 198
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	80 93 d5 03 	sts	0x03D5, r24

	UDR0 = data; 				//echo data back to PC
    2ede:	e6 ec       	ldi	r30, 0xC6	; 198
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 91 d5 03 	lds	r24, 0x03D5
    2ee6:	80 83       	st	Z, r24
	cli(); //disable all interrupts  ****
    2ee8:	f8 94       	cli
		lcd_cursor(1,1);
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	61 e0       	ldi	r22, 0x01	; 1
    2eee:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
		if(data == 0x68) //ASCII value of h (happy)
    2ef2:	80 91 d5 03 	lds	r24, 0x03D5
    2ef6:	88 36       	cpi	r24, 0x68	; 104
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <__vector_25+0x64>
    2efa:	9b c0       	rjmp	.+310    	; 0x3032 <__vector_25+0x19a>
		 {
		lcd_string("     HAPPY     ");
    2efc:	80 e6       	ldi	r24, 0x60	; 96
    2efe:	92 e0       	ldi	r25, 0x02	; 2
    2f00:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
		Move(1,1);
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	61 e0       	ldi	r22, 0x01	; 1
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
		Lift();
    2f10:	0e 94 64 11 	call	0x22c8	; 0x22c8 <Lift>
    2f14:	fe 01       	movw	r30, r28
    2f16:	ed 5b       	subi	r30, 0xBD	; 189
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	aa e7       	ldi	r26, 0x7A	; 122
    2f20:	b4 e4       	ldi	r27, 0x44	; 68
    2f22:	80 83       	st	Z, r24
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	a2 83       	std	Z+2, r26	; 0x02
    2f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2a:	8e 01       	movw	r16, r28
    2f2c:	01 5c       	subi	r16, 0xC1	; 193
    2f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f30:	fe 01       	movw	r30, r28
    2f32:	ed 5b       	subi	r30, 0xBD	; 189
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	60 81       	ld	r22, Z
    2f38:	71 81       	ldd	r23, Z+1	; 0x01
    2f3a:	82 81       	ldd	r24, Z+2	; 0x02
    2f3c:	93 81       	ldd	r25, Z+3	; 0x03
    2f3e:	26 e6       	ldi	r18, 0x66	; 102
    2f40:	36 e6       	ldi	r19, 0x66	; 102
    2f42:	46 e6       	ldi	r20, 0x66	; 102
    2f44:	55 e4       	ldi	r21, 0x45	; 69
    2f46:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	f8 01       	movw	r30, r16
    2f50:	80 83       	st	Z, r24
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	a2 83       	std	Z+2, r26	; 0x02
    2f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ff 96       	adiw	r30, 0x3f	; 63
    2f5c:	60 81       	ld	r22, Z
    2f5e:	71 81       	ldd	r23, Z+1	; 0x01
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	93 81       	ldd	r25, Z+3	; 0x03
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e8       	ldi	r20, 0x80	; 128
    2f6a:	5f e3       	ldi	r21, 0x3F	; 63
    2f6c:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    2f70:	88 23       	and	r24, r24
    2f72:	2c f4       	brge	.+10     	; 0x2f7e <__vector_25+0xe6>
		__ticks = 1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	9e af       	std	Y+62, r25	; 0x3e
    2f7a:	8d af       	std	Y+61, r24	; 0x3d
    2f7c:	46 c0       	rjmp	.+140    	; 0x300a <__vector_25+0x172>
	else if (__tmp > 65535)
    2f7e:	fe 01       	movw	r30, r28
    2f80:	ff 96       	adiw	r30, 0x3f	; 63
    2f82:	60 81       	ld	r22, Z
    2f84:	71 81       	ldd	r23, Z+1	; 0x01
    2f86:	82 81       	ldd	r24, Z+2	; 0x02
    2f88:	93 81       	ldd	r25, Z+3	; 0x03
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	3f ef       	ldi	r19, 0xFF	; 255
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	57 e4       	ldi	r21, 0x47	; 71
    2f92:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	64 f5       	brge	.+88     	; 0x2ff2 <__vector_25+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	ed 5b       	subi	r30, 0xBD	; 189
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	60 81       	ld	r22, Z
    2fa2:	71 81       	ldd	r23, Z+1	; 0x01
    2fa4:	82 81       	ldd	r24, Z+2	; 0x02
    2fa6:	93 81       	ldd	r25, Z+3	; 0x03
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	40 e2       	ldi	r20, 0x20	; 32
    2fae:	51 e4       	ldi	r21, 0x41	; 65
    2fb0:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	9e af       	std	Y+62, r25	; 0x3e
    2fc6:	8d af       	std	Y+61, r24	; 0x3d
    2fc8:	0f c0       	rjmp	.+30     	; 0x2fe8 <__vector_25+0x150>
    2fca:	80 e7       	ldi	r24, 0x70	; 112
    2fcc:	91 e0       	ldi	r25, 0x01	; 1
    2fce:	9c af       	std	Y+60, r25	; 0x3c
    2fd0:	8b af       	std	Y+59, r24	; 0x3b
    2fd2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fd4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <__vector_25+0x13e>
    2fda:	9c af       	std	Y+60, r25	; 0x3c
    2fdc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fde:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fe0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	9e af       	std	Y+62, r25	; 0x3e
    2fe6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fea:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	69 f7       	brne	.-38     	; 0x2fca <__vector_25+0x132>
    2ff0:	16 c0       	rjmp	.+44     	; 0x301e <__vector_25+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff2:	fe 01       	movw	r30, r28
    2ff4:	ff 96       	adiw	r30, 0x3f	; 63
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	93 81       	ldd	r25, Z+3	; 0x03
    2ffe:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9e af       	std	Y+62, r25	; 0x3e
    3008:	8d af       	std	Y+61, r24	; 0x3d
    300a:	8d ad       	ldd	r24, Y+61	; 0x3d
    300c:	9e ad       	ldd	r25, Y+62	; 0x3e
    300e:	9a af       	std	Y+58, r25	; 0x3a
    3010:	89 af       	std	Y+57, r24	; 0x39
    3012:	89 ad       	ldd	r24, Y+57	; 0x39
    3014:	9a ad       	ldd	r25, Y+58	; 0x3a
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <__vector_25+0x17e>
    301a:	9a af       	std	Y+58, r25	; 0x3a
    301c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		Move_Right();
    301e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <Move_Right>
		Move(1,1);
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	61 e0       	ldi	r22, 0x01	; 1
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
		Drop();
    302e:	0e 94 43 17 	call	0x2e86	; 0x2e86 <Drop>
		//Lift();  ****
		 
			
		 }
		 if(data == 0x73) //ASCII value of s (sad)
    3032:	80 91 d5 03 	lds	r24, 0x03D5
    3036:	83 37       	cpi	r24, 0x73	; 115
    3038:	09 f0       	breq	.+2      	; 0x303c <__vector_25+0x1a4>
    303a:	88 c0       	rjmp	.+272    	; 0x314c <__vector_25+0x2b4>
		 {
		  	lcd_string("      SAD      ");
    303c:	80 e7       	ldi	r24, 0x70	; 112
    303e:	92 e0       	ldi	r25, 0x02	; 2
    3040:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
			Move(2,2);
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	62 e0       	ldi	r22, 0x02	; 2
    304a:	70 e0       	ldi	r23, 0x00	; 0
    304c:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
			Lift();
    3050:	0e 94 64 11 	call	0x22c8	; 0x22c8 <Lift>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	aa e7       	ldi	r26, 0x7A	; 122
    305a:	b4 e4       	ldi	r27, 0x44	; 68
    305c:	8d ab       	std	Y+53, r24	; 0x35
    305e:	9e ab       	std	Y+54, r25	; 0x36
    3060:	af ab       	std	Y+55, r26	; 0x37
    3062:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3064:	6d a9       	ldd	r22, Y+53	; 0x35
    3066:	7e a9       	ldd	r23, Y+54	; 0x36
    3068:	8f a9       	ldd	r24, Y+55	; 0x37
    306a:	98 ad       	ldd	r25, Y+56	; 0x38
    306c:	26 e6       	ldi	r18, 0x66	; 102
    306e:	36 e6       	ldi	r19, 0x66	; 102
    3070:	46 e6       	ldi	r20, 0x66	; 102
    3072:	55 e4       	ldi	r21, 0x45	; 69
    3074:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	89 ab       	std	Y+49, r24	; 0x31
    307e:	9a ab       	std	Y+50, r25	; 0x32
    3080:	ab ab       	std	Y+51, r26	; 0x33
    3082:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3084:	69 a9       	ldd	r22, Y+49	; 0x31
    3086:	7a a9       	ldd	r23, Y+50	; 0x32
    3088:	8b a9       	ldd	r24, Y+51	; 0x33
    308a:	9c a9       	ldd	r25, Y+52	; 0x34
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e8       	ldi	r20, 0x80	; 128
    3092:	5f e3       	ldi	r21, 0x3F	; 63
    3094:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    3098:	88 23       	and	r24, r24
    309a:	2c f4       	brge	.+10     	; 0x30a6 <__vector_25+0x20e>
		__ticks = 1;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	98 ab       	std	Y+48, r25	; 0x30
    30a2:	8f a7       	std	Y+47, r24	; 0x2f
    30a4:	3f c0       	rjmp	.+126    	; 0x3124 <__vector_25+0x28c>
	else if (__tmp > 65535)
    30a6:	69 a9       	ldd	r22, Y+49	; 0x31
    30a8:	7a a9       	ldd	r23, Y+50	; 0x32
    30aa:	8b a9       	ldd	r24, Y+51	; 0x33
    30ac:	9c a9       	ldd	r25, Y+52	; 0x34
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	3f ef       	ldi	r19, 0xFF	; 255
    30b2:	4f e7       	ldi	r20, 0x7F	; 127
    30b4:	57 e4       	ldi	r21, 0x47	; 71
    30b6:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    30ba:	18 16       	cp	r1, r24
    30bc:	4c f5       	brge	.+82     	; 0x3110 <__vector_25+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30be:	6d a9       	ldd	r22, Y+53	; 0x35
    30c0:	7e a9       	ldd	r23, Y+54	; 0x36
    30c2:	8f a9       	ldd	r24, Y+55	; 0x37
    30c4:	98 ad       	ldd	r25, Y+56	; 0x38
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e2       	ldi	r20, 0x20	; 32
    30cc:	51 e4       	ldi	r21, 0x41	; 65
    30ce:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	bc 01       	movw	r22, r24
    30d8:	cd 01       	movw	r24, r26
    30da:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	98 ab       	std	Y+48, r25	; 0x30
    30e4:	8f a7       	std	Y+47, r24	; 0x2f
    30e6:	0f c0       	rjmp	.+30     	; 0x3106 <__vector_25+0x26e>
    30e8:	80 e7       	ldi	r24, 0x70	; 112
    30ea:	91 e0       	ldi	r25, 0x01	; 1
    30ec:	9e a7       	std	Y+46, r25	; 0x2e
    30ee:	8d a7       	std	Y+45, r24	; 0x2d
    30f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    30f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <__vector_25+0x25c>
    30f8:	9e a7       	std	Y+46, r25	; 0x2e
    30fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	98 ab       	std	Y+48, r25	; 0x30
    3104:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3106:	8f a5       	ldd	r24, Y+47	; 0x2f
    3108:	98 a9       	ldd	r25, Y+48	; 0x30
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	69 f7       	brne	.-38     	; 0x30e8 <__vector_25+0x250>
    310e:	14 c0       	rjmp	.+40     	; 0x3138 <__vector_25+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3110:	69 a9       	ldd	r22, Y+49	; 0x31
    3112:	7a a9       	ldd	r23, Y+50	; 0x32
    3114:	8b a9       	ldd	r24, Y+51	; 0x33
    3116:	9c a9       	ldd	r25, Y+52	; 0x34
    3118:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	98 ab       	std	Y+48, r25	; 0x30
    3122:	8f a7       	std	Y+47, r24	; 0x2f
    3124:	8f a5       	ldd	r24, Y+47	; 0x2f
    3126:	98 a9       	ldd	r25, Y+48	; 0x30
    3128:	9c a7       	std	Y+44, r25	; 0x2c
    312a:	8b a7       	std	Y+43, r24	; 0x2b
    312c:	8b a5       	ldd	r24, Y+43	; 0x2b
    312e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <__vector_25+0x298>
    3134:	9c a7       	std	Y+44, r25	; 0x2c
    3136:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			Move_Right();
    3138:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <Move_Right>
			Move(2,2);
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	62 e0       	ldi	r22, 0x02	; 2
    3142:	70 e0       	ldi	r23, 0x00	; 0
    3144:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
			Drop();
    3148:	0e 94 43 17 	call	0x2e86	; 0x2e86 <Drop>
			
		 }
		 if(data == 0x61) //ASCII value of a (anger)
    314c:	80 91 d5 03 	lds	r24, 0x03D5
    3150:	81 36       	cpi	r24, 0x61	; 97
    3152:	09 f0       	breq	.+2      	; 0x3156 <__vector_25+0x2be>
    3154:	88 c0       	rjmp	.+272    	; 0x3266 <__vector_25+0x3ce>
		 {
		  	lcd_string("     ANGER     ");
    3156:	80 e8       	ldi	r24, 0x80	; 128
    3158:	92 e0       	ldi	r25, 0x02	; 2
    315a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
			Move(2,3);
    315e:	82 e0       	ldi	r24, 0x02	; 2
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	63 e0       	ldi	r22, 0x03	; 3
    3164:	70 e0       	ldi	r23, 0x00	; 0
    3166:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
			Lift();
    316a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <Lift>
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	aa e7       	ldi	r26, 0x7A	; 122
    3174:	b4 e4       	ldi	r27, 0x44	; 68
    3176:	8f a3       	std	Y+39, r24	; 0x27
    3178:	98 a7       	std	Y+40, r25	; 0x28
    317a:	a9 a7       	std	Y+41, r26	; 0x29
    317c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317e:	6f a1       	ldd	r22, Y+39	; 0x27
    3180:	78 a5       	ldd	r23, Y+40	; 0x28
    3182:	89 a5       	ldd	r24, Y+41	; 0x29
    3184:	9a a5       	ldd	r25, Y+42	; 0x2a
    3186:	26 e6       	ldi	r18, 0x66	; 102
    3188:	36 e6       	ldi	r19, 0x66	; 102
    318a:	46 e6       	ldi	r20, 0x66	; 102
    318c:	55 e4       	ldi	r21, 0x45	; 69
    318e:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	8b a3       	std	Y+35, r24	; 0x23
    3198:	9c a3       	std	Y+36, r25	; 0x24
    319a:	ad a3       	std	Y+37, r26	; 0x25
    319c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    319e:	6b a1       	ldd	r22, Y+35	; 0x23
    31a0:	7c a1       	ldd	r23, Y+36	; 0x24
    31a2:	8d a1       	ldd	r24, Y+37	; 0x25
    31a4:	9e a1       	ldd	r25, Y+38	; 0x26
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e8       	ldi	r20, 0x80	; 128
    31ac:	5f e3       	ldi	r21, 0x3F	; 63
    31ae:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    31b2:	88 23       	and	r24, r24
    31b4:	2c f4       	brge	.+10     	; 0x31c0 <__vector_25+0x328>
		__ticks = 1;
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	9a a3       	std	Y+34, r25	; 0x22
    31bc:	89 a3       	std	Y+33, r24	; 0x21
    31be:	3f c0       	rjmp	.+126    	; 0x323e <__vector_25+0x3a6>
	else if (__tmp > 65535)
    31c0:	6b a1       	ldd	r22, Y+35	; 0x23
    31c2:	7c a1       	ldd	r23, Y+36	; 0x24
    31c4:	8d a1       	ldd	r24, Y+37	; 0x25
    31c6:	9e a1       	ldd	r25, Y+38	; 0x26
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	3f ef       	ldi	r19, 0xFF	; 255
    31cc:	4f e7       	ldi	r20, 0x7F	; 127
    31ce:	57 e4       	ldi	r21, 0x47	; 71
    31d0:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    31d4:	18 16       	cp	r1, r24
    31d6:	4c f5       	brge	.+82     	; 0x322a <__vector_25+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d8:	6f a1       	ldd	r22, Y+39	; 0x27
    31da:	78 a5       	ldd	r23, Y+40	; 0x28
    31dc:	89 a5       	ldd	r24, Y+41	; 0x29
    31de:	9a a5       	ldd	r25, Y+42	; 0x2a
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e2       	ldi	r20, 0x20	; 32
    31e6:	51 e4       	ldi	r21, 0x41	; 65
    31e8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	9a a3       	std	Y+34, r25	; 0x22
    31fe:	89 a3       	std	Y+33, r24	; 0x21
    3200:	0f c0       	rjmp	.+30     	; 0x3220 <__vector_25+0x388>
    3202:	80 e7       	ldi	r24, 0x70	; 112
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	98 a3       	std	Y+32, r25	; 0x20
    3208:	8f 8f       	std	Y+31, r24	; 0x1f
    320a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    320c:	98 a1       	ldd	r25, Y+32	; 0x20
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <__vector_25+0x376>
    3212:	98 a3       	std	Y+32, r25	; 0x20
    3214:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3216:	89 a1       	ldd	r24, Y+33	; 0x21
    3218:	9a a1       	ldd	r25, Y+34	; 0x22
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	9a a3       	std	Y+34, r25	; 0x22
    321e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3220:	89 a1       	ldd	r24, Y+33	; 0x21
    3222:	9a a1       	ldd	r25, Y+34	; 0x22
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	69 f7       	brne	.-38     	; 0x3202 <__vector_25+0x36a>
    3228:	14 c0       	rjmp	.+40     	; 0x3252 <__vector_25+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322a:	6b a1       	ldd	r22, Y+35	; 0x23
    322c:	7c a1       	ldd	r23, Y+36	; 0x24
    322e:	8d a1       	ldd	r24, Y+37	; 0x25
    3230:	9e a1       	ldd	r25, Y+38	; 0x26
    3232:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	9a a3       	std	Y+34, r25	; 0x22
    323c:	89 a3       	std	Y+33, r24	; 0x21
    323e:	89 a1       	ldd	r24, Y+33	; 0x21
    3240:	9a a1       	ldd	r25, Y+34	; 0x22
    3242:	9e 8f       	std	Y+30, r25	; 0x1e
    3244:	8d 8f       	std	Y+29, r24	; 0x1d
    3246:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3248:	9e 8d       	ldd	r25, Y+30	; 0x1e
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <__vector_25+0x3b2>
    324e:	9e 8f       	std	Y+30, r25	; 0x1e
    3250:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			Move_Right();
    3252:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <Move_Right>
			Move(3,2);
    3256:	83 e0       	ldi	r24, 0x03	; 3
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	62 e0       	ldi	r22, 0x02	; 2
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
			Drop();
    3262:	0e 94 43 17 	call	0x2e86	; 0x2e86 <Drop>
		 }
		 if(data == 0x66) //ASCII value of f (fear)
    3266:	80 91 d5 03 	lds	r24, 0x03D5
    326a:	86 36       	cpi	r24, 0x66	; 102
    326c:	09 f0       	breq	.+2      	; 0x3270 <__vector_25+0x3d8>
    326e:	88 c0       	rjmp	.+272    	; 0x3380 <__vector_25+0x4e8>
		 {
		  	lcd_string("      FEAR     ");
    3270:	80 e9       	ldi	r24, 0x90	; 144
    3272:	92 e0       	ldi	r25, 0x02	; 2
    3274:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
			Move(3,2);
    3278:	83 e0       	ldi	r24, 0x03	; 3
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	62 e0       	ldi	r22, 0x02	; 2
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
			Lift();
    3284:	0e 94 64 11 	call	0x22c8	; 0x22c8 <Lift>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	aa e7       	ldi	r26, 0x7A	; 122
    328e:	b4 e4       	ldi	r27, 0x44	; 68
    3290:	89 8f       	std	Y+25, r24	; 0x19
    3292:	9a 8f       	std	Y+26, r25	; 0x1a
    3294:	ab 8f       	std	Y+27, r26	; 0x1b
    3296:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3298:	69 8d       	ldd	r22, Y+25	; 0x19
    329a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    329c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    329e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32a0:	26 e6       	ldi	r18, 0x66	; 102
    32a2:	36 e6       	ldi	r19, 0x66	; 102
    32a4:	46 e6       	ldi	r20, 0x66	; 102
    32a6:	55 e4       	ldi	r21, 0x45	; 69
    32a8:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	8d 8b       	std	Y+21, r24	; 0x15
    32b2:	9e 8b       	std	Y+22, r25	; 0x16
    32b4:	af 8b       	std	Y+23, r26	; 0x17
    32b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32b8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ba:	7e 89       	ldd	r23, Y+22	; 0x16
    32bc:	8f 89       	ldd	r24, Y+23	; 0x17
    32be:	98 8d       	ldd	r25, Y+24	; 0x18
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e8       	ldi	r20, 0x80	; 128
    32c6:	5f e3       	ldi	r21, 0x3F	; 63
    32c8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    32cc:	88 23       	and	r24, r24
    32ce:	2c f4       	brge	.+10     	; 0x32da <__vector_25+0x442>
		__ticks = 1;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9c 8b       	std	Y+20, r25	; 0x14
    32d6:	8b 8b       	std	Y+19, r24	; 0x13
    32d8:	3f c0       	rjmp	.+126    	; 0x3358 <__vector_25+0x4c0>
	else if (__tmp > 65535)
    32da:	6d 89       	ldd	r22, Y+21	; 0x15
    32dc:	7e 89       	ldd	r23, Y+22	; 0x16
    32de:	8f 89       	ldd	r24, Y+23	; 0x17
    32e0:	98 8d       	ldd	r25, Y+24	; 0x18
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	3f ef       	ldi	r19, 0xFF	; 255
    32e6:	4f e7       	ldi	r20, 0x7F	; 127
    32e8:	57 e4       	ldi	r21, 0x47	; 71
    32ea:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    32ee:	18 16       	cp	r1, r24
    32f0:	4c f5       	brge	.+82     	; 0x3344 <__vector_25+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f2:	69 8d       	ldd	r22, Y+25	; 0x19
    32f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e2       	ldi	r20, 0x20	; 32
    3300:	51 e4       	ldi	r21, 0x41	; 65
    3302:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9c 8b       	std	Y+20, r25	; 0x14
    3318:	8b 8b       	std	Y+19, r24	; 0x13
    331a:	0f c0       	rjmp	.+30     	; 0x333a <__vector_25+0x4a2>
    331c:	80 e7       	ldi	r24, 0x70	; 112
    331e:	91 e0       	ldi	r25, 0x01	; 1
    3320:	9a 8b       	std	Y+18, r25	; 0x12
    3322:	89 8b       	std	Y+17, r24	; 0x11
    3324:	89 89       	ldd	r24, Y+17	; 0x11
    3326:	9a 89       	ldd	r25, Y+18	; 0x12
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <__vector_25+0x490>
    332c:	9a 8b       	std	Y+18, r25	; 0x12
    332e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3330:	8b 89       	ldd	r24, Y+19	; 0x13
    3332:	9c 89       	ldd	r25, Y+20	; 0x14
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	9c 8b       	std	Y+20, r25	; 0x14
    3338:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333a:	8b 89       	ldd	r24, Y+19	; 0x13
    333c:	9c 89       	ldd	r25, Y+20	; 0x14
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	69 f7       	brne	.-38     	; 0x331c <__vector_25+0x484>
    3342:	14 c0       	rjmp	.+40     	; 0x336c <__vector_25+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3344:	6d 89       	ldd	r22, Y+21	; 0x15
    3346:	7e 89       	ldd	r23, Y+22	; 0x16
    3348:	8f 89       	ldd	r24, Y+23	; 0x17
    334a:	98 8d       	ldd	r25, Y+24	; 0x18
    334c:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9c 8b       	std	Y+20, r25	; 0x14
    3356:	8b 8b       	std	Y+19, r24	; 0x13
    3358:	8b 89       	ldd	r24, Y+19	; 0x13
    335a:	9c 89       	ldd	r25, Y+20	; 0x14
    335c:	98 8b       	std	Y+16, r25	; 0x10
    335e:	8f 87       	std	Y+15, r24	; 0x0f
    3360:	8f 85       	ldd	r24, Y+15	; 0x0f
    3362:	98 89       	ldd	r25, Y+16	; 0x10
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <__vector_25+0x4cc>
    3368:	98 8b       	std	Y+16, r25	; 0x10
    336a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Move_Right();
    336c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <Move_Right>
			Move(2,3);
    3370:	82 e0       	ldi	r24, 0x02	; 2
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	63 e0       	ldi	r22, 0x03	; 3
    3376:	70 e0       	ldi	r23, 0x00	; 0
    3378:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
			Drop();
    337c:	0e 94 43 17 	call	0x2e86	; 0x2e86 <Drop>

		 }
		 if(data == 0x72) //ASCII value of r (surprised)
    3380:	80 91 d5 03 	lds	r24, 0x03D5
    3384:	82 37       	cpi	r24, 0x72	; 114
    3386:	09 f0       	breq	.+2      	; 0x338a <__vector_25+0x4f2>
    3388:	88 c0       	rjmp	.+272    	; 0x349a <__vector_25+0x602>
		 {
		  	lcd_string("   SURPRISED   ");
    338a:	80 ea       	ldi	r24, 0xA0	; 160
    338c:	92 e0       	ldi	r25, 0x02	; 2
    338e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
			Move(2,1);
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	61 e0       	ldi	r22, 0x01	; 1
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
			Lift();
    339e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <Lift>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	aa e7       	ldi	r26, 0x7A	; 122
    33a8:	b4 e4       	ldi	r27, 0x44	; 68
    33aa:	8b 87       	std	Y+11, r24	; 0x0b
    33ac:	9c 87       	std	Y+12, r25	; 0x0c
    33ae:	ad 87       	std	Y+13, r26	; 0x0d
    33b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ba:	26 e6       	ldi	r18, 0x66	; 102
    33bc:	36 e6       	ldi	r19, 0x66	; 102
    33be:	46 e6       	ldi	r20, 0x66	; 102
    33c0:	55 e4       	ldi	r21, 0x45	; 69
    33c2:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	8f 83       	std	Y+7, r24	; 0x07
    33cc:	98 87       	std	Y+8, r25	; 0x08
    33ce:	a9 87       	std	Y+9, r26	; 0x09
    33d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <__vector_25+0x55c>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9e 83       	std	Y+6, r25	; 0x06
    33f0:	8d 83       	std	Y+5, r24	; 0x05
    33f2:	3f c0       	rjmp	.+126    	; 0x3472 <__vector_25+0x5da>
	else if (__tmp > 65535)
    33f4:	6f 81       	ldd	r22, Y+7	; 0x07
    33f6:	78 85       	ldd	r23, Y+8	; 0x08
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	4c f5       	brge	.+82     	; 0x345e <__vector_25+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	6b 85       	ldd	r22, Y+11	; 0x0b
    340e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3410:	8d 85       	ldd	r24, Y+13	; 0x0d
    3412:	9e 85       	ldd	r25, Y+14	; 0x0e
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9e 83       	std	Y+6, r25	; 0x06
    3432:	8d 83       	std	Y+5, r24	; 0x05
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <__vector_25+0x5bc>
    3436:	80 e7       	ldi	r24, 0x70	; 112
    3438:	91 e0       	ldi	r25, 0x01	; 1
    343a:	9c 83       	std	Y+4, r25	; 0x04
    343c:	8b 83       	std	Y+3, r24	; 0x03
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <__vector_25+0x5aa>
    3446:	9c 83       	std	Y+4, r25	; 0x04
    3448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	69 f7       	brne	.-38     	; 0x3436 <__vector_25+0x59e>
    345c:	14 c0       	rjmp	.+40     	; 0x3486 <__vector_25+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	9a 83       	std	Y+2, r25	; 0x02
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <__vector_25+0x5e6>
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			Move_Right();
    3486:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <Move_Right>
			Move(1,2);
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	62 e0       	ldi	r22, 0x02	; 2
    3490:	70 e0       	ldi	r23, 0x00	; 0
    3492:	0e 94 55 10 	call	0x20aa	; 0x20aa <Move>
			Drop();
    3496:	0e 94 43 17 	call	0x2e86	; 0x2e86 <Drop>
		 }
		 if(data == 0x64) //ASCII value of d (default)
    349a:	80 91 d5 03 	lds	r24, 0x03D5
    349e:	84 36       	cpi	r24, 0x64	; 100
    34a0:	21 f4       	brne	.+8      	; 0x34aa <__vector_25+0x612>
		 {
		  	lcd_string("    DEFAULT    ");
    34a2:	80 eb       	ldi	r24, 0xB0	; 176
    34a4:	92 e0       	ldi	r25, 0x02	; 2
    34a6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
			/*No movement in default*/
		 }
		sei(); //re-enable interrupts  ****
    34aa:	78 94       	sei
}
    34ac:	ca 5b       	subi	r28, 0xBA	; 186
    34ae:	df 4f       	sbci	r29, 0xFF	; 255
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	ff 91       	pop	r31
    34ba:	ef 91       	pop	r30
    34bc:	bf 91       	pop	r27
    34be:	af 91       	pop	r26
    34c0:	9f 91       	pop	r25
    34c2:	8f 91       	pop	r24
    34c4:	7f 91       	pop	r23
    34c6:	6f 91       	pop	r22
    34c8:	5f 91       	pop	r21
    34ca:	4f 91       	pop	r20
    34cc:	3f 91       	pop	r19
    34ce:	2f 91       	pop	r18
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	0f 90       	pop	r0
    34d6:	00 92 5b 00 	sts	0x005B, r0
    34da:	0f 90       	pop	r0
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	0f 90       	pop	r0
    34e0:	1f 90       	pop	r1
    34e2:	18 95       	reti

000034e4 <main>:

//Main Function
int main()
{
    34e4:	df 93       	push	r29
    34e6:	cf 93       	push	r28
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    34ec:	0e 94 32 0c 	call	0x1864	; 0x1864 <init_devices>
	lcd_set_4bit();
    34f0:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init(); 
    34f4:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
    34f8:	ff cf       	rjmp	.-2      	; 0x34f8 <main+0x14>

000034fa <__fixunssfsi>:
    34fa:	ef 92       	push	r14
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	7b 01       	movw	r14, r22
    3504:	8c 01       	movw	r16, r24
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e0       	ldi	r20, 0x00	; 0
    350c:	5f e4       	ldi	r21, 0x4F	; 79
    350e:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__gesf2>
    3512:	88 23       	and	r24, r24
    3514:	8c f0       	brlt	.+34     	; 0x3538 <__fixunssfsi+0x3e>
    3516:	c8 01       	movw	r24, r16
    3518:	b7 01       	movw	r22, r14
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e0       	ldi	r20, 0x00	; 0
    3520:	5f e4       	ldi	r21, 0x4F	; 79
    3522:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__subsf3>
    3526:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__fixsfsi>
    352a:	9b 01       	movw	r18, r22
    352c:	ac 01       	movw	r20, r24
    352e:	20 50       	subi	r18, 0x00	; 0
    3530:	30 40       	sbci	r19, 0x00	; 0
    3532:	40 40       	sbci	r20, 0x00	; 0
    3534:	50 48       	sbci	r21, 0x80	; 128
    3536:	06 c0       	rjmp	.+12     	; 0x3544 <__fixunssfsi+0x4a>
    3538:	c8 01       	movw	r24, r16
    353a:	b7 01       	movw	r22, r14
    353c:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__fixsfsi>
    3540:	9b 01       	movw	r18, r22
    3542:	ac 01       	movw	r20, r24
    3544:	b9 01       	movw	r22, r18
    3546:	ca 01       	movw	r24, r20
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	ff 90       	pop	r15
    354e:	ef 90       	pop	r14
    3550:	08 95       	ret

00003552 <_fpadd_parts>:
    3552:	a0 e0       	ldi	r26, 0x00	; 0
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	ef ea       	ldi	r30, 0xAF	; 175
    3558:	fa e1       	ldi	r31, 0x1A	; 26
    355a:	0c 94 5f 21 	jmp	0x42be	; 0x42be <__prologue_saves__>
    355e:	dc 01       	movw	r26, r24
    3560:	2b 01       	movw	r4, r22
    3562:	fa 01       	movw	r30, r20
    3564:	9c 91       	ld	r25, X
    3566:	92 30       	cpi	r25, 0x02	; 2
    3568:	08 f4       	brcc	.+2      	; 0x356c <_fpadd_parts+0x1a>
    356a:	39 c1       	rjmp	.+626    	; 0x37de <_fpadd_parts+0x28c>
    356c:	eb 01       	movw	r28, r22
    356e:	88 81       	ld	r24, Y
    3570:	82 30       	cpi	r24, 0x02	; 2
    3572:	08 f4       	brcc	.+2      	; 0x3576 <_fpadd_parts+0x24>
    3574:	33 c1       	rjmp	.+614    	; 0x37dc <_fpadd_parts+0x28a>
    3576:	94 30       	cpi	r25, 0x04	; 4
    3578:	69 f4       	brne	.+26     	; 0x3594 <_fpadd_parts+0x42>
    357a:	84 30       	cpi	r24, 0x04	; 4
    357c:	09 f0       	breq	.+2      	; 0x3580 <_fpadd_parts+0x2e>
    357e:	2f c1       	rjmp	.+606    	; 0x37de <_fpadd_parts+0x28c>
    3580:	11 96       	adiw	r26, 0x01	; 1
    3582:	9c 91       	ld	r25, X
    3584:	11 97       	sbiw	r26, 0x01	; 1
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	98 17       	cp	r25, r24
    358a:	09 f4       	brne	.+2      	; 0x358e <_fpadd_parts+0x3c>
    358c:	28 c1       	rjmp	.+592    	; 0x37de <_fpadd_parts+0x28c>
    358e:	a0 ec       	ldi	r26, 0xC0	; 192
    3590:	b2 e0       	ldi	r27, 0x02	; 2
    3592:	25 c1       	rjmp	.+586    	; 0x37de <_fpadd_parts+0x28c>
    3594:	84 30       	cpi	r24, 0x04	; 4
    3596:	09 f4       	brne	.+2      	; 0x359a <_fpadd_parts+0x48>
    3598:	21 c1       	rjmp	.+578    	; 0x37dc <_fpadd_parts+0x28a>
    359a:	82 30       	cpi	r24, 0x02	; 2
    359c:	a9 f4       	brne	.+42     	; 0x35c8 <_fpadd_parts+0x76>
    359e:	92 30       	cpi	r25, 0x02	; 2
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <_fpadd_parts+0x52>
    35a2:	1d c1       	rjmp	.+570    	; 0x37de <_fpadd_parts+0x28c>
    35a4:	9a 01       	movw	r18, r20
    35a6:	ad 01       	movw	r20, r26
    35a8:	88 e0       	ldi	r24, 0x08	; 8
    35aa:	ea 01       	movw	r28, r20
    35ac:	09 90       	ld	r0, Y+
    35ae:	ae 01       	movw	r20, r28
    35b0:	e9 01       	movw	r28, r18
    35b2:	09 92       	st	Y+, r0
    35b4:	9e 01       	movw	r18, r28
    35b6:	81 50       	subi	r24, 0x01	; 1
    35b8:	c1 f7       	brne	.-16     	; 0x35aa <_fpadd_parts+0x58>
    35ba:	e2 01       	movw	r28, r4
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	11 96       	adiw	r26, 0x01	; 1
    35c0:	9c 91       	ld	r25, X
    35c2:	89 23       	and	r24, r25
    35c4:	81 83       	std	Z+1, r24	; 0x01
    35c6:	08 c1       	rjmp	.+528    	; 0x37d8 <_fpadd_parts+0x286>
    35c8:	92 30       	cpi	r25, 0x02	; 2
    35ca:	09 f4       	brne	.+2      	; 0x35ce <_fpadd_parts+0x7c>
    35cc:	07 c1       	rjmp	.+526    	; 0x37dc <_fpadd_parts+0x28a>
    35ce:	12 96       	adiw	r26, 0x02	; 2
    35d0:	2d 90       	ld	r2, X+
    35d2:	3c 90       	ld	r3, X
    35d4:	13 97       	sbiw	r26, 0x03	; 3
    35d6:	eb 01       	movw	r28, r22
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	9b 81       	ldd	r25, Y+3	; 0x03
    35dc:	14 96       	adiw	r26, 0x04	; 4
    35de:	ad 90       	ld	r10, X+
    35e0:	bd 90       	ld	r11, X+
    35e2:	cd 90       	ld	r12, X+
    35e4:	dc 90       	ld	r13, X
    35e6:	17 97       	sbiw	r26, 0x07	; 7
    35e8:	ec 80       	ldd	r14, Y+4	; 0x04
    35ea:	fd 80       	ldd	r15, Y+5	; 0x05
    35ec:	0e 81       	ldd	r16, Y+6	; 0x06
    35ee:	1f 81       	ldd	r17, Y+7	; 0x07
    35f0:	91 01       	movw	r18, r2
    35f2:	28 1b       	sub	r18, r24
    35f4:	39 0b       	sbc	r19, r25
    35f6:	b9 01       	movw	r22, r18
    35f8:	37 ff       	sbrs	r19, 7
    35fa:	04 c0       	rjmp	.+8      	; 0x3604 <_fpadd_parts+0xb2>
    35fc:	66 27       	eor	r22, r22
    35fe:	77 27       	eor	r23, r23
    3600:	62 1b       	sub	r22, r18
    3602:	73 0b       	sbc	r23, r19
    3604:	60 32       	cpi	r22, 0x20	; 32
    3606:	71 05       	cpc	r23, r1
    3608:	0c f0       	brlt	.+2      	; 0x360c <_fpadd_parts+0xba>
    360a:	61 c0       	rjmp	.+194    	; 0x36ce <_fpadd_parts+0x17c>
    360c:	12 16       	cp	r1, r18
    360e:	13 06       	cpc	r1, r19
    3610:	6c f5       	brge	.+90     	; 0x366c <_fpadd_parts+0x11a>
    3612:	37 01       	movw	r6, r14
    3614:	48 01       	movw	r8, r16
    3616:	06 2e       	mov	r0, r22
    3618:	04 c0       	rjmp	.+8      	; 0x3622 <_fpadd_parts+0xd0>
    361a:	96 94       	lsr	r9
    361c:	87 94       	ror	r8
    361e:	77 94       	ror	r7
    3620:	67 94       	ror	r6
    3622:	0a 94       	dec	r0
    3624:	d2 f7       	brpl	.-12     	; 0x361a <_fpadd_parts+0xc8>
    3626:	21 e0       	ldi	r18, 0x01	; 1
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e0       	ldi	r20, 0x00	; 0
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	04 c0       	rjmp	.+8      	; 0x3638 <_fpadd_parts+0xe6>
    3630:	22 0f       	add	r18, r18
    3632:	33 1f       	adc	r19, r19
    3634:	44 1f       	adc	r20, r20
    3636:	55 1f       	adc	r21, r21
    3638:	6a 95       	dec	r22
    363a:	d2 f7       	brpl	.-12     	; 0x3630 <_fpadd_parts+0xde>
    363c:	21 50       	subi	r18, 0x01	; 1
    363e:	30 40       	sbci	r19, 0x00	; 0
    3640:	40 40       	sbci	r20, 0x00	; 0
    3642:	50 40       	sbci	r21, 0x00	; 0
    3644:	2e 21       	and	r18, r14
    3646:	3f 21       	and	r19, r15
    3648:	40 23       	and	r20, r16
    364a:	51 23       	and	r21, r17
    364c:	21 15       	cp	r18, r1
    364e:	31 05       	cpc	r19, r1
    3650:	41 05       	cpc	r20, r1
    3652:	51 05       	cpc	r21, r1
    3654:	21 f0       	breq	.+8      	; 0x365e <_fpadd_parts+0x10c>
    3656:	21 e0       	ldi	r18, 0x01	; 1
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e0       	ldi	r20, 0x00	; 0
    365c:	50 e0       	ldi	r21, 0x00	; 0
    365e:	79 01       	movw	r14, r18
    3660:	8a 01       	movw	r16, r20
    3662:	e6 28       	or	r14, r6
    3664:	f7 28       	or	r15, r7
    3666:	08 29       	or	r16, r8
    3668:	19 29       	or	r17, r9
    366a:	3c c0       	rjmp	.+120    	; 0x36e4 <_fpadd_parts+0x192>
    366c:	23 2b       	or	r18, r19
    366e:	d1 f1       	breq	.+116    	; 0x36e4 <_fpadd_parts+0x192>
    3670:	26 0e       	add	r2, r22
    3672:	37 1e       	adc	r3, r23
    3674:	35 01       	movw	r6, r10
    3676:	46 01       	movw	r8, r12
    3678:	06 2e       	mov	r0, r22
    367a:	04 c0       	rjmp	.+8      	; 0x3684 <_fpadd_parts+0x132>
    367c:	96 94       	lsr	r9
    367e:	87 94       	ror	r8
    3680:	77 94       	ror	r7
    3682:	67 94       	ror	r6
    3684:	0a 94       	dec	r0
    3686:	d2 f7       	brpl	.-12     	; 0x367c <_fpadd_parts+0x12a>
    3688:	21 e0       	ldi	r18, 0x01	; 1
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e0       	ldi	r20, 0x00	; 0
    368e:	50 e0       	ldi	r21, 0x00	; 0
    3690:	04 c0       	rjmp	.+8      	; 0x369a <_fpadd_parts+0x148>
    3692:	22 0f       	add	r18, r18
    3694:	33 1f       	adc	r19, r19
    3696:	44 1f       	adc	r20, r20
    3698:	55 1f       	adc	r21, r21
    369a:	6a 95       	dec	r22
    369c:	d2 f7       	brpl	.-12     	; 0x3692 <_fpadd_parts+0x140>
    369e:	21 50       	subi	r18, 0x01	; 1
    36a0:	30 40       	sbci	r19, 0x00	; 0
    36a2:	40 40       	sbci	r20, 0x00	; 0
    36a4:	50 40       	sbci	r21, 0x00	; 0
    36a6:	2a 21       	and	r18, r10
    36a8:	3b 21       	and	r19, r11
    36aa:	4c 21       	and	r20, r12
    36ac:	5d 21       	and	r21, r13
    36ae:	21 15       	cp	r18, r1
    36b0:	31 05       	cpc	r19, r1
    36b2:	41 05       	cpc	r20, r1
    36b4:	51 05       	cpc	r21, r1
    36b6:	21 f0       	breq	.+8      	; 0x36c0 <_fpadd_parts+0x16e>
    36b8:	21 e0       	ldi	r18, 0x01	; 1
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 e0       	ldi	r20, 0x00	; 0
    36be:	50 e0       	ldi	r21, 0x00	; 0
    36c0:	59 01       	movw	r10, r18
    36c2:	6a 01       	movw	r12, r20
    36c4:	a6 28       	or	r10, r6
    36c6:	b7 28       	or	r11, r7
    36c8:	c8 28       	or	r12, r8
    36ca:	d9 28       	or	r13, r9
    36cc:	0b c0       	rjmp	.+22     	; 0x36e4 <_fpadd_parts+0x192>
    36ce:	82 15       	cp	r24, r2
    36d0:	93 05       	cpc	r25, r3
    36d2:	2c f0       	brlt	.+10     	; 0x36de <_fpadd_parts+0x18c>
    36d4:	1c 01       	movw	r2, r24
    36d6:	aa 24       	eor	r10, r10
    36d8:	bb 24       	eor	r11, r11
    36da:	65 01       	movw	r12, r10
    36dc:	03 c0       	rjmp	.+6      	; 0x36e4 <_fpadd_parts+0x192>
    36de:	ee 24       	eor	r14, r14
    36e0:	ff 24       	eor	r15, r15
    36e2:	87 01       	movw	r16, r14
    36e4:	11 96       	adiw	r26, 0x01	; 1
    36e6:	9c 91       	ld	r25, X
    36e8:	d2 01       	movw	r26, r4
    36ea:	11 96       	adiw	r26, 0x01	; 1
    36ec:	8c 91       	ld	r24, X
    36ee:	98 17       	cp	r25, r24
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <_fpadd_parts+0x1a2>
    36f2:	45 c0       	rjmp	.+138    	; 0x377e <_fpadd_parts+0x22c>
    36f4:	99 23       	and	r25, r25
    36f6:	39 f0       	breq	.+14     	; 0x3706 <_fpadd_parts+0x1b4>
    36f8:	a8 01       	movw	r20, r16
    36fa:	97 01       	movw	r18, r14
    36fc:	2a 19       	sub	r18, r10
    36fe:	3b 09       	sbc	r19, r11
    3700:	4c 09       	sbc	r20, r12
    3702:	5d 09       	sbc	r21, r13
    3704:	06 c0       	rjmp	.+12     	; 0x3712 <_fpadd_parts+0x1c0>
    3706:	a6 01       	movw	r20, r12
    3708:	95 01       	movw	r18, r10
    370a:	2e 19       	sub	r18, r14
    370c:	3f 09       	sbc	r19, r15
    370e:	40 0b       	sbc	r20, r16
    3710:	51 0b       	sbc	r21, r17
    3712:	57 fd       	sbrc	r21, 7
    3714:	08 c0       	rjmp	.+16     	; 0x3726 <_fpadd_parts+0x1d4>
    3716:	11 82       	std	Z+1, r1	; 0x01
    3718:	33 82       	std	Z+3, r3	; 0x03
    371a:	22 82       	std	Z+2, r2	; 0x02
    371c:	24 83       	std	Z+4, r18	; 0x04
    371e:	35 83       	std	Z+5, r19	; 0x05
    3720:	46 83       	std	Z+6, r20	; 0x06
    3722:	57 83       	std	Z+7, r21	; 0x07
    3724:	1d c0       	rjmp	.+58     	; 0x3760 <_fpadd_parts+0x20e>
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	81 83       	std	Z+1, r24	; 0x01
    372a:	33 82       	std	Z+3, r3	; 0x03
    372c:	22 82       	std	Z+2, r2	; 0x02
    372e:	88 27       	eor	r24, r24
    3730:	99 27       	eor	r25, r25
    3732:	dc 01       	movw	r26, r24
    3734:	82 1b       	sub	r24, r18
    3736:	93 0b       	sbc	r25, r19
    3738:	a4 0b       	sbc	r26, r20
    373a:	b5 0b       	sbc	r27, r21
    373c:	84 83       	std	Z+4, r24	; 0x04
    373e:	95 83       	std	Z+5, r25	; 0x05
    3740:	a6 83       	std	Z+6, r26	; 0x06
    3742:	b7 83       	std	Z+7, r27	; 0x07
    3744:	0d c0       	rjmp	.+26     	; 0x3760 <_fpadd_parts+0x20e>
    3746:	22 0f       	add	r18, r18
    3748:	33 1f       	adc	r19, r19
    374a:	44 1f       	adc	r20, r20
    374c:	55 1f       	adc	r21, r21
    374e:	24 83       	std	Z+4, r18	; 0x04
    3750:	35 83       	std	Z+5, r19	; 0x05
    3752:	46 83       	std	Z+6, r20	; 0x06
    3754:	57 83       	std	Z+7, r21	; 0x07
    3756:	82 81       	ldd	r24, Z+2	; 0x02
    3758:	93 81       	ldd	r25, Z+3	; 0x03
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	93 83       	std	Z+3, r25	; 0x03
    375e:	82 83       	std	Z+2, r24	; 0x02
    3760:	24 81       	ldd	r18, Z+4	; 0x04
    3762:	35 81       	ldd	r19, Z+5	; 0x05
    3764:	46 81       	ldd	r20, Z+6	; 0x06
    3766:	57 81       	ldd	r21, Z+7	; 0x07
    3768:	da 01       	movw	r26, r20
    376a:	c9 01       	movw	r24, r18
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	a1 09       	sbc	r26, r1
    3770:	b1 09       	sbc	r27, r1
    3772:	8f 5f       	subi	r24, 0xFF	; 255
    3774:	9f 4f       	sbci	r25, 0xFF	; 255
    3776:	af 4f       	sbci	r26, 0xFF	; 255
    3778:	bf 43       	sbci	r27, 0x3F	; 63
    377a:	28 f3       	brcs	.-54     	; 0x3746 <_fpadd_parts+0x1f4>
    377c:	0b c0       	rjmp	.+22     	; 0x3794 <_fpadd_parts+0x242>
    377e:	91 83       	std	Z+1, r25	; 0x01
    3780:	33 82       	std	Z+3, r3	; 0x03
    3782:	22 82       	std	Z+2, r2	; 0x02
    3784:	ea 0c       	add	r14, r10
    3786:	fb 1c       	adc	r15, r11
    3788:	0c 1d       	adc	r16, r12
    378a:	1d 1d       	adc	r17, r13
    378c:	e4 82       	std	Z+4, r14	; 0x04
    378e:	f5 82       	std	Z+5, r15	; 0x05
    3790:	06 83       	std	Z+6, r16	; 0x06
    3792:	17 83       	std	Z+7, r17	; 0x07
    3794:	83 e0       	ldi	r24, 0x03	; 3
    3796:	80 83       	st	Z, r24
    3798:	24 81       	ldd	r18, Z+4	; 0x04
    379a:	35 81       	ldd	r19, Z+5	; 0x05
    379c:	46 81       	ldd	r20, Z+6	; 0x06
    379e:	57 81       	ldd	r21, Z+7	; 0x07
    37a0:	57 ff       	sbrs	r21, 7
    37a2:	1a c0       	rjmp	.+52     	; 0x37d8 <_fpadd_parts+0x286>
    37a4:	c9 01       	movw	r24, r18
    37a6:	aa 27       	eor	r26, r26
    37a8:	97 fd       	sbrc	r25, 7
    37aa:	a0 95       	com	r26
    37ac:	ba 2f       	mov	r27, r26
    37ae:	81 70       	andi	r24, 0x01	; 1
    37b0:	90 70       	andi	r25, 0x00	; 0
    37b2:	a0 70       	andi	r26, 0x00	; 0
    37b4:	b0 70       	andi	r27, 0x00	; 0
    37b6:	56 95       	lsr	r21
    37b8:	47 95       	ror	r20
    37ba:	37 95       	ror	r19
    37bc:	27 95       	ror	r18
    37be:	82 2b       	or	r24, r18
    37c0:	93 2b       	or	r25, r19
    37c2:	a4 2b       	or	r26, r20
    37c4:	b5 2b       	or	r27, r21
    37c6:	84 83       	std	Z+4, r24	; 0x04
    37c8:	95 83       	std	Z+5, r25	; 0x05
    37ca:	a6 83       	std	Z+6, r26	; 0x06
    37cc:	b7 83       	std	Z+7, r27	; 0x07
    37ce:	82 81       	ldd	r24, Z+2	; 0x02
    37d0:	93 81       	ldd	r25, Z+3	; 0x03
    37d2:	01 96       	adiw	r24, 0x01	; 1
    37d4:	93 83       	std	Z+3, r25	; 0x03
    37d6:	82 83       	std	Z+2, r24	; 0x02
    37d8:	df 01       	movw	r26, r30
    37da:	01 c0       	rjmp	.+2      	; 0x37de <_fpadd_parts+0x28c>
    37dc:	d2 01       	movw	r26, r4
    37de:	cd 01       	movw	r24, r26
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	e2 e1       	ldi	r30, 0x12	; 18
    37e6:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__epilogue_restores__>

000037ea <__subsf3>:
    37ea:	a0 e2       	ldi	r26, 0x20	; 32
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	eb ef       	ldi	r30, 0xFB	; 251
    37f0:	fb e1       	ldi	r31, 0x1B	; 27
    37f2:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    37f6:	69 83       	std	Y+1, r22	; 0x01
    37f8:	7a 83       	std	Y+2, r23	; 0x02
    37fa:	8b 83       	std	Y+3, r24	; 0x03
    37fc:	9c 83       	std	Y+4, r25	; 0x04
    37fe:	2d 83       	std	Y+5, r18	; 0x05
    3800:	3e 83       	std	Y+6, r19	; 0x06
    3802:	4f 83       	std	Y+7, r20	; 0x07
    3804:	58 87       	std	Y+8, r21	; 0x08
    3806:	e9 e0       	ldi	r30, 0x09	; 9
    3808:	ee 2e       	mov	r14, r30
    380a:	f1 2c       	mov	r15, r1
    380c:	ec 0e       	add	r14, r28
    380e:	fd 1e       	adc	r15, r29
    3810:	ce 01       	movw	r24, r28
    3812:	01 96       	adiw	r24, 0x01	; 1
    3814:	b7 01       	movw	r22, r14
    3816:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    381a:	8e 01       	movw	r16, r28
    381c:	0f 5e       	subi	r16, 0xEF	; 239
    381e:	1f 4f       	sbci	r17, 0xFF	; 255
    3820:	ce 01       	movw	r24, r28
    3822:	05 96       	adiw	r24, 0x05	; 5
    3824:	b8 01       	movw	r22, r16
    3826:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    382a:	8a 89       	ldd	r24, Y+18	; 0x12
    382c:	91 e0       	ldi	r25, 0x01	; 1
    382e:	89 27       	eor	r24, r25
    3830:	8a 8b       	std	Y+18, r24	; 0x12
    3832:	c7 01       	movw	r24, r14
    3834:	b8 01       	movw	r22, r16
    3836:	ae 01       	movw	r20, r28
    3838:	47 5e       	subi	r20, 0xE7	; 231
    383a:	5f 4f       	sbci	r21, 0xFF	; 255
    383c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_fpadd_parts>
    3840:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__pack_f>
    3844:	a0 96       	adiw	r28, 0x20	; 32
    3846:	e6 e0       	ldi	r30, 0x06	; 6
    3848:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

0000384c <__addsf3>:
    384c:	a0 e2       	ldi	r26, 0x20	; 32
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	ec e2       	ldi	r30, 0x2C	; 44
    3852:	fc e1       	ldi	r31, 0x1C	; 28
    3854:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    3858:	69 83       	std	Y+1, r22	; 0x01
    385a:	7a 83       	std	Y+2, r23	; 0x02
    385c:	8b 83       	std	Y+3, r24	; 0x03
    385e:	9c 83       	std	Y+4, r25	; 0x04
    3860:	2d 83       	std	Y+5, r18	; 0x05
    3862:	3e 83       	std	Y+6, r19	; 0x06
    3864:	4f 83       	std	Y+7, r20	; 0x07
    3866:	58 87       	std	Y+8, r21	; 0x08
    3868:	f9 e0       	ldi	r31, 0x09	; 9
    386a:	ef 2e       	mov	r14, r31
    386c:	f1 2c       	mov	r15, r1
    386e:	ec 0e       	add	r14, r28
    3870:	fd 1e       	adc	r15, r29
    3872:	ce 01       	movw	r24, r28
    3874:	01 96       	adiw	r24, 0x01	; 1
    3876:	b7 01       	movw	r22, r14
    3878:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    387c:	8e 01       	movw	r16, r28
    387e:	0f 5e       	subi	r16, 0xEF	; 239
    3880:	1f 4f       	sbci	r17, 0xFF	; 255
    3882:	ce 01       	movw	r24, r28
    3884:	05 96       	adiw	r24, 0x05	; 5
    3886:	b8 01       	movw	r22, r16
    3888:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    388c:	c7 01       	movw	r24, r14
    388e:	b8 01       	movw	r22, r16
    3890:	ae 01       	movw	r20, r28
    3892:	47 5e       	subi	r20, 0xE7	; 231
    3894:	5f 4f       	sbci	r21, 0xFF	; 255
    3896:	0e 94 a9 1a 	call	0x3552	; 0x3552 <_fpadd_parts>
    389a:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__pack_f>
    389e:	a0 96       	adiw	r28, 0x20	; 32
    38a0:	e6 e0       	ldi	r30, 0x06	; 6
    38a2:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

000038a6 <__mulsf3>:
    38a6:	a0 e2       	ldi	r26, 0x20	; 32
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	e9 e5       	ldi	r30, 0x59	; 89
    38ac:	fc e1       	ldi	r31, 0x1C	; 28
    38ae:	0c 94 5f 21 	jmp	0x42be	; 0x42be <__prologue_saves__>
    38b2:	69 83       	std	Y+1, r22	; 0x01
    38b4:	7a 83       	std	Y+2, r23	; 0x02
    38b6:	8b 83       	std	Y+3, r24	; 0x03
    38b8:	9c 83       	std	Y+4, r25	; 0x04
    38ba:	2d 83       	std	Y+5, r18	; 0x05
    38bc:	3e 83       	std	Y+6, r19	; 0x06
    38be:	4f 83       	std	Y+7, r20	; 0x07
    38c0:	58 87       	std	Y+8, r21	; 0x08
    38c2:	ce 01       	movw	r24, r28
    38c4:	01 96       	adiw	r24, 0x01	; 1
    38c6:	be 01       	movw	r22, r28
    38c8:	67 5f       	subi	r22, 0xF7	; 247
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    38d0:	ce 01       	movw	r24, r28
    38d2:	05 96       	adiw	r24, 0x05	; 5
    38d4:	be 01       	movw	r22, r28
    38d6:	6f 5e       	subi	r22, 0xEF	; 239
    38d8:	7f 4f       	sbci	r23, 0xFF	; 255
    38da:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    38de:	99 85       	ldd	r25, Y+9	; 0x09
    38e0:	92 30       	cpi	r25, 0x02	; 2
    38e2:	88 f0       	brcs	.+34     	; 0x3906 <__mulsf3+0x60>
    38e4:	89 89       	ldd	r24, Y+17	; 0x11
    38e6:	82 30       	cpi	r24, 0x02	; 2
    38e8:	c8 f0       	brcs	.+50     	; 0x391c <__mulsf3+0x76>
    38ea:	94 30       	cpi	r25, 0x04	; 4
    38ec:	19 f4       	brne	.+6      	; 0x38f4 <__mulsf3+0x4e>
    38ee:	82 30       	cpi	r24, 0x02	; 2
    38f0:	51 f4       	brne	.+20     	; 0x3906 <__mulsf3+0x60>
    38f2:	04 c0       	rjmp	.+8      	; 0x38fc <__mulsf3+0x56>
    38f4:	84 30       	cpi	r24, 0x04	; 4
    38f6:	29 f4       	brne	.+10     	; 0x3902 <__mulsf3+0x5c>
    38f8:	92 30       	cpi	r25, 0x02	; 2
    38fa:	81 f4       	brne	.+32     	; 0x391c <__mulsf3+0x76>
    38fc:	80 ec       	ldi	r24, 0xC0	; 192
    38fe:	92 e0       	ldi	r25, 0x02	; 2
    3900:	c6 c0       	rjmp	.+396    	; 0x3a8e <__mulsf3+0x1e8>
    3902:	92 30       	cpi	r25, 0x02	; 2
    3904:	49 f4       	brne	.+18     	; 0x3918 <__mulsf3+0x72>
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	9a 85       	ldd	r25, Y+10	; 0x0a
    390a:	8a 89       	ldd	r24, Y+18	; 0x12
    390c:	98 13       	cpse	r25, r24
    390e:	21 e0       	ldi	r18, 0x01	; 1
    3910:	2a 87       	std	Y+10, r18	; 0x0a
    3912:	ce 01       	movw	r24, r28
    3914:	09 96       	adiw	r24, 0x09	; 9
    3916:	bb c0       	rjmp	.+374    	; 0x3a8e <__mulsf3+0x1e8>
    3918:	82 30       	cpi	r24, 0x02	; 2
    391a:	49 f4       	brne	.+18     	; 0x392e <__mulsf3+0x88>
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3920:	8a 89       	ldd	r24, Y+18	; 0x12
    3922:	98 13       	cpse	r25, r24
    3924:	21 e0       	ldi	r18, 0x01	; 1
    3926:	2a 8b       	std	Y+18, r18	; 0x12
    3928:	ce 01       	movw	r24, r28
    392a:	41 96       	adiw	r24, 0x11	; 17
    392c:	b0 c0       	rjmp	.+352    	; 0x3a8e <__mulsf3+0x1e8>
    392e:	2d 84       	ldd	r2, Y+13	; 0x0d
    3930:	3e 84       	ldd	r3, Y+14	; 0x0e
    3932:	4f 84       	ldd	r4, Y+15	; 0x0f
    3934:	58 88       	ldd	r5, Y+16	; 0x10
    3936:	6d 88       	ldd	r6, Y+21	; 0x15
    3938:	7e 88       	ldd	r7, Y+22	; 0x16
    393a:	8f 88       	ldd	r8, Y+23	; 0x17
    393c:	98 8c       	ldd	r9, Y+24	; 0x18
    393e:	ee 24       	eor	r14, r14
    3940:	ff 24       	eor	r15, r15
    3942:	87 01       	movw	r16, r14
    3944:	aa 24       	eor	r10, r10
    3946:	bb 24       	eor	r11, r11
    3948:	65 01       	movw	r12, r10
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	60 e0       	ldi	r22, 0x00	; 0
    3950:	70 e0       	ldi	r23, 0x00	; 0
    3952:	e0 e0       	ldi	r30, 0x00	; 0
    3954:	f0 e0       	ldi	r31, 0x00	; 0
    3956:	c1 01       	movw	r24, r2
    3958:	81 70       	andi	r24, 0x01	; 1
    395a:	90 70       	andi	r25, 0x00	; 0
    395c:	89 2b       	or	r24, r25
    395e:	e9 f0       	breq	.+58     	; 0x399a <__mulsf3+0xf4>
    3960:	e6 0c       	add	r14, r6
    3962:	f7 1c       	adc	r15, r7
    3964:	08 1d       	adc	r16, r8
    3966:	19 1d       	adc	r17, r9
    3968:	9a 01       	movw	r18, r20
    396a:	ab 01       	movw	r20, r22
    396c:	2a 0d       	add	r18, r10
    396e:	3b 1d       	adc	r19, r11
    3970:	4c 1d       	adc	r20, r12
    3972:	5d 1d       	adc	r21, r13
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	a0 e0       	ldi	r26, 0x00	; 0
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	e6 14       	cp	r14, r6
    397e:	f7 04       	cpc	r15, r7
    3980:	08 05       	cpc	r16, r8
    3982:	19 05       	cpc	r17, r9
    3984:	20 f4       	brcc	.+8      	; 0x398e <__mulsf3+0xe8>
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	a0 e0       	ldi	r26, 0x00	; 0
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	ba 01       	movw	r22, r20
    3990:	a9 01       	movw	r20, r18
    3992:	48 0f       	add	r20, r24
    3994:	59 1f       	adc	r21, r25
    3996:	6a 1f       	adc	r22, r26
    3998:	7b 1f       	adc	r23, r27
    399a:	aa 0c       	add	r10, r10
    399c:	bb 1c       	adc	r11, r11
    399e:	cc 1c       	adc	r12, r12
    39a0:	dd 1c       	adc	r13, r13
    39a2:	97 fe       	sbrs	r9, 7
    39a4:	08 c0       	rjmp	.+16     	; 0x39b6 <__mulsf3+0x110>
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	a0 e0       	ldi	r26, 0x00	; 0
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	a8 2a       	or	r10, r24
    39b0:	b9 2a       	or	r11, r25
    39b2:	ca 2a       	or	r12, r26
    39b4:	db 2a       	or	r13, r27
    39b6:	31 96       	adiw	r30, 0x01	; 1
    39b8:	e0 32       	cpi	r30, 0x20	; 32
    39ba:	f1 05       	cpc	r31, r1
    39bc:	49 f0       	breq	.+18     	; 0x39d0 <__mulsf3+0x12a>
    39be:	66 0c       	add	r6, r6
    39c0:	77 1c       	adc	r7, r7
    39c2:	88 1c       	adc	r8, r8
    39c4:	99 1c       	adc	r9, r9
    39c6:	56 94       	lsr	r5
    39c8:	47 94       	ror	r4
    39ca:	37 94       	ror	r3
    39cc:	27 94       	ror	r2
    39ce:	c3 cf       	rjmp	.-122    	; 0x3956 <__mulsf3+0xb0>
    39d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    39d2:	ea 89       	ldd	r30, Y+18	; 0x12
    39d4:	2b 89       	ldd	r18, Y+19	; 0x13
    39d6:	3c 89       	ldd	r19, Y+20	; 0x14
    39d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    39da:	9c 85       	ldd	r25, Y+12	; 0x0c
    39dc:	28 0f       	add	r18, r24
    39de:	39 1f       	adc	r19, r25
    39e0:	2e 5f       	subi	r18, 0xFE	; 254
    39e2:	3f 4f       	sbci	r19, 0xFF	; 255
    39e4:	17 c0       	rjmp	.+46     	; 0x3a14 <__mulsf3+0x16e>
    39e6:	ca 01       	movw	r24, r20
    39e8:	81 70       	andi	r24, 0x01	; 1
    39ea:	90 70       	andi	r25, 0x00	; 0
    39ec:	89 2b       	or	r24, r25
    39ee:	61 f0       	breq	.+24     	; 0x3a08 <__mulsf3+0x162>
    39f0:	16 95       	lsr	r17
    39f2:	07 95       	ror	r16
    39f4:	f7 94       	ror	r15
    39f6:	e7 94       	ror	r14
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	a0 e0       	ldi	r26, 0x00	; 0
    39fe:	b0 e8       	ldi	r27, 0x80	; 128
    3a00:	e8 2a       	or	r14, r24
    3a02:	f9 2a       	or	r15, r25
    3a04:	0a 2b       	or	r16, r26
    3a06:	1b 2b       	or	r17, r27
    3a08:	76 95       	lsr	r23
    3a0a:	67 95       	ror	r22
    3a0c:	57 95       	ror	r21
    3a0e:	47 95       	ror	r20
    3a10:	2f 5f       	subi	r18, 0xFF	; 255
    3a12:	3f 4f       	sbci	r19, 0xFF	; 255
    3a14:	77 fd       	sbrc	r23, 7
    3a16:	e7 cf       	rjmp	.-50     	; 0x39e6 <__mulsf3+0x140>
    3a18:	0c c0       	rjmp	.+24     	; 0x3a32 <__mulsf3+0x18c>
    3a1a:	44 0f       	add	r20, r20
    3a1c:	55 1f       	adc	r21, r21
    3a1e:	66 1f       	adc	r22, r22
    3a20:	77 1f       	adc	r23, r23
    3a22:	17 fd       	sbrc	r17, 7
    3a24:	41 60       	ori	r20, 0x01	; 1
    3a26:	ee 0c       	add	r14, r14
    3a28:	ff 1c       	adc	r15, r15
    3a2a:	00 1f       	adc	r16, r16
    3a2c:	11 1f       	adc	r17, r17
    3a2e:	21 50       	subi	r18, 0x01	; 1
    3a30:	30 40       	sbci	r19, 0x00	; 0
    3a32:	40 30       	cpi	r20, 0x00	; 0
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	59 07       	cpc	r21, r25
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	69 07       	cpc	r22, r25
    3a3c:	90 e4       	ldi	r25, 0x40	; 64
    3a3e:	79 07       	cpc	r23, r25
    3a40:	60 f3       	brcs	.-40     	; 0x3a1a <__mulsf3+0x174>
    3a42:	2b 8f       	std	Y+27, r18	; 0x1b
    3a44:	3c 8f       	std	Y+28, r19	; 0x1c
    3a46:	db 01       	movw	r26, r22
    3a48:	ca 01       	movw	r24, r20
    3a4a:	8f 77       	andi	r24, 0x7F	; 127
    3a4c:	90 70       	andi	r25, 0x00	; 0
    3a4e:	a0 70       	andi	r26, 0x00	; 0
    3a50:	b0 70       	andi	r27, 0x00	; 0
    3a52:	80 34       	cpi	r24, 0x40	; 64
    3a54:	91 05       	cpc	r25, r1
    3a56:	a1 05       	cpc	r26, r1
    3a58:	b1 05       	cpc	r27, r1
    3a5a:	61 f4       	brne	.+24     	; 0x3a74 <__mulsf3+0x1ce>
    3a5c:	47 fd       	sbrc	r20, 7
    3a5e:	0a c0       	rjmp	.+20     	; 0x3a74 <__mulsf3+0x1ce>
    3a60:	e1 14       	cp	r14, r1
    3a62:	f1 04       	cpc	r15, r1
    3a64:	01 05       	cpc	r16, r1
    3a66:	11 05       	cpc	r17, r1
    3a68:	29 f0       	breq	.+10     	; 0x3a74 <__mulsf3+0x1ce>
    3a6a:	40 5c       	subi	r20, 0xC0	; 192
    3a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a6e:	6f 4f       	sbci	r22, 0xFF	; 255
    3a70:	7f 4f       	sbci	r23, 0xFF	; 255
    3a72:	40 78       	andi	r20, 0x80	; 128
    3a74:	1a 8e       	std	Y+26, r1	; 0x1a
    3a76:	fe 17       	cp	r31, r30
    3a78:	11 f0       	breq	.+4      	; 0x3a7e <__mulsf3+0x1d8>
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	8a 8f       	std	Y+26, r24	; 0x1a
    3a7e:	4d 8f       	std	Y+29, r20	; 0x1d
    3a80:	5e 8f       	std	Y+30, r21	; 0x1e
    3a82:	6f 8f       	std	Y+31, r22	; 0x1f
    3a84:	78 a3       	std	Y+32, r23	; 0x20
    3a86:	83 e0       	ldi	r24, 0x03	; 3
    3a88:	89 8f       	std	Y+25, r24	; 0x19
    3a8a:	ce 01       	movw	r24, r28
    3a8c:	49 96       	adiw	r24, 0x19	; 25
    3a8e:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__pack_f>
    3a92:	a0 96       	adiw	r28, 0x20	; 32
    3a94:	e2 e1       	ldi	r30, 0x12	; 18
    3a96:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__epilogue_restores__>

00003a9a <__divsf3>:
    3a9a:	a8 e1       	ldi	r26, 0x18	; 24
    3a9c:	b0 e0       	ldi	r27, 0x00	; 0
    3a9e:	e3 e5       	ldi	r30, 0x53	; 83
    3aa0:	fd e1       	ldi	r31, 0x1D	; 29
    3aa2:	0c 94 67 21 	jmp	0x42ce	; 0x42ce <__prologue_saves__+0x10>
    3aa6:	69 83       	std	Y+1, r22	; 0x01
    3aa8:	7a 83       	std	Y+2, r23	; 0x02
    3aaa:	8b 83       	std	Y+3, r24	; 0x03
    3aac:	9c 83       	std	Y+4, r25	; 0x04
    3aae:	2d 83       	std	Y+5, r18	; 0x05
    3ab0:	3e 83       	std	Y+6, r19	; 0x06
    3ab2:	4f 83       	std	Y+7, r20	; 0x07
    3ab4:	58 87       	std	Y+8, r21	; 0x08
    3ab6:	b9 e0       	ldi	r27, 0x09	; 9
    3ab8:	eb 2e       	mov	r14, r27
    3aba:	f1 2c       	mov	r15, r1
    3abc:	ec 0e       	add	r14, r28
    3abe:	fd 1e       	adc	r15, r29
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	01 96       	adiw	r24, 0x01	; 1
    3ac4:	b7 01       	movw	r22, r14
    3ac6:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3aca:	8e 01       	movw	r16, r28
    3acc:	0f 5e       	subi	r16, 0xEF	; 239
    3ace:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad0:	ce 01       	movw	r24, r28
    3ad2:	05 96       	adiw	r24, 0x05	; 5
    3ad4:	b8 01       	movw	r22, r16
    3ad6:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3ada:	29 85       	ldd	r18, Y+9	; 0x09
    3adc:	22 30       	cpi	r18, 0x02	; 2
    3ade:	08 f4       	brcc	.+2      	; 0x3ae2 <__divsf3+0x48>
    3ae0:	7e c0       	rjmp	.+252    	; 0x3bde <__divsf3+0x144>
    3ae2:	39 89       	ldd	r19, Y+17	; 0x11
    3ae4:	32 30       	cpi	r19, 0x02	; 2
    3ae6:	10 f4       	brcc	.+4      	; 0x3aec <__divsf3+0x52>
    3ae8:	b8 01       	movw	r22, r16
    3aea:	7c c0       	rjmp	.+248    	; 0x3be4 <__divsf3+0x14a>
    3aec:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aee:	9a 89       	ldd	r25, Y+18	; 0x12
    3af0:	89 27       	eor	r24, r25
    3af2:	8a 87       	std	Y+10, r24	; 0x0a
    3af4:	24 30       	cpi	r18, 0x04	; 4
    3af6:	11 f0       	breq	.+4      	; 0x3afc <__divsf3+0x62>
    3af8:	22 30       	cpi	r18, 0x02	; 2
    3afa:	31 f4       	brne	.+12     	; 0x3b08 <__divsf3+0x6e>
    3afc:	23 17       	cp	r18, r19
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <__divsf3+0x68>
    3b00:	6e c0       	rjmp	.+220    	; 0x3bde <__divsf3+0x144>
    3b02:	60 ec       	ldi	r22, 0xC0	; 192
    3b04:	72 e0       	ldi	r23, 0x02	; 2
    3b06:	6e c0       	rjmp	.+220    	; 0x3be4 <__divsf3+0x14a>
    3b08:	34 30       	cpi	r19, 0x04	; 4
    3b0a:	39 f4       	brne	.+14     	; 0x3b1a <__divsf3+0x80>
    3b0c:	1d 86       	std	Y+13, r1	; 0x0d
    3b0e:	1e 86       	std	Y+14, r1	; 0x0e
    3b10:	1f 86       	std	Y+15, r1	; 0x0f
    3b12:	18 8a       	std	Y+16, r1	; 0x10
    3b14:	1c 86       	std	Y+12, r1	; 0x0c
    3b16:	1b 86       	std	Y+11, r1	; 0x0b
    3b18:	04 c0       	rjmp	.+8      	; 0x3b22 <__divsf3+0x88>
    3b1a:	32 30       	cpi	r19, 0x02	; 2
    3b1c:	21 f4       	brne	.+8      	; 0x3b26 <__divsf3+0x8c>
    3b1e:	84 e0       	ldi	r24, 0x04	; 4
    3b20:	89 87       	std	Y+9, r24	; 0x09
    3b22:	b7 01       	movw	r22, r14
    3b24:	5f c0       	rjmp	.+190    	; 0x3be4 <__divsf3+0x14a>
    3b26:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b28:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b2e:	28 1b       	sub	r18, r24
    3b30:	39 0b       	sbc	r19, r25
    3b32:	3c 87       	std	Y+12, r19	; 0x0c
    3b34:	2b 87       	std	Y+11, r18	; 0x0b
    3b36:	ed 84       	ldd	r14, Y+13	; 0x0d
    3b38:	fe 84       	ldd	r15, Y+14	; 0x0e
    3b3a:	0f 85       	ldd	r16, Y+15	; 0x0f
    3b3c:	18 89       	ldd	r17, Y+16	; 0x10
    3b3e:	ad 88       	ldd	r10, Y+21	; 0x15
    3b40:	be 88       	ldd	r11, Y+22	; 0x16
    3b42:	cf 88       	ldd	r12, Y+23	; 0x17
    3b44:	d8 8c       	ldd	r13, Y+24	; 0x18
    3b46:	ea 14       	cp	r14, r10
    3b48:	fb 04       	cpc	r15, r11
    3b4a:	0c 05       	cpc	r16, r12
    3b4c:	1d 05       	cpc	r17, r13
    3b4e:	40 f4       	brcc	.+16     	; 0x3b60 <__divsf3+0xc6>
    3b50:	ee 0c       	add	r14, r14
    3b52:	ff 1c       	adc	r15, r15
    3b54:	00 1f       	adc	r16, r16
    3b56:	11 1f       	adc	r17, r17
    3b58:	21 50       	subi	r18, 0x01	; 1
    3b5a:	30 40       	sbci	r19, 0x00	; 0
    3b5c:	3c 87       	std	Y+12, r19	; 0x0c
    3b5e:	2b 87       	std	Y+11, r18	; 0x0b
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 e0       	ldi	r20, 0x00	; 0
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	a0 e0       	ldi	r26, 0x00	; 0
    3b6e:	b0 e4       	ldi	r27, 0x40	; 64
    3b70:	60 e0       	ldi	r22, 0x00	; 0
    3b72:	70 e0       	ldi	r23, 0x00	; 0
    3b74:	ea 14       	cp	r14, r10
    3b76:	fb 04       	cpc	r15, r11
    3b78:	0c 05       	cpc	r16, r12
    3b7a:	1d 05       	cpc	r17, r13
    3b7c:	40 f0       	brcs	.+16     	; 0x3b8e <__divsf3+0xf4>
    3b7e:	28 2b       	or	r18, r24
    3b80:	39 2b       	or	r19, r25
    3b82:	4a 2b       	or	r20, r26
    3b84:	5b 2b       	or	r21, r27
    3b86:	ea 18       	sub	r14, r10
    3b88:	fb 08       	sbc	r15, r11
    3b8a:	0c 09       	sbc	r16, r12
    3b8c:	1d 09       	sbc	r17, r13
    3b8e:	b6 95       	lsr	r27
    3b90:	a7 95       	ror	r26
    3b92:	97 95       	ror	r25
    3b94:	87 95       	ror	r24
    3b96:	ee 0c       	add	r14, r14
    3b98:	ff 1c       	adc	r15, r15
    3b9a:	00 1f       	adc	r16, r16
    3b9c:	11 1f       	adc	r17, r17
    3b9e:	6f 5f       	subi	r22, 0xFF	; 255
    3ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba2:	6f 31       	cpi	r22, 0x1F	; 31
    3ba4:	71 05       	cpc	r23, r1
    3ba6:	31 f7       	brne	.-52     	; 0x3b74 <__divsf3+0xda>
    3ba8:	da 01       	movw	r26, r20
    3baa:	c9 01       	movw	r24, r18
    3bac:	8f 77       	andi	r24, 0x7F	; 127
    3bae:	90 70       	andi	r25, 0x00	; 0
    3bb0:	a0 70       	andi	r26, 0x00	; 0
    3bb2:	b0 70       	andi	r27, 0x00	; 0
    3bb4:	80 34       	cpi	r24, 0x40	; 64
    3bb6:	91 05       	cpc	r25, r1
    3bb8:	a1 05       	cpc	r26, r1
    3bba:	b1 05       	cpc	r27, r1
    3bbc:	61 f4       	brne	.+24     	; 0x3bd6 <__divsf3+0x13c>
    3bbe:	27 fd       	sbrc	r18, 7
    3bc0:	0a c0       	rjmp	.+20     	; 0x3bd6 <__divsf3+0x13c>
    3bc2:	e1 14       	cp	r14, r1
    3bc4:	f1 04       	cpc	r15, r1
    3bc6:	01 05       	cpc	r16, r1
    3bc8:	11 05       	cpc	r17, r1
    3bca:	29 f0       	breq	.+10     	; 0x3bd6 <__divsf3+0x13c>
    3bcc:	20 5c       	subi	r18, 0xC0	; 192
    3bce:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd0:	4f 4f       	sbci	r20, 0xFF	; 255
    3bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd4:	20 78       	andi	r18, 0x80	; 128
    3bd6:	2d 87       	std	Y+13, r18	; 0x0d
    3bd8:	3e 87       	std	Y+14, r19	; 0x0e
    3bda:	4f 87       	std	Y+15, r20	; 0x0f
    3bdc:	58 8b       	std	Y+16, r21	; 0x10
    3bde:	be 01       	movw	r22, r28
    3be0:	67 5f       	subi	r22, 0xF7	; 247
    3be2:	7f 4f       	sbci	r23, 0xFF	; 255
    3be4:	cb 01       	movw	r24, r22
    3be6:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__pack_f>
    3bea:	68 96       	adiw	r28, 0x18	; 24
    3bec:	ea e0       	ldi	r30, 0x0A	; 10
    3bee:	0c 94 83 21 	jmp	0x4306	; 0x4306 <__epilogue_restores__+0x10>

00003bf2 <__gtsf2>:
    3bf2:	a8 e1       	ldi	r26, 0x18	; 24
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	ef ef       	ldi	r30, 0xFF	; 255
    3bf8:	fd e1       	ldi	r31, 0x1D	; 29
    3bfa:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    3bfe:	69 83       	std	Y+1, r22	; 0x01
    3c00:	7a 83       	std	Y+2, r23	; 0x02
    3c02:	8b 83       	std	Y+3, r24	; 0x03
    3c04:	9c 83       	std	Y+4, r25	; 0x04
    3c06:	2d 83       	std	Y+5, r18	; 0x05
    3c08:	3e 83       	std	Y+6, r19	; 0x06
    3c0a:	4f 83       	std	Y+7, r20	; 0x07
    3c0c:	58 87       	std	Y+8, r21	; 0x08
    3c0e:	89 e0       	ldi	r24, 0x09	; 9
    3c10:	e8 2e       	mov	r14, r24
    3c12:	f1 2c       	mov	r15, r1
    3c14:	ec 0e       	add	r14, r28
    3c16:	fd 1e       	adc	r15, r29
    3c18:	ce 01       	movw	r24, r28
    3c1a:	01 96       	adiw	r24, 0x01	; 1
    3c1c:	b7 01       	movw	r22, r14
    3c1e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3c22:	8e 01       	movw	r16, r28
    3c24:	0f 5e       	subi	r16, 0xEF	; 239
    3c26:	1f 4f       	sbci	r17, 0xFF	; 255
    3c28:	ce 01       	movw	r24, r28
    3c2a:	05 96       	adiw	r24, 0x05	; 5
    3c2c:	b8 01       	movw	r22, r16
    3c2e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3c32:	89 85       	ldd	r24, Y+9	; 0x09
    3c34:	82 30       	cpi	r24, 0x02	; 2
    3c36:	40 f0       	brcs	.+16     	; 0x3c48 <__gtsf2+0x56>
    3c38:	89 89       	ldd	r24, Y+17	; 0x11
    3c3a:	82 30       	cpi	r24, 0x02	; 2
    3c3c:	28 f0       	brcs	.+10     	; 0x3c48 <__gtsf2+0x56>
    3c3e:	c7 01       	movw	r24, r14
    3c40:	b8 01       	movw	r22, r16
    3c42:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__fpcmp_parts_f>
    3c46:	01 c0       	rjmp	.+2      	; 0x3c4a <__gtsf2+0x58>
    3c48:	8f ef       	ldi	r24, 0xFF	; 255
    3c4a:	68 96       	adiw	r28, 0x18	; 24
    3c4c:	e6 e0       	ldi	r30, 0x06	; 6
    3c4e:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

00003c52 <__gesf2>:
    3c52:	a8 e1       	ldi	r26, 0x18	; 24
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	ef e2       	ldi	r30, 0x2F	; 47
    3c58:	fe e1       	ldi	r31, 0x1E	; 30
    3c5a:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    3c5e:	69 83       	std	Y+1, r22	; 0x01
    3c60:	7a 83       	std	Y+2, r23	; 0x02
    3c62:	8b 83       	std	Y+3, r24	; 0x03
    3c64:	9c 83       	std	Y+4, r25	; 0x04
    3c66:	2d 83       	std	Y+5, r18	; 0x05
    3c68:	3e 83       	std	Y+6, r19	; 0x06
    3c6a:	4f 83       	std	Y+7, r20	; 0x07
    3c6c:	58 87       	std	Y+8, r21	; 0x08
    3c6e:	89 e0       	ldi	r24, 0x09	; 9
    3c70:	e8 2e       	mov	r14, r24
    3c72:	f1 2c       	mov	r15, r1
    3c74:	ec 0e       	add	r14, r28
    3c76:	fd 1e       	adc	r15, r29
    3c78:	ce 01       	movw	r24, r28
    3c7a:	01 96       	adiw	r24, 0x01	; 1
    3c7c:	b7 01       	movw	r22, r14
    3c7e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3c82:	8e 01       	movw	r16, r28
    3c84:	0f 5e       	subi	r16, 0xEF	; 239
    3c86:	1f 4f       	sbci	r17, 0xFF	; 255
    3c88:	ce 01       	movw	r24, r28
    3c8a:	05 96       	adiw	r24, 0x05	; 5
    3c8c:	b8 01       	movw	r22, r16
    3c8e:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3c92:	89 85       	ldd	r24, Y+9	; 0x09
    3c94:	82 30       	cpi	r24, 0x02	; 2
    3c96:	40 f0       	brcs	.+16     	; 0x3ca8 <__gesf2+0x56>
    3c98:	89 89       	ldd	r24, Y+17	; 0x11
    3c9a:	82 30       	cpi	r24, 0x02	; 2
    3c9c:	28 f0       	brcs	.+10     	; 0x3ca8 <__gesf2+0x56>
    3c9e:	c7 01       	movw	r24, r14
    3ca0:	b8 01       	movw	r22, r16
    3ca2:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__fpcmp_parts_f>
    3ca6:	01 c0       	rjmp	.+2      	; 0x3caa <__gesf2+0x58>
    3ca8:	8f ef       	ldi	r24, 0xFF	; 255
    3caa:	68 96       	adiw	r28, 0x18	; 24
    3cac:	e6 e0       	ldi	r30, 0x06	; 6
    3cae:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

00003cb2 <__ltsf2>:
    3cb2:	a8 e1       	ldi	r26, 0x18	; 24
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	ef e5       	ldi	r30, 0x5F	; 95
    3cb8:	fe e1       	ldi	r31, 0x1E	; 30
    3cba:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    3cbe:	69 83       	std	Y+1, r22	; 0x01
    3cc0:	7a 83       	std	Y+2, r23	; 0x02
    3cc2:	8b 83       	std	Y+3, r24	; 0x03
    3cc4:	9c 83       	std	Y+4, r25	; 0x04
    3cc6:	2d 83       	std	Y+5, r18	; 0x05
    3cc8:	3e 83       	std	Y+6, r19	; 0x06
    3cca:	4f 83       	std	Y+7, r20	; 0x07
    3ccc:	58 87       	std	Y+8, r21	; 0x08
    3cce:	89 e0       	ldi	r24, 0x09	; 9
    3cd0:	e8 2e       	mov	r14, r24
    3cd2:	f1 2c       	mov	r15, r1
    3cd4:	ec 0e       	add	r14, r28
    3cd6:	fd 1e       	adc	r15, r29
    3cd8:	ce 01       	movw	r24, r28
    3cda:	01 96       	adiw	r24, 0x01	; 1
    3cdc:	b7 01       	movw	r22, r14
    3cde:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3ce2:	8e 01       	movw	r16, r28
    3ce4:	0f 5e       	subi	r16, 0xEF	; 239
    3ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce8:	ce 01       	movw	r24, r28
    3cea:	05 96       	adiw	r24, 0x05	; 5
    3cec:	b8 01       	movw	r22, r16
    3cee:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3cf2:	89 85       	ldd	r24, Y+9	; 0x09
    3cf4:	82 30       	cpi	r24, 0x02	; 2
    3cf6:	40 f0       	brcs	.+16     	; 0x3d08 <__ltsf2+0x56>
    3cf8:	89 89       	ldd	r24, Y+17	; 0x11
    3cfa:	82 30       	cpi	r24, 0x02	; 2
    3cfc:	28 f0       	brcs	.+10     	; 0x3d08 <__ltsf2+0x56>
    3cfe:	c7 01       	movw	r24, r14
    3d00:	b8 01       	movw	r22, r16
    3d02:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__fpcmp_parts_f>
    3d06:	01 c0       	rjmp	.+2      	; 0x3d0a <__ltsf2+0x58>
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	68 96       	adiw	r28, 0x18	; 24
    3d0c:	e6 e0       	ldi	r30, 0x06	; 6
    3d0e:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

00003d12 <__fixsfsi>:
    3d12:	ac e0       	ldi	r26, 0x0C	; 12
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	ef e8       	ldi	r30, 0x8F	; 143
    3d18:	fe e1       	ldi	r31, 0x1E	; 30
    3d1a:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__prologue_saves__+0x20>
    3d1e:	69 83       	std	Y+1, r22	; 0x01
    3d20:	7a 83       	std	Y+2, r23	; 0x02
    3d22:	8b 83       	std	Y+3, r24	; 0x03
    3d24:	9c 83       	std	Y+4, r25	; 0x04
    3d26:	ce 01       	movw	r24, r28
    3d28:	01 96       	adiw	r24, 0x01	; 1
    3d2a:	be 01       	movw	r22, r28
    3d2c:	6b 5f       	subi	r22, 0xFB	; 251
    3d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d30:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <__unpack_f>
    3d34:	8d 81       	ldd	r24, Y+5	; 0x05
    3d36:	82 30       	cpi	r24, 0x02	; 2
    3d38:	61 f1       	breq	.+88     	; 0x3d92 <__fixsfsi+0x80>
    3d3a:	82 30       	cpi	r24, 0x02	; 2
    3d3c:	50 f1       	brcs	.+84     	; 0x3d92 <__fixsfsi+0x80>
    3d3e:	84 30       	cpi	r24, 0x04	; 4
    3d40:	21 f4       	brne	.+8      	; 0x3d4a <__fixsfsi+0x38>
    3d42:	8e 81       	ldd	r24, Y+6	; 0x06
    3d44:	88 23       	and	r24, r24
    3d46:	51 f1       	breq	.+84     	; 0x3d9c <__fixsfsi+0x8a>
    3d48:	2e c0       	rjmp	.+92     	; 0x3da6 <__fixsfsi+0x94>
    3d4a:	2f 81       	ldd	r18, Y+7	; 0x07
    3d4c:	38 85       	ldd	r19, Y+8	; 0x08
    3d4e:	37 fd       	sbrc	r19, 7
    3d50:	20 c0       	rjmp	.+64     	; 0x3d92 <__fixsfsi+0x80>
    3d52:	6e 81       	ldd	r22, Y+6	; 0x06
    3d54:	2f 31       	cpi	r18, 0x1F	; 31
    3d56:	31 05       	cpc	r19, r1
    3d58:	1c f0       	brlt	.+6      	; 0x3d60 <__fixsfsi+0x4e>
    3d5a:	66 23       	and	r22, r22
    3d5c:	f9 f0       	breq	.+62     	; 0x3d9c <__fixsfsi+0x8a>
    3d5e:	23 c0       	rjmp	.+70     	; 0x3da6 <__fixsfsi+0x94>
    3d60:	8e e1       	ldi	r24, 0x1E	; 30
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	82 1b       	sub	r24, r18
    3d66:	93 0b       	sbc	r25, r19
    3d68:	29 85       	ldd	r18, Y+9	; 0x09
    3d6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d6c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d6e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d70:	04 c0       	rjmp	.+8      	; 0x3d7a <__fixsfsi+0x68>
    3d72:	56 95       	lsr	r21
    3d74:	47 95       	ror	r20
    3d76:	37 95       	ror	r19
    3d78:	27 95       	ror	r18
    3d7a:	8a 95       	dec	r24
    3d7c:	d2 f7       	brpl	.-12     	; 0x3d72 <__fixsfsi+0x60>
    3d7e:	66 23       	and	r22, r22
    3d80:	b1 f0       	breq	.+44     	; 0x3dae <__fixsfsi+0x9c>
    3d82:	50 95       	com	r21
    3d84:	40 95       	com	r20
    3d86:	30 95       	com	r19
    3d88:	21 95       	neg	r18
    3d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8c:	4f 4f       	sbci	r20, 0xFF	; 255
    3d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d90:	0e c0       	rjmp	.+28     	; 0x3dae <__fixsfsi+0x9c>
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	09 c0       	rjmp	.+18     	; 0x3dae <__fixsfsi+0x9c>
    3d9c:	2f ef       	ldi	r18, 0xFF	; 255
    3d9e:	3f ef       	ldi	r19, 0xFF	; 255
    3da0:	4f ef       	ldi	r20, 0xFF	; 255
    3da2:	5f e7       	ldi	r21, 0x7F	; 127
    3da4:	04 c0       	rjmp	.+8      	; 0x3dae <__fixsfsi+0x9c>
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 e0       	ldi	r20, 0x00	; 0
    3dac:	50 e8       	ldi	r21, 0x80	; 128
    3dae:	b9 01       	movw	r22, r18
    3db0:	ca 01       	movw	r24, r20
    3db2:	2c 96       	adiw	r28, 0x0c	; 12
    3db4:	e2 e0       	ldi	r30, 0x02	; 2
    3db6:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__epilogue_restores__+0x20>

00003dba <__floatunsisf>:
    3dba:	a8 e0       	ldi	r26, 0x08	; 8
    3dbc:	b0 e0       	ldi	r27, 0x00	; 0
    3dbe:	e3 ee       	ldi	r30, 0xE3	; 227
    3dc0:	fe e1       	ldi	r31, 0x1E	; 30
    3dc2:	0c 94 67 21 	jmp	0x42ce	; 0x42ce <__prologue_saves__+0x10>
    3dc6:	7b 01       	movw	r14, r22
    3dc8:	8c 01       	movw	r16, r24
    3dca:	61 15       	cp	r22, r1
    3dcc:	71 05       	cpc	r23, r1
    3dce:	81 05       	cpc	r24, r1
    3dd0:	91 05       	cpc	r25, r1
    3dd2:	19 f4       	brne	.+6      	; 0x3dda <__floatunsisf+0x20>
    3dd4:	82 e0       	ldi	r24, 0x02	; 2
    3dd6:	89 83       	std	Y+1, r24	; 0x01
    3dd8:	60 c0       	rjmp	.+192    	; 0x3e9a <__floatunsisf+0xe0>
    3dda:	83 e0       	ldi	r24, 0x03	; 3
    3ddc:	89 83       	std	Y+1, r24	; 0x01
    3dde:	8e e1       	ldi	r24, 0x1E	; 30
    3de0:	c8 2e       	mov	r12, r24
    3de2:	d1 2c       	mov	r13, r1
    3de4:	dc 82       	std	Y+4, r13	; 0x04
    3de6:	cb 82       	std	Y+3, r12	; 0x03
    3de8:	ed 82       	std	Y+5, r14	; 0x05
    3dea:	fe 82       	std	Y+6, r15	; 0x06
    3dec:	0f 83       	std	Y+7, r16	; 0x07
    3dee:	18 87       	std	Y+8, r17	; 0x08
    3df0:	c8 01       	movw	r24, r16
    3df2:	b7 01       	movw	r22, r14
    3df4:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__clzsi2>
    3df8:	fc 01       	movw	r30, r24
    3dfa:	31 97       	sbiw	r30, 0x01	; 1
    3dfc:	f7 ff       	sbrs	r31, 7
    3dfe:	3b c0       	rjmp	.+118    	; 0x3e76 <__floatunsisf+0xbc>
    3e00:	22 27       	eor	r18, r18
    3e02:	33 27       	eor	r19, r19
    3e04:	2e 1b       	sub	r18, r30
    3e06:	3f 0b       	sbc	r19, r31
    3e08:	57 01       	movw	r10, r14
    3e0a:	68 01       	movw	r12, r16
    3e0c:	02 2e       	mov	r0, r18
    3e0e:	04 c0       	rjmp	.+8      	; 0x3e18 <__floatunsisf+0x5e>
    3e10:	d6 94       	lsr	r13
    3e12:	c7 94       	ror	r12
    3e14:	b7 94       	ror	r11
    3e16:	a7 94       	ror	r10
    3e18:	0a 94       	dec	r0
    3e1a:	d2 f7       	brpl	.-12     	; 0x3e10 <__floatunsisf+0x56>
    3e1c:	40 e0       	ldi	r20, 0x00	; 0
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	60 e0       	ldi	r22, 0x00	; 0
    3e22:	70 e0       	ldi	r23, 0x00	; 0
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	a0 e0       	ldi	r26, 0x00	; 0
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	04 c0       	rjmp	.+8      	; 0x3e36 <__floatunsisf+0x7c>
    3e2e:	88 0f       	add	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	aa 1f       	adc	r26, r26
    3e34:	bb 1f       	adc	r27, r27
    3e36:	2a 95       	dec	r18
    3e38:	d2 f7       	brpl	.-12     	; 0x3e2e <__floatunsisf+0x74>
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	a1 09       	sbc	r26, r1
    3e3e:	b1 09       	sbc	r27, r1
    3e40:	8e 21       	and	r24, r14
    3e42:	9f 21       	and	r25, r15
    3e44:	a0 23       	and	r26, r16
    3e46:	b1 23       	and	r27, r17
    3e48:	00 97       	sbiw	r24, 0x00	; 0
    3e4a:	a1 05       	cpc	r26, r1
    3e4c:	b1 05       	cpc	r27, r1
    3e4e:	21 f0       	breq	.+8      	; 0x3e58 <__floatunsisf+0x9e>
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	50 e0       	ldi	r21, 0x00	; 0
    3e54:	60 e0       	ldi	r22, 0x00	; 0
    3e56:	70 e0       	ldi	r23, 0x00	; 0
    3e58:	4a 29       	or	r20, r10
    3e5a:	5b 29       	or	r21, r11
    3e5c:	6c 29       	or	r22, r12
    3e5e:	7d 29       	or	r23, r13
    3e60:	4d 83       	std	Y+5, r20	; 0x05
    3e62:	5e 83       	std	Y+6, r21	; 0x06
    3e64:	6f 83       	std	Y+7, r22	; 0x07
    3e66:	78 87       	std	Y+8, r23	; 0x08
    3e68:	8e e1       	ldi	r24, 0x1E	; 30
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	8e 1b       	sub	r24, r30
    3e6e:	9f 0b       	sbc	r25, r31
    3e70:	9c 83       	std	Y+4, r25	; 0x04
    3e72:	8b 83       	std	Y+3, r24	; 0x03
    3e74:	12 c0       	rjmp	.+36     	; 0x3e9a <__floatunsisf+0xe0>
    3e76:	30 97       	sbiw	r30, 0x00	; 0
    3e78:	81 f0       	breq	.+32     	; 0x3e9a <__floatunsisf+0xe0>
    3e7a:	0e 2e       	mov	r0, r30
    3e7c:	04 c0       	rjmp	.+8      	; 0x3e86 <__floatunsisf+0xcc>
    3e7e:	ee 0c       	add	r14, r14
    3e80:	ff 1c       	adc	r15, r15
    3e82:	00 1f       	adc	r16, r16
    3e84:	11 1f       	adc	r17, r17
    3e86:	0a 94       	dec	r0
    3e88:	d2 f7       	brpl	.-12     	; 0x3e7e <__floatunsisf+0xc4>
    3e8a:	ed 82       	std	Y+5, r14	; 0x05
    3e8c:	fe 82       	std	Y+6, r15	; 0x06
    3e8e:	0f 83       	std	Y+7, r16	; 0x07
    3e90:	18 87       	std	Y+8, r17	; 0x08
    3e92:	ce 1a       	sub	r12, r30
    3e94:	df 0a       	sbc	r13, r31
    3e96:	dc 82       	std	Y+4, r13	; 0x04
    3e98:	cb 82       	std	Y+3, r12	; 0x03
    3e9a:	1a 82       	std	Y+2, r1	; 0x02
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	01 96       	adiw	r24, 0x01	; 1
    3ea0:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <__pack_f>
    3ea4:	28 96       	adiw	r28, 0x08	; 8
    3ea6:	ea e0       	ldi	r30, 0x0A	; 10
    3ea8:	0c 94 83 21 	jmp	0x4306	; 0x4306 <__epilogue_restores__+0x10>

00003eac <__clzsi2>:
    3eac:	ef 92       	push	r14
    3eae:	ff 92       	push	r15
    3eb0:	0f 93       	push	r16
    3eb2:	1f 93       	push	r17
    3eb4:	7b 01       	movw	r14, r22
    3eb6:	8c 01       	movw	r16, r24
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	e8 16       	cp	r14, r24
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	f8 06       	cpc	r15, r24
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	08 07       	cpc	r16, r24
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	18 07       	cpc	r17, r24
    3ec8:	88 f4       	brcc	.+34     	; 0x3eec <__clzsi2+0x40>
    3eca:	8f ef       	ldi	r24, 0xFF	; 255
    3ecc:	e8 16       	cp	r14, r24
    3ece:	f1 04       	cpc	r15, r1
    3ed0:	01 05       	cpc	r16, r1
    3ed2:	11 05       	cpc	r17, r1
    3ed4:	31 f0       	breq	.+12     	; 0x3ee2 <__clzsi2+0x36>
    3ed6:	28 f0       	brcs	.+10     	; 0x3ee2 <__clzsi2+0x36>
    3ed8:	88 e0       	ldi	r24, 0x08	; 8
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	a0 e0       	ldi	r26, 0x00	; 0
    3ede:	b0 e0       	ldi	r27, 0x00	; 0
    3ee0:	17 c0       	rjmp	.+46     	; 0x3f10 <__clzsi2+0x64>
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	a0 e0       	ldi	r26, 0x00	; 0
    3ee8:	b0 e0       	ldi	r27, 0x00	; 0
    3eea:	12 c0       	rjmp	.+36     	; 0x3f10 <__clzsi2+0x64>
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	e8 16       	cp	r14, r24
    3ef0:	80 e0       	ldi	r24, 0x00	; 0
    3ef2:	f8 06       	cpc	r15, r24
    3ef4:	80 e0       	ldi	r24, 0x00	; 0
    3ef6:	08 07       	cpc	r16, r24
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	18 07       	cpc	r17, r24
    3efc:	28 f0       	brcs	.+10     	; 0x3f08 <__clzsi2+0x5c>
    3efe:	88 e1       	ldi	r24, 0x18	; 24
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	a0 e0       	ldi	r26, 0x00	; 0
    3f04:	b0 e0       	ldi	r27, 0x00	; 0
    3f06:	04 c0       	rjmp	.+8      	; 0x3f10 <__clzsi2+0x64>
    3f08:	80 e1       	ldi	r24, 0x10	; 16
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a0 e0       	ldi	r26, 0x00	; 0
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	20 e2       	ldi	r18, 0x20	; 32
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e0       	ldi	r20, 0x00	; 0
    3f16:	50 e0       	ldi	r21, 0x00	; 0
    3f18:	28 1b       	sub	r18, r24
    3f1a:	39 0b       	sbc	r19, r25
    3f1c:	4a 0b       	sbc	r20, r26
    3f1e:	5b 0b       	sbc	r21, r27
    3f20:	04 c0       	rjmp	.+8      	; 0x3f2a <__clzsi2+0x7e>
    3f22:	16 95       	lsr	r17
    3f24:	07 95       	ror	r16
    3f26:	f7 94       	ror	r15
    3f28:	e7 94       	ror	r14
    3f2a:	8a 95       	dec	r24
    3f2c:	d2 f7       	brpl	.-12     	; 0x3f22 <__clzsi2+0x76>
    3f2e:	f7 01       	movw	r30, r14
    3f30:	e8 53       	subi	r30, 0x38	; 56
    3f32:	fd 4f       	sbci	r31, 0xFD	; 253
    3f34:	80 81       	ld	r24, Z
    3f36:	28 1b       	sub	r18, r24
    3f38:	31 09       	sbc	r19, r1
    3f3a:	41 09       	sbc	r20, r1
    3f3c:	51 09       	sbc	r21, r1
    3f3e:	c9 01       	movw	r24, r18
    3f40:	1f 91       	pop	r17
    3f42:	0f 91       	pop	r16
    3f44:	ff 90       	pop	r15
    3f46:	ef 90       	pop	r14
    3f48:	08 95       	ret

00003f4a <__pack_f>:
    3f4a:	df 92       	push	r13
    3f4c:	ef 92       	push	r14
    3f4e:	ff 92       	push	r15
    3f50:	0f 93       	push	r16
    3f52:	1f 93       	push	r17
    3f54:	fc 01       	movw	r30, r24
    3f56:	e4 80       	ldd	r14, Z+4	; 0x04
    3f58:	f5 80       	ldd	r15, Z+5	; 0x05
    3f5a:	06 81       	ldd	r16, Z+6	; 0x06
    3f5c:	17 81       	ldd	r17, Z+7	; 0x07
    3f5e:	d1 80       	ldd	r13, Z+1	; 0x01
    3f60:	80 81       	ld	r24, Z
    3f62:	82 30       	cpi	r24, 0x02	; 2
    3f64:	48 f4       	brcc	.+18     	; 0x3f78 <__pack_f+0x2e>
    3f66:	80 e0       	ldi	r24, 0x00	; 0
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	a0 e1       	ldi	r26, 0x10	; 16
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	e8 2a       	or	r14, r24
    3f70:	f9 2a       	or	r15, r25
    3f72:	0a 2b       	or	r16, r26
    3f74:	1b 2b       	or	r17, r27
    3f76:	a5 c0       	rjmp	.+330    	; 0x40c2 <__pack_f+0x178>
    3f78:	84 30       	cpi	r24, 0x04	; 4
    3f7a:	09 f4       	brne	.+2      	; 0x3f7e <__pack_f+0x34>
    3f7c:	9f c0       	rjmp	.+318    	; 0x40bc <__pack_f+0x172>
    3f7e:	82 30       	cpi	r24, 0x02	; 2
    3f80:	21 f4       	brne	.+8      	; 0x3f8a <__pack_f+0x40>
    3f82:	ee 24       	eor	r14, r14
    3f84:	ff 24       	eor	r15, r15
    3f86:	87 01       	movw	r16, r14
    3f88:	05 c0       	rjmp	.+10     	; 0x3f94 <__pack_f+0x4a>
    3f8a:	e1 14       	cp	r14, r1
    3f8c:	f1 04       	cpc	r15, r1
    3f8e:	01 05       	cpc	r16, r1
    3f90:	11 05       	cpc	r17, r1
    3f92:	19 f4       	brne	.+6      	; 0x3f9a <__pack_f+0x50>
    3f94:	e0 e0       	ldi	r30, 0x00	; 0
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	96 c0       	rjmp	.+300    	; 0x40c6 <__pack_f+0x17c>
    3f9a:	62 81       	ldd	r22, Z+2	; 0x02
    3f9c:	73 81       	ldd	r23, Z+3	; 0x03
    3f9e:	9f ef       	ldi	r25, 0xFF	; 255
    3fa0:	62 38       	cpi	r22, 0x82	; 130
    3fa2:	79 07       	cpc	r23, r25
    3fa4:	0c f0       	brlt	.+2      	; 0x3fa8 <__pack_f+0x5e>
    3fa6:	5b c0       	rjmp	.+182    	; 0x405e <__pack_f+0x114>
    3fa8:	22 e8       	ldi	r18, 0x82	; 130
    3faa:	3f ef       	ldi	r19, 0xFF	; 255
    3fac:	26 1b       	sub	r18, r22
    3fae:	37 0b       	sbc	r19, r23
    3fb0:	2a 31       	cpi	r18, 0x1A	; 26
    3fb2:	31 05       	cpc	r19, r1
    3fb4:	2c f0       	brlt	.+10     	; 0x3fc0 <__pack_f+0x76>
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	50 e0       	ldi	r21, 0x00	; 0
    3fbe:	2a c0       	rjmp	.+84     	; 0x4014 <__pack_f+0xca>
    3fc0:	b8 01       	movw	r22, r16
    3fc2:	a7 01       	movw	r20, r14
    3fc4:	02 2e       	mov	r0, r18
    3fc6:	04 c0       	rjmp	.+8      	; 0x3fd0 <__pack_f+0x86>
    3fc8:	76 95       	lsr	r23
    3fca:	67 95       	ror	r22
    3fcc:	57 95       	ror	r21
    3fce:	47 95       	ror	r20
    3fd0:	0a 94       	dec	r0
    3fd2:	d2 f7       	brpl	.-12     	; 0x3fc8 <__pack_f+0x7e>
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	a0 e0       	ldi	r26, 0x00	; 0
    3fda:	b0 e0       	ldi	r27, 0x00	; 0
    3fdc:	04 c0       	rjmp	.+8      	; 0x3fe6 <__pack_f+0x9c>
    3fde:	88 0f       	add	r24, r24
    3fe0:	99 1f       	adc	r25, r25
    3fe2:	aa 1f       	adc	r26, r26
    3fe4:	bb 1f       	adc	r27, r27
    3fe6:	2a 95       	dec	r18
    3fe8:	d2 f7       	brpl	.-12     	; 0x3fde <__pack_f+0x94>
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	a1 09       	sbc	r26, r1
    3fee:	b1 09       	sbc	r27, r1
    3ff0:	8e 21       	and	r24, r14
    3ff2:	9f 21       	and	r25, r15
    3ff4:	a0 23       	and	r26, r16
    3ff6:	b1 23       	and	r27, r17
    3ff8:	00 97       	sbiw	r24, 0x00	; 0
    3ffa:	a1 05       	cpc	r26, r1
    3ffc:	b1 05       	cpc	r27, r1
    3ffe:	21 f0       	breq	.+8      	; 0x4008 <__pack_f+0xbe>
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	a0 e0       	ldi	r26, 0x00	; 0
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	9a 01       	movw	r18, r20
    400a:	ab 01       	movw	r20, r22
    400c:	28 2b       	or	r18, r24
    400e:	39 2b       	or	r19, r25
    4010:	4a 2b       	or	r20, r26
    4012:	5b 2b       	or	r21, r27
    4014:	da 01       	movw	r26, r20
    4016:	c9 01       	movw	r24, r18
    4018:	8f 77       	andi	r24, 0x7F	; 127
    401a:	90 70       	andi	r25, 0x00	; 0
    401c:	a0 70       	andi	r26, 0x00	; 0
    401e:	b0 70       	andi	r27, 0x00	; 0
    4020:	80 34       	cpi	r24, 0x40	; 64
    4022:	91 05       	cpc	r25, r1
    4024:	a1 05       	cpc	r26, r1
    4026:	b1 05       	cpc	r27, r1
    4028:	39 f4       	brne	.+14     	; 0x4038 <__pack_f+0xee>
    402a:	27 ff       	sbrs	r18, 7
    402c:	09 c0       	rjmp	.+18     	; 0x4040 <__pack_f+0xf6>
    402e:	20 5c       	subi	r18, 0xC0	; 192
    4030:	3f 4f       	sbci	r19, 0xFF	; 255
    4032:	4f 4f       	sbci	r20, 0xFF	; 255
    4034:	5f 4f       	sbci	r21, 0xFF	; 255
    4036:	04 c0       	rjmp	.+8      	; 0x4040 <__pack_f+0xf6>
    4038:	21 5c       	subi	r18, 0xC1	; 193
    403a:	3f 4f       	sbci	r19, 0xFF	; 255
    403c:	4f 4f       	sbci	r20, 0xFF	; 255
    403e:	5f 4f       	sbci	r21, 0xFF	; 255
    4040:	e0 e0       	ldi	r30, 0x00	; 0
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	20 30       	cpi	r18, 0x00	; 0
    4046:	a0 e0       	ldi	r26, 0x00	; 0
    4048:	3a 07       	cpc	r19, r26
    404a:	a0 e0       	ldi	r26, 0x00	; 0
    404c:	4a 07       	cpc	r20, r26
    404e:	a0 e4       	ldi	r26, 0x40	; 64
    4050:	5a 07       	cpc	r21, r26
    4052:	10 f0       	brcs	.+4      	; 0x4058 <__pack_f+0x10e>
    4054:	e1 e0       	ldi	r30, 0x01	; 1
    4056:	f0 e0       	ldi	r31, 0x00	; 0
    4058:	79 01       	movw	r14, r18
    405a:	8a 01       	movw	r16, r20
    405c:	27 c0       	rjmp	.+78     	; 0x40ac <__pack_f+0x162>
    405e:	60 38       	cpi	r22, 0x80	; 128
    4060:	71 05       	cpc	r23, r1
    4062:	64 f5       	brge	.+88     	; 0x40bc <__pack_f+0x172>
    4064:	fb 01       	movw	r30, r22
    4066:	e1 58       	subi	r30, 0x81	; 129
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	d8 01       	movw	r26, r16
    406c:	c7 01       	movw	r24, r14
    406e:	8f 77       	andi	r24, 0x7F	; 127
    4070:	90 70       	andi	r25, 0x00	; 0
    4072:	a0 70       	andi	r26, 0x00	; 0
    4074:	b0 70       	andi	r27, 0x00	; 0
    4076:	80 34       	cpi	r24, 0x40	; 64
    4078:	91 05       	cpc	r25, r1
    407a:	a1 05       	cpc	r26, r1
    407c:	b1 05       	cpc	r27, r1
    407e:	39 f4       	brne	.+14     	; 0x408e <__pack_f+0x144>
    4080:	e7 fe       	sbrs	r14, 7
    4082:	0d c0       	rjmp	.+26     	; 0x409e <__pack_f+0x154>
    4084:	80 e4       	ldi	r24, 0x40	; 64
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	a0 e0       	ldi	r26, 0x00	; 0
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	04 c0       	rjmp	.+8      	; 0x4096 <__pack_f+0x14c>
    408e:	8f e3       	ldi	r24, 0x3F	; 63
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	a0 e0       	ldi	r26, 0x00	; 0
    4094:	b0 e0       	ldi	r27, 0x00	; 0
    4096:	e8 0e       	add	r14, r24
    4098:	f9 1e       	adc	r15, r25
    409a:	0a 1f       	adc	r16, r26
    409c:	1b 1f       	adc	r17, r27
    409e:	17 ff       	sbrs	r17, 7
    40a0:	05 c0       	rjmp	.+10     	; 0x40ac <__pack_f+0x162>
    40a2:	16 95       	lsr	r17
    40a4:	07 95       	ror	r16
    40a6:	f7 94       	ror	r15
    40a8:	e7 94       	ror	r14
    40aa:	31 96       	adiw	r30, 0x01	; 1
    40ac:	87 e0       	ldi	r24, 0x07	; 7
    40ae:	16 95       	lsr	r17
    40b0:	07 95       	ror	r16
    40b2:	f7 94       	ror	r15
    40b4:	e7 94       	ror	r14
    40b6:	8a 95       	dec	r24
    40b8:	d1 f7       	brne	.-12     	; 0x40ae <__pack_f+0x164>
    40ba:	05 c0       	rjmp	.+10     	; 0x40c6 <__pack_f+0x17c>
    40bc:	ee 24       	eor	r14, r14
    40be:	ff 24       	eor	r15, r15
    40c0:	87 01       	movw	r16, r14
    40c2:	ef ef       	ldi	r30, 0xFF	; 255
    40c4:	f0 e0       	ldi	r31, 0x00	; 0
    40c6:	6e 2f       	mov	r22, r30
    40c8:	67 95       	ror	r22
    40ca:	66 27       	eor	r22, r22
    40cc:	67 95       	ror	r22
    40ce:	90 2f       	mov	r25, r16
    40d0:	9f 77       	andi	r25, 0x7F	; 127
    40d2:	d7 94       	ror	r13
    40d4:	dd 24       	eor	r13, r13
    40d6:	d7 94       	ror	r13
    40d8:	8e 2f       	mov	r24, r30
    40da:	86 95       	lsr	r24
    40dc:	49 2f       	mov	r20, r25
    40de:	46 2b       	or	r20, r22
    40e0:	58 2f       	mov	r21, r24
    40e2:	5d 29       	or	r21, r13
    40e4:	b7 01       	movw	r22, r14
    40e6:	ca 01       	movw	r24, r20
    40e8:	1f 91       	pop	r17
    40ea:	0f 91       	pop	r16
    40ec:	ff 90       	pop	r15
    40ee:	ef 90       	pop	r14
    40f0:	df 90       	pop	r13
    40f2:	08 95       	ret

000040f4 <__unpack_f>:
    40f4:	fc 01       	movw	r30, r24
    40f6:	db 01       	movw	r26, r22
    40f8:	40 81       	ld	r20, Z
    40fa:	51 81       	ldd	r21, Z+1	; 0x01
    40fc:	22 81       	ldd	r18, Z+2	; 0x02
    40fe:	62 2f       	mov	r22, r18
    4100:	6f 77       	andi	r22, 0x7F	; 127
    4102:	70 e0       	ldi	r23, 0x00	; 0
    4104:	22 1f       	adc	r18, r18
    4106:	22 27       	eor	r18, r18
    4108:	22 1f       	adc	r18, r18
    410a:	93 81       	ldd	r25, Z+3	; 0x03
    410c:	89 2f       	mov	r24, r25
    410e:	88 0f       	add	r24, r24
    4110:	82 2b       	or	r24, r18
    4112:	28 2f       	mov	r18, r24
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	99 1f       	adc	r25, r25
    4118:	99 27       	eor	r25, r25
    411a:	99 1f       	adc	r25, r25
    411c:	11 96       	adiw	r26, 0x01	; 1
    411e:	9c 93       	st	X, r25
    4120:	11 97       	sbiw	r26, 0x01	; 1
    4122:	21 15       	cp	r18, r1
    4124:	31 05       	cpc	r19, r1
    4126:	a9 f5       	brne	.+106    	; 0x4192 <__unpack_f+0x9e>
    4128:	41 15       	cp	r20, r1
    412a:	51 05       	cpc	r21, r1
    412c:	61 05       	cpc	r22, r1
    412e:	71 05       	cpc	r23, r1
    4130:	11 f4       	brne	.+4      	; 0x4136 <__unpack_f+0x42>
    4132:	82 e0       	ldi	r24, 0x02	; 2
    4134:	37 c0       	rjmp	.+110    	; 0x41a4 <__unpack_f+0xb0>
    4136:	82 e8       	ldi	r24, 0x82	; 130
    4138:	9f ef       	ldi	r25, 0xFF	; 255
    413a:	13 96       	adiw	r26, 0x03	; 3
    413c:	9c 93       	st	X, r25
    413e:	8e 93       	st	-X, r24
    4140:	12 97       	sbiw	r26, 0x02	; 2
    4142:	9a 01       	movw	r18, r20
    4144:	ab 01       	movw	r20, r22
    4146:	67 e0       	ldi	r22, 0x07	; 7
    4148:	22 0f       	add	r18, r18
    414a:	33 1f       	adc	r19, r19
    414c:	44 1f       	adc	r20, r20
    414e:	55 1f       	adc	r21, r21
    4150:	6a 95       	dec	r22
    4152:	d1 f7       	brne	.-12     	; 0x4148 <__unpack_f+0x54>
    4154:	83 e0       	ldi	r24, 0x03	; 3
    4156:	8c 93       	st	X, r24
    4158:	0d c0       	rjmp	.+26     	; 0x4174 <__unpack_f+0x80>
    415a:	22 0f       	add	r18, r18
    415c:	33 1f       	adc	r19, r19
    415e:	44 1f       	adc	r20, r20
    4160:	55 1f       	adc	r21, r21
    4162:	12 96       	adiw	r26, 0x02	; 2
    4164:	8d 91       	ld	r24, X+
    4166:	9c 91       	ld	r25, X
    4168:	13 97       	sbiw	r26, 0x03	; 3
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	13 96       	adiw	r26, 0x03	; 3
    416e:	9c 93       	st	X, r25
    4170:	8e 93       	st	-X, r24
    4172:	12 97       	sbiw	r26, 0x02	; 2
    4174:	20 30       	cpi	r18, 0x00	; 0
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	38 07       	cpc	r19, r24
    417a:	80 e0       	ldi	r24, 0x00	; 0
    417c:	48 07       	cpc	r20, r24
    417e:	80 e4       	ldi	r24, 0x40	; 64
    4180:	58 07       	cpc	r21, r24
    4182:	58 f3       	brcs	.-42     	; 0x415a <__unpack_f+0x66>
    4184:	14 96       	adiw	r26, 0x04	; 4
    4186:	2d 93       	st	X+, r18
    4188:	3d 93       	st	X+, r19
    418a:	4d 93       	st	X+, r20
    418c:	5c 93       	st	X, r21
    418e:	17 97       	sbiw	r26, 0x07	; 7
    4190:	08 95       	ret
    4192:	2f 3f       	cpi	r18, 0xFF	; 255
    4194:	31 05       	cpc	r19, r1
    4196:	79 f4       	brne	.+30     	; 0x41b6 <__unpack_f+0xc2>
    4198:	41 15       	cp	r20, r1
    419a:	51 05       	cpc	r21, r1
    419c:	61 05       	cpc	r22, r1
    419e:	71 05       	cpc	r23, r1
    41a0:	19 f4       	brne	.+6      	; 0x41a8 <__unpack_f+0xb4>
    41a2:	84 e0       	ldi	r24, 0x04	; 4
    41a4:	8c 93       	st	X, r24
    41a6:	08 95       	ret
    41a8:	64 ff       	sbrs	r22, 4
    41aa:	03 c0       	rjmp	.+6      	; 0x41b2 <__unpack_f+0xbe>
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	8c 93       	st	X, r24
    41b0:	12 c0       	rjmp	.+36     	; 0x41d6 <__unpack_f+0xe2>
    41b2:	1c 92       	st	X, r1
    41b4:	10 c0       	rjmp	.+32     	; 0x41d6 <__unpack_f+0xe2>
    41b6:	2f 57       	subi	r18, 0x7F	; 127
    41b8:	30 40       	sbci	r19, 0x00	; 0
    41ba:	13 96       	adiw	r26, 0x03	; 3
    41bc:	3c 93       	st	X, r19
    41be:	2e 93       	st	-X, r18
    41c0:	12 97       	sbiw	r26, 0x02	; 2
    41c2:	83 e0       	ldi	r24, 0x03	; 3
    41c4:	8c 93       	st	X, r24
    41c6:	87 e0       	ldi	r24, 0x07	; 7
    41c8:	44 0f       	add	r20, r20
    41ca:	55 1f       	adc	r21, r21
    41cc:	66 1f       	adc	r22, r22
    41ce:	77 1f       	adc	r23, r23
    41d0:	8a 95       	dec	r24
    41d2:	d1 f7       	brne	.-12     	; 0x41c8 <__unpack_f+0xd4>
    41d4:	70 64       	ori	r23, 0x40	; 64
    41d6:	14 96       	adiw	r26, 0x04	; 4
    41d8:	4d 93       	st	X+, r20
    41da:	5d 93       	st	X+, r21
    41dc:	6d 93       	st	X+, r22
    41de:	7c 93       	st	X, r23
    41e0:	17 97       	sbiw	r26, 0x07	; 7
    41e2:	08 95       	ret

000041e4 <__fpcmp_parts_f>:
    41e4:	1f 93       	push	r17
    41e6:	dc 01       	movw	r26, r24
    41e8:	fb 01       	movw	r30, r22
    41ea:	9c 91       	ld	r25, X
    41ec:	92 30       	cpi	r25, 0x02	; 2
    41ee:	08 f4       	brcc	.+2      	; 0x41f2 <__fpcmp_parts_f+0xe>
    41f0:	47 c0       	rjmp	.+142    	; 0x4280 <__fpcmp_parts_f+0x9c>
    41f2:	80 81       	ld	r24, Z
    41f4:	82 30       	cpi	r24, 0x02	; 2
    41f6:	08 f4       	brcc	.+2      	; 0x41fa <__fpcmp_parts_f+0x16>
    41f8:	43 c0       	rjmp	.+134    	; 0x4280 <__fpcmp_parts_f+0x9c>
    41fa:	94 30       	cpi	r25, 0x04	; 4
    41fc:	51 f4       	brne	.+20     	; 0x4212 <__fpcmp_parts_f+0x2e>
    41fe:	11 96       	adiw	r26, 0x01	; 1
    4200:	1c 91       	ld	r17, X
    4202:	84 30       	cpi	r24, 0x04	; 4
    4204:	99 f5       	brne	.+102    	; 0x426c <__fpcmp_parts_f+0x88>
    4206:	81 81       	ldd	r24, Z+1	; 0x01
    4208:	68 2f       	mov	r22, r24
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	61 1b       	sub	r22, r17
    420e:	71 09       	sbc	r23, r1
    4210:	3f c0       	rjmp	.+126    	; 0x4290 <__fpcmp_parts_f+0xac>
    4212:	84 30       	cpi	r24, 0x04	; 4
    4214:	21 f0       	breq	.+8      	; 0x421e <__fpcmp_parts_f+0x3a>
    4216:	92 30       	cpi	r25, 0x02	; 2
    4218:	31 f4       	brne	.+12     	; 0x4226 <__fpcmp_parts_f+0x42>
    421a:	82 30       	cpi	r24, 0x02	; 2
    421c:	b9 f1       	breq	.+110    	; 0x428c <__fpcmp_parts_f+0xa8>
    421e:	81 81       	ldd	r24, Z+1	; 0x01
    4220:	88 23       	and	r24, r24
    4222:	89 f1       	breq	.+98     	; 0x4286 <__fpcmp_parts_f+0xa2>
    4224:	2d c0       	rjmp	.+90     	; 0x4280 <__fpcmp_parts_f+0x9c>
    4226:	11 96       	adiw	r26, 0x01	; 1
    4228:	1c 91       	ld	r17, X
    422a:	11 97       	sbiw	r26, 0x01	; 1
    422c:	82 30       	cpi	r24, 0x02	; 2
    422e:	f1 f0       	breq	.+60     	; 0x426c <__fpcmp_parts_f+0x88>
    4230:	81 81       	ldd	r24, Z+1	; 0x01
    4232:	18 17       	cp	r17, r24
    4234:	d9 f4       	brne	.+54     	; 0x426c <__fpcmp_parts_f+0x88>
    4236:	12 96       	adiw	r26, 0x02	; 2
    4238:	2d 91       	ld	r18, X+
    423a:	3c 91       	ld	r19, X
    423c:	13 97       	sbiw	r26, 0x03	; 3
    423e:	82 81       	ldd	r24, Z+2	; 0x02
    4240:	93 81       	ldd	r25, Z+3	; 0x03
    4242:	82 17       	cp	r24, r18
    4244:	93 07       	cpc	r25, r19
    4246:	94 f0       	brlt	.+36     	; 0x426c <__fpcmp_parts_f+0x88>
    4248:	28 17       	cp	r18, r24
    424a:	39 07       	cpc	r19, r25
    424c:	bc f0       	brlt	.+46     	; 0x427c <__fpcmp_parts_f+0x98>
    424e:	14 96       	adiw	r26, 0x04	; 4
    4250:	8d 91       	ld	r24, X+
    4252:	9d 91       	ld	r25, X+
    4254:	0d 90       	ld	r0, X+
    4256:	bc 91       	ld	r27, X
    4258:	a0 2d       	mov	r26, r0
    425a:	24 81       	ldd	r18, Z+4	; 0x04
    425c:	35 81       	ldd	r19, Z+5	; 0x05
    425e:	46 81       	ldd	r20, Z+6	; 0x06
    4260:	57 81       	ldd	r21, Z+7	; 0x07
    4262:	28 17       	cp	r18, r24
    4264:	39 07       	cpc	r19, r25
    4266:	4a 07       	cpc	r20, r26
    4268:	5b 07       	cpc	r21, r27
    426a:	18 f4       	brcc	.+6      	; 0x4272 <__fpcmp_parts_f+0x8e>
    426c:	11 23       	and	r17, r17
    426e:	41 f0       	breq	.+16     	; 0x4280 <__fpcmp_parts_f+0x9c>
    4270:	0a c0       	rjmp	.+20     	; 0x4286 <__fpcmp_parts_f+0xa2>
    4272:	82 17       	cp	r24, r18
    4274:	93 07       	cpc	r25, r19
    4276:	a4 07       	cpc	r26, r20
    4278:	b5 07       	cpc	r27, r21
    427a:	40 f4       	brcc	.+16     	; 0x428c <__fpcmp_parts_f+0xa8>
    427c:	11 23       	and	r17, r17
    427e:	19 f0       	breq	.+6      	; 0x4286 <__fpcmp_parts_f+0xa2>
    4280:	61 e0       	ldi	r22, 0x01	; 1
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	05 c0       	rjmp	.+10     	; 0x4290 <__fpcmp_parts_f+0xac>
    4286:	6f ef       	ldi	r22, 0xFF	; 255
    4288:	7f ef       	ldi	r23, 0xFF	; 255
    428a:	02 c0       	rjmp	.+4      	; 0x4290 <__fpcmp_parts_f+0xac>
    428c:	60 e0       	ldi	r22, 0x00	; 0
    428e:	70 e0       	ldi	r23, 0x00	; 0
    4290:	cb 01       	movw	r24, r22
    4292:	1f 91       	pop	r17
    4294:	08 95       	ret

00004296 <__udivmodhi4>:
    4296:	aa 1b       	sub	r26, r26
    4298:	bb 1b       	sub	r27, r27
    429a:	51 e1       	ldi	r21, 0x11	; 17
    429c:	07 c0       	rjmp	.+14     	; 0x42ac <__udivmodhi4_ep>

0000429e <__udivmodhi4_loop>:
    429e:	aa 1f       	adc	r26, r26
    42a0:	bb 1f       	adc	r27, r27
    42a2:	a6 17       	cp	r26, r22
    42a4:	b7 07       	cpc	r27, r23
    42a6:	10 f0       	brcs	.+4      	; 0x42ac <__udivmodhi4_ep>
    42a8:	a6 1b       	sub	r26, r22
    42aa:	b7 0b       	sbc	r27, r23

000042ac <__udivmodhi4_ep>:
    42ac:	88 1f       	adc	r24, r24
    42ae:	99 1f       	adc	r25, r25
    42b0:	5a 95       	dec	r21
    42b2:	a9 f7       	brne	.-22     	; 0x429e <__udivmodhi4_loop>
    42b4:	80 95       	com	r24
    42b6:	90 95       	com	r25
    42b8:	bc 01       	movw	r22, r24
    42ba:	cd 01       	movw	r24, r26
    42bc:	08 95       	ret

000042be <__prologue_saves__>:
    42be:	2f 92       	push	r2
    42c0:	3f 92       	push	r3
    42c2:	4f 92       	push	r4
    42c4:	5f 92       	push	r5
    42c6:	6f 92       	push	r6
    42c8:	7f 92       	push	r7
    42ca:	8f 92       	push	r8
    42cc:	9f 92       	push	r9
    42ce:	af 92       	push	r10
    42d0:	bf 92       	push	r11
    42d2:	cf 92       	push	r12
    42d4:	df 92       	push	r13
    42d6:	ef 92       	push	r14
    42d8:	ff 92       	push	r15
    42da:	0f 93       	push	r16
    42dc:	1f 93       	push	r17
    42de:	cf 93       	push	r28
    42e0:	df 93       	push	r29
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	ca 1b       	sub	r28, r26
    42e8:	db 0b       	sbc	r29, r27
    42ea:	0f b6       	in	r0, 0x3f	; 63
    42ec:	f8 94       	cli
    42ee:	de bf       	out	0x3e, r29	; 62
    42f0:	0f be       	out	0x3f, r0	; 63
    42f2:	cd bf       	out	0x3d, r28	; 61
    42f4:	19 94       	eijmp

000042f6 <__epilogue_restores__>:
    42f6:	2a 88       	ldd	r2, Y+18	; 0x12
    42f8:	39 88       	ldd	r3, Y+17	; 0x11
    42fa:	48 88       	ldd	r4, Y+16	; 0x10
    42fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    42fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    4300:	7d 84       	ldd	r7, Y+13	; 0x0d
    4302:	8c 84       	ldd	r8, Y+12	; 0x0c
    4304:	9b 84       	ldd	r9, Y+11	; 0x0b
    4306:	aa 84       	ldd	r10, Y+10	; 0x0a
    4308:	b9 84       	ldd	r11, Y+9	; 0x09
    430a:	c8 84       	ldd	r12, Y+8	; 0x08
    430c:	df 80       	ldd	r13, Y+7	; 0x07
    430e:	ee 80       	ldd	r14, Y+6	; 0x06
    4310:	fd 80       	ldd	r15, Y+5	; 0x05
    4312:	0c 81       	ldd	r16, Y+4	; 0x04
    4314:	1b 81       	ldd	r17, Y+3	; 0x03
    4316:	aa 81       	ldd	r26, Y+2	; 0x02
    4318:	b9 81       	ldd	r27, Y+1	; 0x01
    431a:	ce 0f       	add	r28, r30
    431c:	d1 1d       	adc	r29, r1
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	cd bf       	out	0x3d, r28	; 61
    4328:	ed 01       	movw	r28, r26
    432a:	08 95       	ret

0000432c <_exit>:
    432c:	f8 94       	cli

0000432e <__stop_program>:
    432e:	ff cf       	rjmp	.-2      	; 0x432e <__stop_program>

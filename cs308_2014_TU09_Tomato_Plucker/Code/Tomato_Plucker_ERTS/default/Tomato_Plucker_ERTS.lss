
Tomato_Plucker_ERTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800200  00006fc6  0000705a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006fc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080030e  0080030e  00007168  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00007168  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000574  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ca8  00000000  00000000  000076fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024f  00000000  00000000  000093a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002aaf  00000000  00000000  000095f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000390  00000000  00000000  0000c0a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056d  00000000  00000000  0000c434  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 a9 25 	jmp	0x4b52	; 0x4b52 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ec       	ldi	r30, 0xC6	; 198
      fc:	ff e6       	ldi	r31, 0x6F	; 111
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 30       	cpi	r26, 0x0E	; 14
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	ae e0       	ldi	r26, 0x0E	; 14
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 34       	cpi	r26, 0x4B	; 75
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 ad 30 	call	0x615a	; 0x615a <main>
     122:	0c 94 e1 37 	jmp	0x6fc2	; 0x6fc2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <servo1_pin_config>:
int MAX_X = 640;
int MAX_Y = 480;
unsigned char initial_angle;
//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     132:	a4 e2       	ldi	r26, 0x24	; 36
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e4 e2       	ldi	r30, 0x24	; 36
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 62       	ori	r24, 0x20	; 32
     13e:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     140:	a5 e2       	ldi	r26, 0x25	; 37
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	e5 e2       	ldi	r30, 0x25	; 37
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	80 62       	ori	r24, 0x20	; 32
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     15c:	a4 e2       	ldi	r26, 0x24	; 36
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e2       	ldi	r30, 0x24	; 36
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	80 64       	ori	r24, 0x40	; 64
     168:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     16a:	a5 e2       	ldi	r26, 0x25	; 37
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e5 e2       	ldi	r30, 0x25	; 37
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	80 64       	ori	r24, 0x40	; 64
     176:	8c 93       	st	X, r24
}
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     186:	a4 e2       	ldi	r26, 0x24	; 36
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	e4 e2       	ldi	r30, 0x24	; 36
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	80 68       	ori	r24, 0x80	; 128
     192:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     194:	a5 e2       	ldi	r26, 0x25	; 37
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e5 e2       	ldi	r30, 0x25	; 37
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	80 68       	ori	r24, 0x80	; 128
     1a0:	8c 93       	st	X, r24
}
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <port_init_motion>:

//Initialize the ports
void port_init_motion(void)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     1b0:	0e 94 95 00 	call	0x12a	; 0x12a <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
     1b4:	0e 94 aa 00 	call	0x154	; 0x154 <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
     1b8:	0e 94 bf 00 	call	0x17e	; 0x17e <servo3_pin_config>
}
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
     1ca:	e1 e8       	ldi	r30, 0x81	; 129
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     1d0:	e5 e8       	ldi	r30, 0x85	; 133
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	8c ef       	ldi	r24, 0xFC	; 252
     1d6:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     1d8:	e4 e8       	ldi	r30, 0x84	; 132
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     1e0:	e9 e8       	ldi	r30, 0x89	; 137
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     1e8:	e8 e8       	ldi	r30, 0x88	; 136
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     1f0:	eb e8       	ldi	r30, 0x8B	; 139
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     1f8:	ea e8       	ldi	r30, 0x8A	; 138
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	80 83       	st	Z, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     200:	ed e8       	ldi	r30, 0x8D	; 141
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     208:	ec e8       	ldi	r30, 0x8C	; 140
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	80 83       	st	Z, r24
 ICR1H  = 0x03;	
     210:	e7 e8       	ldi	r30, 0x87	; 135
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
     218:	e6 e8       	ldi	r30, 0x86	; 134
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     220:	e0 e8       	ldi	r30, 0x80	; 128
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	8b ea       	ldi	r24, 0xAB	; 171
     226:	80 83       	st	Z, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     228:	e2 e8       	ldi	r30, 0x82	; 130
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     22e:	e1 e8       	ldi	r30, 0x81	; 129
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	8c e0       	ldi	r24, 0x0C	; 12
     234:	80 83       	st	Z, r24
}
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <init_devices_motion>:


//Function to initialize all the peripherals
void init_devices_motion(void)
{
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
     244:	f8 94       	cli
 port_init_motion();
     246:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <port_init_motion>
 timer1_init();
     24a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <timer1_init>
 sei(); //re-enable interrupts 
     24e:	78 94       	sei
}
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	08 95       	ret

00000256 <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	00 d0       	rcall	.+0      	; 0x260 <servo_1+0xa>
     260:	0f 92       	push	r0
     262:	0f 92       	push	r0
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	9a 83       	std	Y+2, r25	; 0x02
     276:	ab 83       	std	Y+3, r26	; 0x03
     278:	bc 83       	std	Y+4, r27	; 0x04
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     27a:	8d 81       	ldd	r24, Y+5	; 0x05
     27c:	88 2f       	mov	r24, r24
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	a0 e0       	ldi	r26, 0x00	; 0
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	bc 01       	movw	r22, r24
     286:	cd 01       	movw	r24, r26
     288:	0e 94 28 35 	call	0x6a50	; 0x6a50 <__floatunsisf>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	bc 01       	movw	r22, r24
     292:	cd 01       	movw	r24, r26
     294:	2b e7       	ldi	r18, 0x7B	; 123
     296:	34 e1       	ldi	r19, 0x14	; 20
     298:	4e ee       	ldi	r20, 0xEE	; 238
     29a:	5f e3       	ldi	r21, 0x3F	; 63
     29c:	0e 94 98 33 	call	0x6730	; 0x6730 <__divsf3>
     2a0:	dc 01       	movw	r26, r24
     2a2:	cb 01       	movw	r24, r22
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	4c e0       	ldi	r20, 0x0C	; 12
     2ae:	52 e4       	ldi	r21, 0x42	; 66
     2b0:	0e 94 71 32 	call	0x64e2	; 0x64e2 <__addsf3>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	ab 83       	std	Y+3, r26	; 0x03
     2be:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
     2c0:	e9 e8       	ldi	r30, 0x89	; 137
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
     2c6:	08 e8       	ldi	r16, 0x88	; 136
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	7a 81       	ldd	r23, Y+2	; 0x02
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	f8 01       	movw	r30, r16
     2dc:	80 83       	st	Z, r24
}
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	cf 91       	pop	r28
     2ea:	df 91       	pop	r29
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	08 95       	ret

000002f2 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <servo_2+0xa>
     2fc:	0f 92       	push	r0
     2fe:	0f 92       	push	r0
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	89 83       	std	Y+1, r24	; 0x01
     310:	9a 83       	std	Y+2, r25	; 0x02
     312:	ab 83       	std	Y+3, r26	; 0x03
     314:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     316:	8d 81       	ldd	r24, Y+5	; 0x05
     318:	88 2f       	mov	r24, r24
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	0e 94 28 35 	call	0x6a50	; 0x6a50 <__floatunsisf>
     328:	dc 01       	movw	r26, r24
     32a:	cb 01       	movw	r24, r22
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	2b e7       	ldi	r18, 0x7B	; 123
     332:	34 e1       	ldi	r19, 0x14	; 20
     334:	4e ee       	ldi	r20, 0xEE	; 238
     336:	5f e3       	ldi	r21, 0x3F	; 63
     338:	0e 94 98 33 	call	0x6730	; 0x6730 <__divsf3>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	bc 01       	movw	r22, r24
     342:	cd 01       	movw	r24, r26
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	4c e0       	ldi	r20, 0x0C	; 12
     34a:	52 e4       	ldi	r21, 0x42	; 66
     34c:	0e 94 71 32 	call	0x64e2	; 0x64e2 <__addsf3>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	ab 83       	std	Y+3, r26	; 0x03
     35a:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
     35c:	eb e8       	ldi	r30, 0x8B	; 139
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     362:	0a e8       	ldi	r16, 0x8A	; 138
     364:	10 e0       	ldi	r17, 0x00	; 0
     366:	69 81       	ldd	r22, Y+1	; 0x01
     368:	7a 81       	ldd	r23, Y+2	; 0x02
     36a:	8b 81       	ldd	r24, Y+3	; 0x03
     36c:	9c 81       	ldd	r25, Y+4	; 0x04
     36e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	f8 01       	movw	r30, r16
     378:	80 83       	st	Z, r24
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	df 93       	push	r29
     394:	cf 93       	push	r28
     396:	00 d0       	rcall	.+0      	; 0x398 <servo_3+0xa>
     398:	0f 92       	push	r0
     39a:	0f 92       	push	r0
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	8d 83       	std	Y+5, r24	; 0x05
 float PositionServo = 0;
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	9a 83       	std	Y+2, r25	; 0x02
     3ae:	ab 83       	std	Y+3, r26	; 0x03
     3b0:	bc 83       	std	Y+4, r27	; 0x04
 PositionServo = ((float)degrees / 1.86) + 35.0;
     3b2:	8d 81       	ldd	r24, Y+5	; 0x05
     3b4:	88 2f       	mov	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	0e 94 28 35 	call	0x6a50	; 0x6a50 <__floatunsisf>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	bc 01       	movw	r22, r24
     3ca:	cd 01       	movw	r24, r26
     3cc:	2b e7       	ldi	r18, 0x7B	; 123
     3ce:	34 e1       	ldi	r19, 0x14	; 20
     3d0:	4e ee       	ldi	r20, 0xEE	; 238
     3d2:	5f e3       	ldi	r21, 0x3F	; 63
     3d4:	0e 94 98 33 	call	0x6730	; 0x6730 <__divsf3>
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	bc 01       	movw	r22, r24
     3de:	cd 01       	movw	r24, r26
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	4c e0       	ldi	r20, 0x0C	; 12
     3e6:	52 e4       	ldi	r21, 0x42	; 66
     3e8:	0e 94 71 32 	call	0x64e2	; 0x64e2 <__addsf3>
     3ec:	dc 01       	movw	r26, r24
     3ee:	cb 01       	movw	r24, r22
     3f0:	89 83       	std	Y+1, r24	; 0x01
     3f2:	9a 83       	std	Y+2, r25	; 0x02
     3f4:	ab 83       	std	Y+3, r26	; 0x03
     3f6:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
     3f8:	ed e8       	ldi	r30, 0x8D	; 141
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionServo;
     3fe:	0c e8       	ldi	r16, 0x8C	; 140
     400:	10 e0       	ldi	r17, 0x00	; 0
     402:	69 81       	ldd	r22, Y+1	; 0x01
     404:	7a 81       	ldd	r23, Y+2	; 0x02
     406:	8b 81       	ldd	r24, Y+3	; 0x03
     408:	9c 81       	ldd	r25, Y+4	; 0x04
     40a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	f8 01       	movw	r30, r16
     414:	80 83       	st	Z, r24
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
     42a:	df 93       	push	r29
     42c:	cf 93       	push	r28
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03; 
     432:	e9 e8       	ldi	r30, 0x89	; 137
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
     43a:	e8 e8       	ldi	r30, 0x88	; 136
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	80 83       	st	Z, r24
}
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
     450:	eb e8       	ldi	r30, 0x8B	; 139
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
     458:	ea e8       	ldi	r30, 0x8A	; 138
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	80 83       	st	Z, r24
}
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	08 95       	ret

00000466 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
     46e:	ed e8       	ldi	r30, 0x8D	; 141
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
     476:	ec e8       	ldi	r30, 0x8C	; 140
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	80 83       	st	Z, r24
} 
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	08 95       	ret

00000484 <move_servo2_forward>:


void move_servo2_forward(void)	//move servo2(upper arm) forward
{
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	6d 97       	sbiw	r28, 0x1d	; 29
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	f8 94       	cli
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f be       	out	0x3f, r0	; 63
     496:	cd bf       	out	0x3d, r28	; 61
    unsigned char i = 0;
     498:	1d 8e       	std	Y+29, r1	; 0x1d
	
	servo_2(30);
     49a:	8e e1       	ldi	r24, 0x1E	; 30
     49c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	a0 ef       	ldi	r26, 0xF0	; 240
     4a6:	b1 e4       	ldi	r27, 0x41	; 65
     4a8:	89 8f       	std	Y+25, r24	; 0x19
     4aa:	9a 8f       	std	Y+26, r25	; 0x1a
     4ac:	ab 8f       	std	Y+27, r26	; 0x1b
     4ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4b0:	69 8d       	ldd	r22, Y+25	; 0x19
     4b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4b8:	26 e6       	ldi	r18, 0x66	; 102
     4ba:	36 e6       	ldi	r19, 0x66	; 102
     4bc:	46 e6       	ldi	r20, 0x66	; 102
     4be:	55 e4       	ldi	r21, 0x45	; 69
     4c0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	8d 8b       	std	Y+21, r24	; 0x15
     4ca:	9e 8b       	std	Y+22, r25	; 0x16
     4cc:	af 8b       	std	Y+23, r26	; 0x17
     4ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     4d0:	6d 89       	ldd	r22, Y+21	; 0x15
     4d2:	7e 89       	ldd	r23, Y+22	; 0x16
     4d4:	8f 89       	ldd	r24, Y+23	; 0x17
     4d6:	98 8d       	ldd	r25, Y+24	; 0x18
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e8       	ldi	r20, 0x80	; 128
     4de:	5f e3       	ldi	r21, 0x3F	; 63
     4e0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     4e4:	88 23       	and	r24, r24
     4e6:	2c f4       	brge	.+10     	; 0x4f2 <move_servo2_forward+0x6e>
		__ticks = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	9c 8b       	std	Y+20, r25	; 0x14
     4ee:	8b 8b       	std	Y+19, r24	; 0x13
     4f0:	3f c0       	rjmp	.+126    	; 0x570 <move_servo2_forward+0xec>
	else if (__tmp > 65535)
     4f2:	6d 89       	ldd	r22, Y+21	; 0x15
     4f4:	7e 89       	ldd	r23, Y+22	; 0x16
     4f6:	8f 89       	ldd	r24, Y+23	; 0x17
     4f8:	98 8d       	ldd	r25, Y+24	; 0x18
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	3f ef       	ldi	r19, 0xFF	; 255
     4fe:	4f e7       	ldi	r20, 0x7F	; 127
     500:	57 e4       	ldi	r21, 0x47	; 71
     502:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     506:	18 16       	cp	r1, r24
     508:	4c f5       	brge	.+82     	; 0x55c <move_servo2_forward+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50a:	69 8d       	ldd	r22, Y+25	; 0x19
     50c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     50e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     510:	9c 8d       	ldd	r25, Y+28	; 0x1c
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 e2       	ldi	r20, 0x20	; 32
     518:	51 e4       	ldi	r21, 0x41	; 65
     51a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	bc 01       	movw	r22, r24
     524:	cd 01       	movw	r24, r26
     526:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	9c 8b       	std	Y+20, r25	; 0x14
     530:	8b 8b       	std	Y+19, r24	; 0x13
     532:	0f c0       	rjmp	.+30     	; 0x552 <move_servo2_forward+0xce>
     534:	80 e7       	ldi	r24, 0x70	; 112
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	9a 8b       	std	Y+18, r25	; 0x12
     53a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     53c:	89 89       	ldd	r24, Y+17	; 0x11
     53e:	9a 89       	ldd	r25, Y+18	; 0x12
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <move_servo2_forward+0xbc>
     544:	9a 8b       	std	Y+18, r25	; 0x12
     546:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     548:	8b 89       	ldd	r24, Y+19	; 0x13
     54a:	9c 89       	ldd	r25, Y+20	; 0x14
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	9c 8b       	std	Y+20, r25	; 0x14
     550:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     552:	8b 89       	ldd	r24, Y+19	; 0x13
     554:	9c 89       	ldd	r25, Y+20	; 0x14
     556:	00 97       	sbiw	r24, 0x00	; 0
     558:	69 f7       	brne	.-38     	; 0x534 <move_servo2_forward+0xb0>
     55a:	14 c0       	rjmp	.+40     	; 0x584 <move_servo2_forward+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     55c:	6d 89       	ldd	r22, Y+21	; 0x15
     55e:	7e 89       	ldd	r23, Y+22	; 0x16
     560:	8f 89       	ldd	r24, Y+23	; 0x17
     562:	98 8d       	ldd	r25, Y+24	; 0x18
     564:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     568:	dc 01       	movw	r26, r24
     56a:	cb 01       	movw	r24, r22
     56c:	9c 8b       	std	Y+20, r25	; 0x14
     56e:	8b 8b       	std	Y+19, r24	; 0x13
     570:	8b 89       	ldd	r24, Y+19	; 0x13
     572:	9c 89       	ldd	r25, Y+20	; 0x14
     574:	98 8b       	std	Y+16, r25	; 0x10
     576:	8f 87       	std	Y+15, r24	; 0x0f
     578:	8f 85       	ldd	r24, Y+15	; 0x0f
     57a:	98 89       	ldd	r25, Y+16	; 0x10
     57c:	01 97       	sbiw	r24, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <move_servo2_forward+0xf8>
     580:	98 8b       	std	Y+16, r25	; 0x10
     582:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);	//intially move to 30 degrees

	for (i=30;i<=145;i+=5)	//moves from 30 to 145 degrees with 5 degree increment 
     584:	8e e1       	ldi	r24, 0x1E	; 30
     586:	8d 8f       	std	Y+29, r24	; 0x1d
     588:	78 c0       	rjmp	.+240    	; 0x67a <move_servo2_forward+0x1f6>
	{
		servo_2(i);
     58a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     58c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 ef       	ldi	r26, 0xF0	; 240
     596:	b1 e4       	ldi	r27, 0x41	; 65
     598:	8b 87       	std	Y+11, r24	; 0x0b
     59a:	9c 87       	std	Y+12, r25	; 0x0c
     59c:	ad 87       	std	Y+13, r26	; 0x0d
     59e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5a0:	6b 85       	ldd	r22, Y+11	; 0x0b
     5a2:	7c 85       	ldd	r23, Y+12	; 0x0c
     5a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     5a8:	26 e6       	ldi	r18, 0x66	; 102
     5aa:	36 e6       	ldi	r19, 0x66	; 102
     5ac:	46 e6       	ldi	r20, 0x66	; 102
     5ae:	55 e4       	ldi	r21, 0x45	; 69
     5b0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	8f 83       	std	Y+7, r24	; 0x07
     5ba:	98 87       	std	Y+8, r25	; 0x08
     5bc:	a9 87       	std	Y+9, r26	; 0x09
     5be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     5c0:	6f 81       	ldd	r22, Y+7	; 0x07
     5c2:	78 85       	ldd	r23, Y+8	; 0x08
     5c4:	89 85       	ldd	r24, Y+9	; 0x09
     5c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e8       	ldi	r20, 0x80	; 128
     5ce:	5f e3       	ldi	r21, 0x3F	; 63
     5d0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     5d4:	88 23       	and	r24, r24
     5d6:	2c f4       	brge	.+10     	; 0x5e2 <move_servo2_forward+0x15e>
		__ticks = 1;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	9e 83       	std	Y+6, r25	; 0x06
     5de:	8d 83       	std	Y+5, r24	; 0x05
     5e0:	3f c0       	rjmp	.+126    	; 0x660 <move_servo2_forward+0x1dc>
	else if (__tmp > 65535)
     5e2:	6f 81       	ldd	r22, Y+7	; 0x07
     5e4:	78 85       	ldd	r23, Y+8	; 0x08
     5e6:	89 85       	ldd	r24, Y+9	; 0x09
     5e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	3f ef       	ldi	r19, 0xFF	; 255
     5ee:	4f e7       	ldi	r20, 0x7F	; 127
     5f0:	57 e4       	ldi	r21, 0x47	; 71
     5f2:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     5f6:	18 16       	cp	r1, r24
     5f8:	4c f5       	brge	.+82     	; 0x64c <move_servo2_forward+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5fa:	6b 85       	ldd	r22, Y+11	; 0x0b
     5fc:	7c 85       	ldd	r23, Y+12	; 0x0c
     5fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     600:	9e 85       	ldd	r25, Y+14	; 0x0e
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e2       	ldi	r20, 0x20	; 32
     608:	51 e4       	ldi	r21, 0x41	; 65
     60a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	bc 01       	movw	r22, r24
     614:	cd 01       	movw	r24, r26
     616:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	9e 83       	std	Y+6, r25	; 0x06
     620:	8d 83       	std	Y+5, r24	; 0x05
     622:	0f c0       	rjmp	.+30     	; 0x642 <move_servo2_forward+0x1be>
     624:	80 e7       	ldi	r24, 0x70	; 112
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	9c 83       	std	Y+4, r25	; 0x04
     62a:	8b 83       	std	Y+3, r24	; 0x03
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	9c 81       	ldd	r25, Y+4	; 0x04
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <move_servo2_forward+0x1ac>
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     638:	8d 81       	ldd	r24, Y+5	; 0x05
     63a:	9e 81       	ldd	r25, Y+6	; 0x06
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	9e 83       	std	Y+6, r25	; 0x06
     640:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     642:	8d 81       	ldd	r24, Y+5	; 0x05
     644:	9e 81       	ldd	r25, Y+6	; 0x06
     646:	00 97       	sbiw	r24, 0x00	; 0
     648:	69 f7       	brne	.-38     	; 0x624 <move_servo2_forward+0x1a0>
     64a:	14 c0       	rjmp	.+40     	; 0x674 <move_servo2_forward+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     64c:	6f 81       	ldd	r22, Y+7	; 0x07
     64e:	78 85       	ldd	r23, Y+8	; 0x08
     650:	89 85       	ldd	r24, Y+9	; 0x09
     652:	9a 85       	ldd	r25, Y+10	; 0x0a
     654:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	9e 83       	std	Y+6, r25	; 0x06
     65e:	8d 83       	std	Y+5, r24	; 0x05
     660:	8d 81       	ldd	r24, Y+5	; 0x05
     662:	9e 81       	ldd	r25, Y+6	; 0x06
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <move_servo2_forward+0x1e8>
     670:	9a 83       	std	Y+2, r25	; 0x02
     672:	89 83       	std	Y+1, r24	; 0x01
    unsigned char i = 0;
	
	servo_2(30);
	_delay_ms(30);	//intially move to 30 degrees

	for (i=30;i<=145;i+=5)	//moves from 30 to 145 degrees with 5 degree increment 
     674:	8d 8d       	ldd	r24, Y+29	; 0x1d
     676:	8b 5f       	subi	r24, 0xFB	; 251
     678:	8d 8f       	std	Y+29, r24	; 0x1d
     67a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     67c:	82 39       	cpi	r24, 0x92	; 146
     67e:	08 f4       	brcc	.+2      	; 0x682 <move_servo2_forward+0x1fe>
     680:	84 cf       	rjmp	.-248    	; 0x58a <move_servo2_forward+0x106>
	{
		servo_2(i);
		_delay_ms(30);		//give 30ms delay
	}
}
     682:	6d 96       	adiw	r28, 0x1d	; 29
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	cf 91       	pop	r28
     690:	df 91       	pop	r29
     692:	08 95       	ret

00000694 <move_servo2_backward>:

void move_servo2_backward(void)	//move servo2(upper arm) backward
{
     694:	df 93       	push	r29
     696:	cf 93       	push	r28
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	6d 97       	sbiw	r28, 0x1d	; 29
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
    unsigned char i = 0;
     6a8:	1d 8e       	std	Y+29, r1	; 0x1d

	servo_2(145);	//intially move to 145 degrees
     6aa:	81 e9       	ldi	r24, 0x91	; 145
     6ac:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	a0 ef       	ldi	r26, 0xF0	; 240
     6b6:	b1 e4       	ldi	r27, 0x41	; 65
     6b8:	89 8f       	std	Y+25, r24	; 0x19
     6ba:	9a 8f       	std	Y+26, r25	; 0x1a
     6bc:	ab 8f       	std	Y+27, r26	; 0x1b
     6be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6c0:	69 8d       	ldd	r22, Y+25	; 0x19
     6c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     6c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6c8:	26 e6       	ldi	r18, 0x66	; 102
     6ca:	36 e6       	ldi	r19, 0x66	; 102
     6cc:	46 e6       	ldi	r20, 0x66	; 102
     6ce:	55 e4       	ldi	r21, 0x45	; 69
     6d0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	8d 8b       	std	Y+21, r24	; 0x15
     6da:	9e 8b       	std	Y+22, r25	; 0x16
     6dc:	af 8b       	std	Y+23, r26	; 0x17
     6de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     6e0:	6d 89       	ldd	r22, Y+21	; 0x15
     6e2:	7e 89       	ldd	r23, Y+22	; 0x16
     6e4:	8f 89       	ldd	r24, Y+23	; 0x17
     6e6:	98 8d       	ldd	r25, Y+24	; 0x18
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e8       	ldi	r20, 0x80	; 128
     6ee:	5f e3       	ldi	r21, 0x3F	; 63
     6f0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     6f4:	88 23       	and	r24, r24
     6f6:	2c f4       	brge	.+10     	; 0x702 <move_servo2_backward+0x6e>
		__ticks = 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	9c 8b       	std	Y+20, r25	; 0x14
     6fe:	8b 8b       	std	Y+19, r24	; 0x13
     700:	3f c0       	rjmp	.+126    	; 0x780 <move_servo2_backward+0xec>
	else if (__tmp > 65535)
     702:	6d 89       	ldd	r22, Y+21	; 0x15
     704:	7e 89       	ldd	r23, Y+22	; 0x16
     706:	8f 89       	ldd	r24, Y+23	; 0x17
     708:	98 8d       	ldd	r25, Y+24	; 0x18
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	3f ef       	ldi	r19, 0xFF	; 255
     70e:	4f e7       	ldi	r20, 0x7F	; 127
     710:	57 e4       	ldi	r21, 0x47	; 71
     712:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     716:	18 16       	cp	r1, r24
     718:	4c f5       	brge	.+82     	; 0x76c <move_servo2_backward+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     71a:	69 8d       	ldd	r22, Y+25	; 0x19
     71c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     71e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     720:	9c 8d       	ldd	r25, Y+28	; 0x1c
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	40 e2       	ldi	r20, 0x20	; 32
     728:	51 e4       	ldi	r21, 0x41	; 65
     72a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	bc 01       	movw	r22, r24
     734:	cd 01       	movw	r24, r26
     736:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     73a:	dc 01       	movw	r26, r24
     73c:	cb 01       	movw	r24, r22
     73e:	9c 8b       	std	Y+20, r25	; 0x14
     740:	8b 8b       	std	Y+19, r24	; 0x13
     742:	0f c0       	rjmp	.+30     	; 0x762 <move_servo2_backward+0xce>
     744:	80 e7       	ldi	r24, 0x70	; 112
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	9a 8b       	std	Y+18, r25	; 0x12
     74a:	89 8b       	std	Y+17, r24	; 0x11
     74c:	89 89       	ldd	r24, Y+17	; 0x11
     74e:	9a 89       	ldd	r25, Y+18	; 0x12
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <move_servo2_backward+0xbc>
     754:	9a 8b       	std	Y+18, r25	; 0x12
     756:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     758:	8b 89       	ldd	r24, Y+19	; 0x13
     75a:	9c 89       	ldd	r25, Y+20	; 0x14
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	9c 8b       	std	Y+20, r25	; 0x14
     760:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     762:	8b 89       	ldd	r24, Y+19	; 0x13
     764:	9c 89       	ldd	r25, Y+20	; 0x14
     766:	00 97       	sbiw	r24, 0x00	; 0
     768:	69 f7       	brne	.-38     	; 0x744 <move_servo2_backward+0xb0>
     76a:	14 c0       	rjmp	.+40     	; 0x794 <move_servo2_backward+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     76c:	6d 89       	ldd	r22, Y+21	; 0x15
     76e:	7e 89       	ldd	r23, Y+22	; 0x16
     770:	8f 89       	ldd	r24, Y+23	; 0x17
     772:	98 8d       	ldd	r25, Y+24	; 0x18
     774:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	9c 8b       	std	Y+20, r25	; 0x14
     77e:	8b 8b       	std	Y+19, r24	; 0x13
     780:	8b 89       	ldd	r24, Y+19	; 0x13
     782:	9c 89       	ldd	r25, Y+20	; 0x14
     784:	98 8b       	std	Y+16, r25	; 0x10
     786:	8f 87       	std	Y+15, r24	; 0x0f
     788:	8f 85       	ldd	r24, Y+15	; 0x0f
     78a:	98 89       	ldd	r25, Y+16	; 0x10
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <move_servo2_backward+0xf8>
     790:	98 8b       	std	Y+16, r25	; 0x10
     792:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);

	for (i=145;i>=30;i-=5)	//move from 145 to 30 degrees with 5 degree decrement
     794:	81 e9       	ldi	r24, 0x91	; 145
     796:	8d 8f       	std	Y+29, r24	; 0x1d
     798:	78 c0       	rjmp	.+240    	; 0x88a <move_servo2_backward+0x1f6>
	{
		servo_2(i);
     79a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     79c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	a0 ef       	ldi	r26, 0xF0	; 240
     7a6:	b1 e4       	ldi	r27, 0x41	; 65
     7a8:	8b 87       	std	Y+11, r24	; 0x0b
     7aa:	9c 87       	std	Y+12, r25	; 0x0c
     7ac:	ad 87       	std	Y+13, r26	; 0x0d
     7ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7b0:	6b 85       	ldd	r22, Y+11	; 0x0b
     7b2:	7c 85       	ldd	r23, Y+12	; 0x0c
     7b4:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b6:	9e 85       	ldd	r25, Y+14	; 0x0e
     7b8:	26 e6       	ldi	r18, 0x66	; 102
     7ba:	36 e6       	ldi	r19, 0x66	; 102
     7bc:	46 e6       	ldi	r20, 0x66	; 102
     7be:	55 e4       	ldi	r21, 0x45	; 69
     7c0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	8f 83       	std	Y+7, r24	; 0x07
     7ca:	98 87       	std	Y+8, r25	; 0x08
     7cc:	a9 87       	std	Y+9, r26	; 0x09
     7ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7d0:	6f 81       	ldd	r22, Y+7	; 0x07
     7d2:	78 85       	ldd	r23, Y+8	; 0x08
     7d4:	89 85       	ldd	r24, Y+9	; 0x09
     7d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e8       	ldi	r20, 0x80	; 128
     7de:	5f e3       	ldi	r21, 0x3F	; 63
     7e0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     7e4:	88 23       	and	r24, r24
     7e6:	2c f4       	brge	.+10     	; 0x7f2 <move_servo2_backward+0x15e>
		__ticks = 1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9e 83       	std	Y+6, r25	; 0x06
     7ee:	8d 83       	std	Y+5, r24	; 0x05
     7f0:	3f c0       	rjmp	.+126    	; 0x870 <move_servo2_backward+0x1dc>
	else if (__tmp > 65535)
     7f2:	6f 81       	ldd	r22, Y+7	; 0x07
     7f4:	78 85       	ldd	r23, Y+8	; 0x08
     7f6:	89 85       	ldd	r24, Y+9	; 0x09
     7f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	3f ef       	ldi	r19, 0xFF	; 255
     7fe:	4f e7       	ldi	r20, 0x7F	; 127
     800:	57 e4       	ldi	r21, 0x47	; 71
     802:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     806:	18 16       	cp	r1, r24
     808:	4c f5       	brge	.+82     	; 0x85c <move_servo2_backward+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     80a:	6b 85       	ldd	r22, Y+11	; 0x0b
     80c:	7c 85       	ldd	r23, Y+12	; 0x0c
     80e:	8d 85       	ldd	r24, Y+13	; 0x0d
     810:	9e 85       	ldd	r25, Y+14	; 0x0e
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	40 e2       	ldi	r20, 0x20	; 32
     818:	51 e4       	ldi	r21, 0x41	; 65
     81a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	bc 01       	movw	r22, r24
     824:	cd 01       	movw	r24, r26
     826:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	9e 83       	std	Y+6, r25	; 0x06
     830:	8d 83       	std	Y+5, r24	; 0x05
     832:	0f c0       	rjmp	.+30     	; 0x852 <move_servo2_backward+0x1be>
     834:	80 e7       	ldi	r24, 0x70	; 112
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	9c 81       	ldd	r25, Y+4	; 0x04
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <move_servo2_backward+0x1ac>
     844:	9c 83       	std	Y+4, r25	; 0x04
     846:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	9e 81       	ldd	r25, Y+6	; 0x06
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	9e 83       	std	Y+6, r25	; 0x06
     850:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     852:	8d 81       	ldd	r24, Y+5	; 0x05
     854:	9e 81       	ldd	r25, Y+6	; 0x06
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	69 f7       	brne	.-38     	; 0x834 <move_servo2_backward+0x1a0>
     85a:	14 c0       	rjmp	.+40     	; 0x884 <move_servo2_backward+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     85c:	6f 81       	ldd	r22, Y+7	; 0x07
     85e:	78 85       	ldd	r23, Y+8	; 0x08
     860:	89 85       	ldd	r24, Y+9	; 0x09
     862:	9a 85       	ldd	r25, Y+10	; 0x0a
     864:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	9e 83       	std	Y+6, r25	; 0x06
     86e:	8d 83       	std	Y+5, r24	; 0x05
     870:	8d 81       	ldd	r24, Y+5	; 0x05
     872:	9e 81       	ldd	r25, Y+6	; 0x06
     874:	9a 83       	std	Y+2, r25	; 0x02
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <move_servo2_backward+0x1e8>
     880:	9a 83       	std	Y+2, r25	; 0x02
     882:	89 83       	std	Y+1, r24	; 0x01
    unsigned char i = 0;

	servo_2(145);	//intially move to 145 degrees
	_delay_ms(30);

	for (i=145;i>=30;i-=5)	//move from 145 to 30 degrees with 5 degree decrement
     884:	8d 8d       	ldd	r24, Y+29	; 0x1d
     886:	85 50       	subi	r24, 0x05	; 5
     888:	8d 8f       	std	Y+29, r24	; 0x1d
     88a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     88c:	8e 31       	cpi	r24, 0x1E	; 30
     88e:	08 f0       	brcs	.+2      	; 0x892 <move_servo2_backward+0x1fe>
     890:	84 cf       	rjmp	.-248    	; 0x79a <move_servo2_backward+0x106>
	{
		servo_2(i);
		_delay_ms(30);	//give dealy of 30ms
	}
}
     892:	6d 96       	adiw	r28, 0x1d	; 29
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	cf 91       	pop	r28
     8a0:	df 91       	pop	r29
     8a2:	08 95       	ret

000008a4 <move_servo1_forward>:

void move_servo1_forward(void)	//move servo1(lower arm) forward
{
     8a4:	df 93       	push	r29
     8a6:	cf 93       	push	r28
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	6d 97       	sbiw	r28, 0x1d	; 29
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
    unsigned char i = 0;
     8b8:	1d 8e       	std	Y+29, r1	; 0x1d
	
	servo_1(0);	
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 2b 01 	call	0x256	; 0x256 <servo_1>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	a0 ef       	ldi	r26, 0xF0	; 240
     8c6:	b1 e4       	ldi	r27, 0x41	; 65
     8c8:	89 8f       	std	Y+25, r24	; 0x19
     8ca:	9a 8f       	std	Y+26, r25	; 0x1a
     8cc:	ab 8f       	std	Y+27, r26	; 0x1b
     8ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8d0:	69 8d       	ldd	r22, Y+25	; 0x19
     8d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     8d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8d8:	26 e6       	ldi	r18, 0x66	; 102
     8da:	36 e6       	ldi	r19, 0x66	; 102
     8dc:	46 e6       	ldi	r20, 0x66	; 102
     8de:	55 e4       	ldi	r21, 0x45	; 69
     8e0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	8d 8b       	std	Y+21, r24	; 0x15
     8ea:	9e 8b       	std	Y+22, r25	; 0x16
     8ec:	af 8b       	std	Y+23, r26	; 0x17
     8ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     8f0:	6d 89       	ldd	r22, Y+21	; 0x15
     8f2:	7e 89       	ldd	r23, Y+22	; 0x16
     8f4:	8f 89       	ldd	r24, Y+23	; 0x17
     8f6:	98 8d       	ldd	r25, Y+24	; 0x18
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	40 e8       	ldi	r20, 0x80	; 128
     8fe:	5f e3       	ldi	r21, 0x3F	; 63
     900:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     904:	88 23       	and	r24, r24
     906:	2c f4       	brge	.+10     	; 0x912 <move_servo1_forward+0x6e>
		__ticks = 1;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	9c 8b       	std	Y+20, r25	; 0x14
     90e:	8b 8b       	std	Y+19, r24	; 0x13
     910:	3f c0       	rjmp	.+126    	; 0x990 <move_servo1_forward+0xec>
	else if (__tmp > 65535)
     912:	6d 89       	ldd	r22, Y+21	; 0x15
     914:	7e 89       	ldd	r23, Y+22	; 0x16
     916:	8f 89       	ldd	r24, Y+23	; 0x17
     918:	98 8d       	ldd	r25, Y+24	; 0x18
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	3f ef       	ldi	r19, 0xFF	; 255
     91e:	4f e7       	ldi	r20, 0x7F	; 127
     920:	57 e4       	ldi	r21, 0x47	; 71
     922:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     926:	18 16       	cp	r1, r24
     928:	4c f5       	brge	.+82     	; 0x97c <move_servo1_forward+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     92a:	69 8d       	ldd	r22, Y+25	; 0x19
     92c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     92e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     930:	9c 8d       	ldd	r25, Y+28	; 0x1c
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e2       	ldi	r20, 0x20	; 32
     938:	51 e4       	ldi	r21, 0x41	; 65
     93a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     93e:	dc 01       	movw	r26, r24
     940:	cb 01       	movw	r24, r22
     942:	bc 01       	movw	r22, r24
     944:	cd 01       	movw	r24, r26
     946:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     94a:	dc 01       	movw	r26, r24
     94c:	cb 01       	movw	r24, r22
     94e:	9c 8b       	std	Y+20, r25	; 0x14
     950:	8b 8b       	std	Y+19, r24	; 0x13
     952:	0f c0       	rjmp	.+30     	; 0x972 <move_servo1_forward+0xce>
     954:	80 e7       	ldi	r24, 0x70	; 112
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	9a 8b       	std	Y+18, r25	; 0x12
     95a:	89 8b       	std	Y+17, r24	; 0x11
     95c:	89 89       	ldd	r24, Y+17	; 0x11
     95e:	9a 89       	ldd	r25, Y+18	; 0x12
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <move_servo1_forward+0xbc>
     964:	9a 8b       	std	Y+18, r25	; 0x12
     966:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     968:	8b 89       	ldd	r24, Y+19	; 0x13
     96a:	9c 89       	ldd	r25, Y+20	; 0x14
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	9c 8b       	std	Y+20, r25	; 0x14
     970:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     972:	8b 89       	ldd	r24, Y+19	; 0x13
     974:	9c 89       	ldd	r25, Y+20	; 0x14
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	69 f7       	brne	.-38     	; 0x954 <move_servo1_forward+0xb0>
     97a:	14 c0       	rjmp	.+40     	; 0x9a4 <move_servo1_forward+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     97c:	6d 89       	ldd	r22, Y+21	; 0x15
     97e:	7e 89       	ldd	r23, Y+22	; 0x16
     980:	8f 89       	ldd	r24, Y+23	; 0x17
     982:	98 8d       	ldd	r25, Y+24	; 0x18
     984:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	9c 8b       	std	Y+20, r25	; 0x14
     98e:	8b 8b       	std	Y+19, r24	; 0x13
     990:	8b 89       	ldd	r24, Y+19	; 0x13
     992:	9c 89       	ldd	r25, Y+20	; 0x14
     994:	98 8b       	std	Y+16, r25	; 0x10
     996:	8f 87       	std	Y+15, r24	; 0x0f
     998:	8f 85       	ldd	r24, Y+15	; 0x0f
     99a:	98 89       	ldd	r25, Y+16	; 0x10
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <move_servo1_forward+0xf8>
     9a0:	98 8b       	std	Y+16, r25	; 0x10
     9a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);	

	for (i=30;i<=120;i+=15)		//moves from 30 to 120 degrees with 15 degree increment
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	8d 8f       	std	Y+29, r24	; 0x1d
     9a8:	78 c0       	rjmp	.+240    	; 0xa9a <move_servo1_forward+0x1f6>
	{
		servo_1(i);
     9aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9ac:	0e 94 2b 01 	call	0x256	; 0x256 <servo_1>
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 ef       	ldi	r26, 0xF0	; 240
     9b6:	b1 e4       	ldi	r27, 0x41	; 65
     9b8:	8b 87       	std	Y+11, r24	; 0x0b
     9ba:	9c 87       	std	Y+12, r25	; 0x0c
     9bc:	ad 87       	std	Y+13, r26	; 0x0d
     9be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     9c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     9c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c8:	26 e6       	ldi	r18, 0x66	; 102
     9ca:	36 e6       	ldi	r19, 0x66	; 102
     9cc:	46 e6       	ldi	r20, 0x66	; 102
     9ce:	55 e4       	ldi	r21, 0x45	; 69
     9d0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	8f 83       	std	Y+7, r24	; 0x07
     9da:	98 87       	std	Y+8, r25	; 0x08
     9dc:	a9 87       	std	Y+9, r26	; 0x09
     9de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9e0:	6f 81       	ldd	r22, Y+7	; 0x07
     9e2:	78 85       	ldd	r23, Y+8	; 0x08
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e8       	ldi	r20, 0x80	; 128
     9ee:	5f e3       	ldi	r21, 0x3F	; 63
     9f0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     9f4:	88 23       	and	r24, r24
     9f6:	2c f4       	brge	.+10     	; 0xa02 <move_servo1_forward+0x15e>
		__ticks = 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	9e 83       	std	Y+6, r25	; 0x06
     9fe:	8d 83       	std	Y+5, r24	; 0x05
     a00:	3f c0       	rjmp	.+126    	; 0xa80 <move_servo1_forward+0x1dc>
	else if (__tmp > 65535)
     a02:	6f 81       	ldd	r22, Y+7	; 0x07
     a04:	78 85       	ldd	r23, Y+8	; 0x08
     a06:	89 85       	ldd	r24, Y+9	; 0x09
     a08:	9a 85       	ldd	r25, Y+10	; 0x0a
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	3f ef       	ldi	r19, 0xFF	; 255
     a0e:	4f e7       	ldi	r20, 0x7F	; 127
     a10:	57 e4       	ldi	r21, 0x47	; 71
     a12:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     a16:	18 16       	cp	r1, r24
     a18:	4c f5       	brge	.+82     	; 0xa6c <move_servo1_forward+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a20:	9e 85       	ldd	r25, Y+14	; 0x0e
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e2       	ldi	r20, 0x20	; 32
     a28:	51 e4       	ldi	r21, 0x41	; 65
     a2a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     a2e:	dc 01       	movw	r26, r24
     a30:	cb 01       	movw	r24, r22
     a32:	bc 01       	movw	r22, r24
     a34:	cd 01       	movw	r24, r26
     a36:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	9e 83       	std	Y+6, r25	; 0x06
     a40:	8d 83       	std	Y+5, r24	; 0x05
     a42:	0f c0       	rjmp	.+30     	; 0xa62 <move_servo1_forward+0x1be>
     a44:	80 e7       	ldi	r24, 0x70	; 112
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	9c 83       	std	Y+4, r25	; 0x04
     a4a:	8b 83       	std	Y+3, r24	; 0x03
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <move_servo1_forward+0x1ac>
     a54:	9c 83       	std	Y+4, r25	; 0x04
     a56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a58:	8d 81       	ldd	r24, Y+5	; 0x05
     a5a:	9e 81       	ldd	r25, Y+6	; 0x06
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	9e 83       	std	Y+6, r25	; 0x06
     a60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	69 f7       	brne	.-38     	; 0xa44 <move_servo1_forward+0x1a0>
     a6a:	14 c0       	rjmp	.+40     	; 0xa94 <move_servo1_forward+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a6c:	6f 81       	ldd	r22, Y+7	; 0x07
     a6e:	78 85       	ldd	r23, Y+8	; 0x08
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	9a 85       	ldd	r25, Y+10	; 0x0a
     a74:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	9e 83       	std	Y+6, r25	; 0x06
     a7e:	8d 83       	std	Y+5, r24	; 0x05
     a80:	8d 81       	ldd	r24, Y+5	; 0x05
     a82:	9e 81       	ldd	r25, Y+6	; 0x06
     a84:	9a 83       	std	Y+2, r25	; 0x02
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <move_servo1_forward+0x1e8>
     a90:	9a 83       	std	Y+2, r25	; 0x02
     a92:	89 83       	std	Y+1, r24	; 0x01
    unsigned char i = 0;
	
	servo_1(0);	
	_delay_ms(30);	

	for (i=30;i<=120;i+=15)		//moves from 30 to 120 degrees with 15 degree increment
     a94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a96:	81 5f       	subi	r24, 0xF1	; 241
     a98:	8d 8f       	std	Y+29, r24	; 0x1d
     a9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a9c:	89 37       	cpi	r24, 0x79	; 121
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <move_servo1_forward+0x1fe>
     aa0:	84 cf       	rjmp	.-248    	; 0x9aa <move_servo1_forward+0x106>
	{
		servo_1(i);
		_delay_ms(30);		//give dealy of 30ms
	}
}
     aa2:	6d 96       	adiw	r28, 0x1d	; 29
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	08 95       	ret

00000ab4 <move_servo1_backward>:

void move_servo1_backward(void)
{
     ab4:	df 93       	push	r29
     ab6:	cf 93       	push	r28
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	6d 97       	sbiw	r28, 0x1d	; 29
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
    unsigned char i = 0;
     ac8:	1d 8e       	std	Y+29, r1	; 0x1d

	servo_1(120);	//intially move to 120 degrees
     aca:	88 e7       	ldi	r24, 0x78	; 120
     acc:	0e 94 2b 01 	call	0x256	; 0x256 <servo_1>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 ef       	ldi	r26, 0xF0	; 240
     ad6:	b1 e4       	ldi	r27, 0x41	; 65
     ad8:	89 8f       	std	Y+25, r24	; 0x19
     ada:	9a 8f       	std	Y+26, r25	; 0x1a
     adc:	ab 8f       	std	Y+27, r26	; 0x1b
     ade:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ae0:	69 8d       	ldd	r22, Y+25	; 0x19
     ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ae8:	26 e6       	ldi	r18, 0x66	; 102
     aea:	36 e6       	ldi	r19, 0x66	; 102
     aec:	46 e6       	ldi	r20, 0x66	; 102
     aee:	55 e4       	ldi	r21, 0x45	; 69
     af0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	8d 8b       	std	Y+21, r24	; 0x15
     afa:	9e 8b       	std	Y+22, r25	; 0x16
     afc:	af 8b       	std	Y+23, r26	; 0x17
     afe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     b00:	6d 89       	ldd	r22, Y+21	; 0x15
     b02:	7e 89       	ldd	r23, Y+22	; 0x16
     b04:	8f 89       	ldd	r24, Y+23	; 0x17
     b06:	98 8d       	ldd	r25, Y+24	; 0x18
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e8       	ldi	r20, 0x80	; 128
     b0e:	5f e3       	ldi	r21, 0x3F	; 63
     b10:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     b14:	88 23       	and	r24, r24
     b16:	2c f4       	brge	.+10     	; 0xb22 <move_servo1_backward+0x6e>
		__ticks = 1;
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	9c 8b       	std	Y+20, r25	; 0x14
     b1e:	8b 8b       	std	Y+19, r24	; 0x13
     b20:	3f c0       	rjmp	.+126    	; 0xba0 <move_servo1_backward+0xec>
	else if (__tmp > 65535)
     b22:	6d 89       	ldd	r22, Y+21	; 0x15
     b24:	7e 89       	ldd	r23, Y+22	; 0x16
     b26:	8f 89       	ldd	r24, Y+23	; 0x17
     b28:	98 8d       	ldd	r25, Y+24	; 0x18
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	3f ef       	ldi	r19, 0xFF	; 255
     b2e:	4f e7       	ldi	r20, 0x7F	; 127
     b30:	57 e4       	ldi	r21, 0x47	; 71
     b32:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     b36:	18 16       	cp	r1, r24
     b38:	4c f5       	brge	.+82     	; 0xb8c <move_servo1_backward+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b3a:	69 8d       	ldd	r22, Y+25	; 0x19
     b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	40 e2       	ldi	r20, 0x20	; 32
     b48:	51 e4       	ldi	r21, 0x41	; 65
     b4a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     b4e:	dc 01       	movw	r26, r24
     b50:	cb 01       	movw	r24, r22
     b52:	bc 01       	movw	r22, r24
     b54:	cd 01       	movw	r24, r26
     b56:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	9c 8b       	std	Y+20, r25	; 0x14
     b60:	8b 8b       	std	Y+19, r24	; 0x13
     b62:	0f c0       	rjmp	.+30     	; 0xb82 <move_servo1_backward+0xce>
     b64:	80 e7       	ldi	r24, 0x70	; 112
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	9a 8b       	std	Y+18, r25	; 0x12
     b6a:	89 8b       	std	Y+17, r24	; 0x11
     b6c:	89 89       	ldd	r24, Y+17	; 0x11
     b6e:	9a 89       	ldd	r25, Y+18	; 0x12
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <move_servo1_backward+0xbc>
     b74:	9a 8b       	std	Y+18, r25	; 0x12
     b76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b78:	8b 89       	ldd	r24, Y+19	; 0x13
     b7a:	9c 89       	ldd	r25, Y+20	; 0x14
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	9c 8b       	std	Y+20, r25	; 0x14
     b80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b82:	8b 89       	ldd	r24, Y+19	; 0x13
     b84:	9c 89       	ldd	r25, Y+20	; 0x14
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	69 f7       	brne	.-38     	; 0xb64 <move_servo1_backward+0xb0>
     b8a:	14 c0       	rjmp	.+40     	; 0xbb4 <move_servo1_backward+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b8c:	6d 89       	ldd	r22, Y+21	; 0x15
     b8e:	7e 89       	ldd	r23, Y+22	; 0x16
     b90:	8f 89       	ldd	r24, Y+23	; 0x17
     b92:	98 8d       	ldd	r25, Y+24	; 0x18
     b94:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	9c 8b       	std	Y+20, r25	; 0x14
     b9e:	8b 8b       	std	Y+19, r24	; 0x13
     ba0:	8b 89       	ldd	r24, Y+19	; 0x13
     ba2:	9c 89       	ldd	r25, Y+20	; 0x14
     ba4:	98 8b       	std	Y+16, r25	; 0x10
     ba6:	8f 87       	std	Y+15, r24	; 0x0f
     ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
     baa:	98 89       	ldd	r25, Y+16	; 0x10
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	f1 f7       	brne	.-4      	; 0xbac <move_servo1_backward+0xf8>
     bb0:	98 8b       	std	Y+16, r25	; 0x10
     bb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);

	for (i=120;i>30;i-=10)		//moves from 120 to 30 degrees with 10 degree decrement
     bb4:	88 e7       	ldi	r24, 0x78	; 120
     bb6:	8d 8f       	std	Y+29, r24	; 0x1d
     bb8:	78 c0       	rjmp	.+240    	; 0xcaa <move_servo1_backward+0x1f6>
	{
		servo_1(i);
     bba:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bbc:	0e 94 2b 01 	call	0x256	; 0x256 <servo_1>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	a0 ef       	ldi	r26, 0xF0	; 240
     bc6:	b1 e4       	ldi	r27, 0x41	; 65
     bc8:	8b 87       	std	Y+11, r24	; 0x0b
     bca:	9c 87       	std	Y+12, r25	; 0x0c
     bcc:	ad 87       	std	Y+13, r26	; 0x0d
     bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd8:	26 e6       	ldi	r18, 0x66	; 102
     bda:	36 e6       	ldi	r19, 0x66	; 102
     bdc:	46 e6       	ldi	r20, 0x66	; 102
     bde:	55 e4       	ldi	r21, 0x45	; 69
     be0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	8f 83       	std	Y+7, r24	; 0x07
     bea:	98 87       	std	Y+8, r25	; 0x08
     bec:	a9 87       	std	Y+9, r26	; 0x09
     bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf0:	6f 81       	ldd	r22, Y+7	; 0x07
     bf2:	78 85       	ldd	r23, Y+8	; 0x08
     bf4:	89 85       	ldd	r24, Y+9	; 0x09
     bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e8       	ldi	r20, 0x80	; 128
     bfe:	5f e3       	ldi	r21, 0x3F	; 63
     c00:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     c04:	88 23       	and	r24, r24
     c06:	2c f4       	brge	.+10     	; 0xc12 <move_servo1_backward+0x15e>
		__ticks = 1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
     c10:	3f c0       	rjmp	.+126    	; 0xc90 <move_servo1_backward+0x1dc>
	else if (__tmp > 65535)
     c12:	6f 81       	ldd	r22, Y+7	; 0x07
     c14:	78 85       	ldd	r23, Y+8	; 0x08
     c16:	89 85       	ldd	r24, Y+9	; 0x09
     c18:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	3f ef       	ldi	r19, 0xFF	; 255
     c1e:	4f e7       	ldi	r20, 0x7F	; 127
     c20:	57 e4       	ldi	r21, 0x47	; 71
     c22:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     c26:	18 16       	cp	r1, r24
     c28:	4c f5       	brge	.+82     	; 0xc7c <move_servo1_backward+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c30:	9e 85       	ldd	r25, Y+14	; 0x0e
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e2       	ldi	r20, 0x20	; 32
     c38:	51 e4       	ldi	r21, 0x41	; 65
     c3a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <move_servo1_backward+0x1be>
     c54:	80 e7       	ldi	r24, 0x70	; 112
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <move_servo1_backward+0x1ac>
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	69 f7       	brne	.-38     	; 0xc54 <move_servo1_backward+0x1a0>
     c7a:	14 c0       	rjmp	.+40     	; 0xca4 <move_servo1_backward+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7c:	6f 81       	ldd	r22, Y+7	; 0x07
     c7e:	78 85       	ldd	r23, Y+8	; 0x08
     c80:	89 85       	ldd	r24, Y+9	; 0x09
     c82:	9a 85       	ldd	r25, Y+10	; 0x0a
     c84:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9e 83       	std	Y+6, r25	; 0x06
     c8e:	8d 83       	std	Y+5, r24	; 0x05
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <move_servo1_backward+0x1e8>
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
    unsigned char i = 0;

	servo_1(120);	//intially move to 120 degrees
	_delay_ms(30);

	for (i=120;i>30;i-=10)		//moves from 120 to 30 degrees with 10 degree decrement
     ca4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ca6:	8a 50       	subi	r24, 0x0A	; 10
     ca8:	8d 8f       	std	Y+29, r24	; 0x1d
     caa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cac:	8f 31       	cpi	r24, 0x1F	; 31
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <move_servo1_backward+0x1fe>
     cb0:	84 cf       	rjmp	.-248    	; 0xbba <move_servo1_backward+0x106>
	{
		servo_1(i);
		_delay_ms(30);		//give dealy of 30ms
	}
}
     cb2:	6d 96       	adiw	r28, 0x1d	; 29
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <servo1_init>:


void servo1_init(void)	//initialize servo1(lower arm)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	2f 97       	sbiw	r28, 0x0f	; 15
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
    unsigned char i = 0;
     cd8:	1f 86       	std	Y+15, r1	; 0x0f

	servo_1(60);	//to 60(depends on intial pos of motor) degrees,nearly vertical 
     cda:	8c e3       	ldi	r24, 0x3C	; 60
     cdc:	0e 94 2b 01 	call	0x256	; 0x256 <servo_1>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a0 ef       	ldi	r26, 0xF0	; 240
     ce6:	b1 e4       	ldi	r27, 0x41	; 65
     ce8:	8b 87       	std	Y+11, r24	; 0x0b
     cea:	9c 87       	std	Y+12, r25	; 0x0c
     cec:	ad 87       	std	Y+13, r26	; 0x0d
     cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf8:	26 e6       	ldi	r18, 0x66	; 102
     cfa:	36 e6       	ldi	r19, 0x66	; 102
     cfc:	46 e6       	ldi	r20, 0x66	; 102
     cfe:	55 e4       	ldi	r21, 0x45	; 69
     d00:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	8f 83       	std	Y+7, r24	; 0x07
     d0a:	98 87       	std	Y+8, r25	; 0x08
     d0c:	a9 87       	std	Y+9, r26	; 0x09
     d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     d24:	88 23       	and	r24, r24
     d26:	2c f4       	brge	.+10     	; 0xd32 <servo1_init+0x6e>
		__ticks = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9e 83       	std	Y+6, r25	; 0x06
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	3f c0       	rjmp	.+126    	; 0xdb0 <servo1_init+0xec>
	else if (__tmp > 65535)
     d32:	6f 81       	ldd	r22, Y+7	; 0x07
     d34:	78 85       	ldd	r23, Y+8	; 0x08
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	3f ef       	ldi	r19, 0xFF	; 255
     d3e:	4f e7       	ldi	r20, 0x7F	; 127
     d40:	57 e4       	ldi	r21, 0x47	; 71
     d42:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     d46:	18 16       	cp	r1, r24
     d48:	4c f5       	brge	.+82     	; 0xd9c <servo1_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d50:	9e 85       	ldd	r25, Y+14	; 0x0e
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e2       	ldi	r20, 0x20	; 32
     d58:	51 e4       	ldi	r21, 0x41	; 65
     d5a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <servo1_init+0xce>
     d74:	80 e7       	ldi	r24, 0x70	; 112
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	8b 83       	std	Y+3, r24	; 0x03
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <servo1_init+0xbc>
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	69 f7       	brne	.-38     	; 0xd74 <servo1_init+0xb0>
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <servo1_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9c:	6f 81       	ldd	r22, Y+7	; 0x07
     d9e:	78 85       	ldd	r23, Y+8	; 0x08
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	9e 83       	std	Y+6, r25	; 0x06
     dae:	8d 83       	std	Y+5, r24	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <servo1_init+0xf8>
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);

}
     dc4:	2f 96       	adiw	r28, 0x0f	; 15
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <align_center>:

/*move bot such that tomato detected aligns in the center*/
/*our camera rotated 90 degrees, so x in image corresponds to y in real*/
void align_center(unsigned int x, unsigned int y)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	c2 54       	subi	r28, 0x42	; 66
     de0:	d0 40       	sbci	r29, 0x00	; 0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	9c af       	std	Y+60, r25	; 0x3c
     dee:	8b af       	std	Y+59, r24	; 0x3b
     df0:	7e af       	std	Y+62, r23	; 0x3e
     df2:	6d af       	std	Y+61, r22	; 0x3d
   unsigned int diff;
   if (x<MAX_X/2)	//above the center, therefore move upwards
     df4:	80 91 00 02 	lds	r24, 0x0200
     df8:	90 91 01 02 	lds	r25, 0x0201
     dfc:	21 96       	adiw	r28, 0x01	; 1
     dfe:	9f af       	std	Y+63, r25	; 0x3f
     e00:	8e af       	std	Y+62, r24	; 0x3e
     e02:	21 97       	sbiw	r28, 0x01	; 1
     e04:	21 96       	adiw	r28, 0x01	; 1
     e06:	8e ad       	ldd	r24, Y+62	; 0x3e
     e08:	9f ad       	ldd	r25, Y+63	; 0x3f
     e0a:	21 97       	sbiw	r28, 0x01	; 1
     e0c:	99 23       	and	r25, r25
     e0e:	4c f4       	brge	.+18     	; 0xe22 <align_center+0x4c>
     e10:	21 96       	adiw	r28, 0x01	; 1
     e12:	8e ad       	ldd	r24, Y+62	; 0x3e
     e14:	9f ad       	ldd	r25, Y+63	; 0x3f
     e16:	21 97       	sbiw	r28, 0x01	; 1
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	21 96       	adiw	r28, 0x01	; 1
     e1c:	9f af       	std	Y+63, r25	; 0x3f
     e1e:	8e af       	std	Y+62, r24	; 0x3e
     e20:	21 97       	sbiw	r28, 0x01	; 1
     e22:	21 96       	adiw	r28, 0x01	; 1
     e24:	8e ad       	ldd	r24, Y+62	; 0x3e
     e26:	9f ad       	ldd	r25, Y+63	; 0x3f
     e28:	21 97       	sbiw	r28, 0x01	; 1
     e2a:	95 95       	asr	r25
     e2c:	87 95       	ror	r24
     e2e:	9c 01       	movw	r18, r24
     e30:	8b ad       	ldd	r24, Y+59	; 0x3b
     e32:	9c ad       	ldd	r25, Y+60	; 0x3c
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	08 f0       	brcs	.+2      	; 0xe3c <align_center+0x66>
     e3a:	7c c0       	rjmp	.+248    	; 0xf34 <align_center+0x15e>
   {
	  //diff = abs(x-MAX_X/2);
	  //servo_2(initial_angle+diff/15);
	  initial_angle+=1;		//move the hand upwards
     e3c:	80 91 35 03 	lds	r24, 0x0335
     e40:	8f 5f       	subi	r24, 0xFF	; 255
     e42:	80 93 35 03 	sts	0x0335, r24
	  servo_2(initial_angle);
     e46:	80 91 35 03 	lds	r24, 0x0335
     e4a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a8 ec       	ldi	r26, 0xC8	; 200
     e54:	b2 e4       	ldi	r27, 0x42	; 66
     e56:	8d ab       	std	Y+53, r24	; 0x35
     e58:	9e ab       	std	Y+54, r25	; 0x36
     e5a:	af ab       	std	Y+55, r26	; 0x37
     e5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5e:	6d a9       	ldd	r22, Y+53	; 0x35
     e60:	7e a9       	ldd	r23, Y+54	; 0x36
     e62:	8f a9       	ldd	r24, Y+55	; 0x37
     e64:	98 ad       	ldd	r25, Y+56	; 0x38
     e66:	26 e6       	ldi	r18, 0x66	; 102
     e68:	36 e6       	ldi	r19, 0x66	; 102
     e6a:	46 e6       	ldi	r20, 0x66	; 102
     e6c:	55 e4       	ldi	r21, 0x45	; 69
     e6e:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	89 ab       	std	Y+49, r24	; 0x31
     e78:	9a ab       	std	Y+50, r25	; 0x32
     e7a:	ab ab       	std	Y+51, r26	; 0x33
     e7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e7e:	69 a9       	ldd	r22, Y+49	; 0x31
     e80:	7a a9       	ldd	r23, Y+50	; 0x32
     e82:	8b a9       	ldd	r24, Y+51	; 0x33
     e84:	9c a9       	ldd	r25, Y+52	; 0x34
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e8       	ldi	r20, 0x80	; 128
     e8c:	5f e3       	ldi	r21, 0x3F	; 63
     e8e:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     e92:	88 23       	and	r24, r24
     e94:	2c f4       	brge	.+10     	; 0xea0 <align_center+0xca>
		__ticks = 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	98 ab       	std	Y+48, r25	; 0x30
     e9c:	8f a7       	std	Y+47, r24	; 0x2f
     e9e:	3f c0       	rjmp	.+126    	; 0xf1e <align_center+0x148>
	else if (__tmp > 65535)
     ea0:	69 a9       	ldd	r22, Y+49	; 0x31
     ea2:	7a a9       	ldd	r23, Y+50	; 0x32
     ea4:	8b a9       	ldd	r24, Y+51	; 0x33
     ea6:	9c a9       	ldd	r25, Y+52	; 0x34
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	3f ef       	ldi	r19, 0xFF	; 255
     eac:	4f e7       	ldi	r20, 0x7F	; 127
     eae:	57 e4       	ldi	r21, 0x47	; 71
     eb0:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     eb4:	18 16       	cp	r1, r24
     eb6:	4c f5       	brge	.+82     	; 0xf0a <align_center+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb8:	6d a9       	ldd	r22, Y+53	; 0x35
     eba:	7e a9       	ldd	r23, Y+54	; 0x36
     ebc:	8f a9       	ldd	r24, Y+55	; 0x37
     ebe:	98 ad       	ldd	r25, Y+56	; 0x38
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e2       	ldi	r20, 0x20	; 32
     ec6:	51 e4       	ldi	r21, 0x41	; 65
     ec8:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	98 ab       	std	Y+48, r25	; 0x30
     ede:	8f a7       	std	Y+47, r24	; 0x2f
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <align_center+0x12a>
     ee2:	80 e7       	ldi	r24, 0x70	; 112
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	9e a7       	std	Y+46, r25	; 0x2e
     ee8:	8d a7       	std	Y+45, r24	; 0x2d
     eea:	8d a5       	ldd	r24, Y+45	; 0x2d
     eec:	9e a5       	ldd	r25, Y+46	; 0x2e
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <align_center+0x118>
     ef2:	9e a7       	std	Y+46, r25	; 0x2e
     ef4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ef8:	98 a9       	ldd	r25, Y+48	; 0x30
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	98 ab       	std	Y+48, r25	; 0x30
     efe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f00:	8f a5       	ldd	r24, Y+47	; 0x2f
     f02:	98 a9       	ldd	r25, Y+48	; 0x30
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	69 f7       	brne	.-38     	; 0xee2 <align_center+0x10c>
     f08:	90 c0       	rjmp	.+288    	; 0x102a <align_center+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0a:	69 a9       	ldd	r22, Y+49	; 0x31
     f0c:	7a a9       	ldd	r23, Y+50	; 0x32
     f0e:	8b a9       	ldd	r24, Y+51	; 0x33
     f10:	9c a9       	ldd	r25, Y+52	; 0x34
     f12:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	98 ab       	std	Y+48, r25	; 0x30
     f1c:	8f a7       	std	Y+47, r24	; 0x2f
     f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f20:	98 a9       	ldd	r25, Y+48	; 0x30
     f22:	9c a7       	std	Y+44, r25	; 0x2c
     f24:	8b a7       	std	Y+43, r24	; 0x2b
     f26:	8b a5       	ldd	r24, Y+43	; 0x2b
     f28:	9c a5       	ldd	r25, Y+44	; 0x2c
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <align_center+0x154>
     f2e:	9c a7       	std	Y+44, r25	; 0x2c
     f30:	8b a7       	std	Y+43, r24	; 0x2b
     f32:	7b c0       	rjmp	.+246    	; 0x102a <align_center+0x254>

   else	//below the center, therefore move downwards 
   {
	  //diff = abs(x-MAX_X/2);
	  //servo_2(initial_angle-diff/15);
	  initial_angle-=1;	//move the hand downwards
     f34:	80 91 35 03 	lds	r24, 0x0335
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	80 93 35 03 	sts	0x0335, r24
	  servo_2(initial_angle);
     f3e:	80 91 35 03 	lds	r24, 0x0335
     f42:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	a8 ec       	ldi	r26, 0xC8	; 200
     f4c:	b2 e4       	ldi	r27, 0x42	; 66
     f4e:	8f a3       	std	Y+39, r24	; 0x27
     f50:	98 a7       	std	Y+40, r25	; 0x28
     f52:	a9 a7       	std	Y+41, r26	; 0x29
     f54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f56:	6f a1       	ldd	r22, Y+39	; 0x27
     f58:	78 a5       	ldd	r23, Y+40	; 0x28
     f5a:	89 a5       	ldd	r24, Y+41	; 0x29
     f5c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f5e:	26 e6       	ldi	r18, 0x66	; 102
     f60:	36 e6       	ldi	r19, 0x66	; 102
     f62:	46 e6       	ldi	r20, 0x66	; 102
     f64:	55 e4       	ldi	r21, 0x45	; 69
     f66:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	8b a3       	std	Y+35, r24	; 0x23
     f70:	9c a3       	std	Y+36, r25	; 0x24
     f72:	ad a3       	std	Y+37, r26	; 0x25
     f74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f76:	6b a1       	ldd	r22, Y+35	; 0x23
     f78:	7c a1       	ldd	r23, Y+36	; 0x24
     f7a:	8d a1       	ldd	r24, Y+37	; 0x25
     f7c:	9e a1       	ldd	r25, Y+38	; 0x26
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
     f8a:	88 23       	and	r24, r24
     f8c:	2c f4       	brge	.+10     	; 0xf98 <align_center+0x1c2>
		__ticks = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	9a a3       	std	Y+34, r25	; 0x22
     f94:	89 a3       	std	Y+33, r24	; 0x21
     f96:	3f c0       	rjmp	.+126    	; 0x1016 <align_center+0x240>
	else if (__tmp > 65535)
     f98:	6b a1       	ldd	r22, Y+35	; 0x23
     f9a:	7c a1       	ldd	r23, Y+36	; 0x24
     f9c:	8d a1       	ldd	r24, Y+37	; 0x25
     f9e:	9e a1       	ldd	r25, Y+38	; 0x26
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	4f e7       	ldi	r20, 0x7F	; 127
     fa6:	57 e4       	ldi	r21, 0x47	; 71
     fa8:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
     fac:	18 16       	cp	r1, r24
     fae:	4c f5       	brge	.+82     	; 0x1002 <align_center+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb0:	6f a1       	ldd	r22, Y+39	; 0x27
     fb2:	78 a5       	ldd	r23, Y+40	; 0x28
     fb4:	89 a5       	ldd	r24, Y+41	; 0x29
     fb6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	9a a3       	std	Y+34, r25	; 0x22
     fd6:	89 a3       	std	Y+33, r24	; 0x21
     fd8:	0f c0       	rjmp	.+30     	; 0xff8 <align_center+0x222>
     fda:	80 e7       	ldi	r24, 0x70	; 112
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	98 a3       	std	Y+32, r25	; 0x20
     fe0:	8f 8f       	std	Y+31, r24	; 0x1f
     fe2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fe4:	98 a1       	ldd	r25, Y+32	; 0x20
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <align_center+0x210>
     fea:	98 a3       	std	Y+32, r25	; 0x20
     fec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fee:	89 a1       	ldd	r24, Y+33	; 0x21
     ff0:	9a a1       	ldd	r25, Y+34	; 0x22
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	9a a3       	std	Y+34, r25	; 0x22
     ff6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff8:	89 a1       	ldd	r24, Y+33	; 0x21
     ffa:	9a a1       	ldd	r25, Y+34	; 0x22
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	69 f7       	brne	.-38     	; 0xfda <align_center+0x204>
    1000:	14 c0       	rjmp	.+40     	; 0x102a <align_center+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1002:	6b a1       	ldd	r22, Y+35	; 0x23
    1004:	7c a1       	ldd	r23, Y+36	; 0x24
    1006:	8d a1       	ldd	r24, Y+37	; 0x25
    1008:	9e a1       	ldd	r25, Y+38	; 0x26
    100a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	9a a3       	std	Y+34, r25	; 0x22
    1014:	89 a3       	std	Y+33, r24	; 0x21
    1016:	89 a1       	ldd	r24, Y+33	; 0x21
    1018:	9a a1       	ldd	r25, Y+34	; 0x22
    101a:	9e 8f       	std	Y+30, r25	; 0x1e
    101c:	8d 8f       	std	Y+29, r24	; 0x1d
    101e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1020:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <align_center+0x24c>
    1026:	9e 8f       	std	Y+30, r25	; 0x1e
    1028:	8d 8f       	std	Y+29, r24	; 0x1d
	  _delay_ms(100);    
   }


   if (y<MAX_Y/2)	//left to center
    102a:	80 91 02 02 	lds	r24, 0x0202
    102e:	90 91 03 02 	lds	r25, 0x0203
    1032:	23 96       	adiw	r28, 0x03	; 3
    1034:	9f af       	std	Y+63, r25	; 0x3f
    1036:	8e af       	std	Y+62, r24	; 0x3e
    1038:	23 97       	sbiw	r28, 0x03	; 3
    103a:	23 96       	adiw	r28, 0x03	; 3
    103c:	8e ad       	ldd	r24, Y+62	; 0x3e
    103e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1040:	23 97       	sbiw	r28, 0x03	; 3
    1042:	99 23       	and	r25, r25
    1044:	4c f4       	brge	.+18     	; 0x1058 <align_center+0x282>
    1046:	23 96       	adiw	r28, 0x03	; 3
    1048:	8e ad       	ldd	r24, Y+62	; 0x3e
    104a:	9f ad       	ldd	r25, Y+63	; 0x3f
    104c:	23 97       	sbiw	r28, 0x03	; 3
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	23 96       	adiw	r28, 0x03	; 3
    1052:	9f af       	std	Y+63, r25	; 0x3f
    1054:	8e af       	std	Y+62, r24	; 0x3e
    1056:	23 97       	sbiw	r28, 0x03	; 3
    1058:	23 96       	adiw	r28, 0x03	; 3
    105a:	8e ad       	ldd	r24, Y+62	; 0x3e
    105c:	9f ad       	ldd	r25, Y+63	; 0x3f
    105e:	23 97       	sbiw	r28, 0x03	; 3
    1060:	95 95       	asr	r25
    1062:	87 95       	ror	r24
    1064:	9c 01       	movw	r18, r24
    1066:	8d ad       	ldd	r24, Y+61	; 0x3d
    1068:	9e ad       	ldd	r25, Y+62	; 0x3e
    106a:	82 17       	cp	r24, r18
    106c:	93 07       	cpc	r25, r19
    106e:	08 f0       	brcs	.+2      	; 0x1072 <align_center+0x29c>
    1070:	80 c0       	rjmp	.+256    	; 0x1172 <align_center+0x39c>
   {
      PORTA=0x09;	//move backward
    1072:	e2 e2       	ldi	r30, 0x22	; 34
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	89 e0       	ldi	r24, 0x09	; 9
    1078:	80 83       	st	Z, r24
	  velocity(250,250);
    107a:	8a ef       	ldi	r24, 0xFA	; 250
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	6a ef       	ldi	r22, 0xFA	; 250
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a0 ea       	ldi	r26, 0xA0	; 160
    108c:	b1 e4       	ldi	r27, 0x41	; 65
    108e:	89 8f       	std	Y+25, r24	; 0x19
    1090:	9a 8f       	std	Y+26, r25	; 0x1a
    1092:	ab 8f       	std	Y+27, r26	; 0x1b
    1094:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1096:	69 8d       	ldd	r22, Y+25	; 0x19
    1098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    109a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    109c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    109e:	26 e6       	ldi	r18, 0x66	; 102
    10a0:	36 e6       	ldi	r19, 0x66	; 102
    10a2:	46 e6       	ldi	r20, 0x66	; 102
    10a4:	55 e4       	ldi	r21, 0x45	; 69
    10a6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	8d 8b       	std	Y+21, r24	; 0x15
    10b0:	9e 8b       	std	Y+22, r25	; 0x16
    10b2:	af 8b       	std	Y+23, r26	; 0x17
    10b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10b6:	6d 89       	ldd	r22, Y+21	; 0x15
    10b8:	7e 89       	ldd	r23, Y+22	; 0x16
    10ba:	8f 89       	ldd	r24, Y+23	; 0x17
    10bc:	98 8d       	ldd	r25, Y+24	; 0x18
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e8       	ldi	r20, 0x80	; 128
    10c4:	5f e3       	ldi	r21, 0x3F	; 63
    10c6:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    10ca:	88 23       	and	r24, r24
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <align_center+0x302>
		__ticks = 1;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 8b       	std	Y+20, r25	; 0x14
    10d4:	8b 8b       	std	Y+19, r24	; 0x13
    10d6:	3f c0       	rjmp	.+126    	; 0x1156 <align_center+0x380>
	else if (__tmp > 65535)
    10d8:	6d 89       	ldd	r22, Y+21	; 0x15
    10da:	7e 89       	ldd	r23, Y+22	; 0x16
    10dc:	8f 89       	ldd	r24, Y+23	; 0x17
    10de:	98 8d       	ldd	r25, Y+24	; 0x18
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	3f ef       	ldi	r19, 0xFF	; 255
    10e4:	4f e7       	ldi	r20, 0x7F	; 127
    10e6:	57 e4       	ldi	r21, 0x47	; 71
    10e8:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    10ec:	18 16       	cp	r1, r24
    10ee:	4c f5       	brge	.+82     	; 0x1142 <align_center+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f0:	69 8d       	ldd	r22, Y+25	; 0x19
    10f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e2       	ldi	r20, 0x20	; 32
    10fe:	51 e4       	ldi	r21, 0x41	; 65
    1100:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	9c 8b       	std	Y+20, r25	; 0x14
    1116:	8b 8b       	std	Y+19, r24	; 0x13
    1118:	0f c0       	rjmp	.+30     	; 0x1138 <align_center+0x362>
    111a:	80 e7       	ldi	r24, 0x70	; 112
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	9a 8b       	std	Y+18, r25	; 0x12
    1120:	89 8b       	std	Y+17, r24	; 0x11
    1122:	89 89       	ldd	r24, Y+17	; 0x11
    1124:	9a 89       	ldd	r25, Y+18	; 0x12
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <align_center+0x350>
    112a:	9a 8b       	std	Y+18, r25	; 0x12
    112c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112e:	8b 89       	ldd	r24, Y+19	; 0x13
    1130:	9c 89       	ldd	r25, Y+20	; 0x14
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	9c 8b       	std	Y+20, r25	; 0x14
    1136:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1138:	8b 89       	ldd	r24, Y+19	; 0x13
    113a:	9c 89       	ldd	r25, Y+20	; 0x14
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	69 f7       	brne	.-38     	; 0x111a <align_center+0x344>
    1140:	14 c0       	rjmp	.+40     	; 0x116a <align_center+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1142:	6d 89       	ldd	r22, Y+21	; 0x15
    1144:	7e 89       	ldd	r23, Y+22	; 0x16
    1146:	8f 89       	ldd	r24, Y+23	; 0x17
    1148:	98 8d       	ldd	r25, Y+24	; 0x18
    114a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	9c 8b       	std	Y+20, r25	; 0x14
    1154:	8b 8b       	std	Y+19, r24	; 0x13
    1156:	8b 89       	ldd	r24, Y+19	; 0x13
    1158:	9c 89       	ldd	r25, Y+20	; 0x14
    115a:	98 8b       	std	Y+16, r25	; 0x10
    115c:	8f 87       	std	Y+15, r24	; 0x0f
    115e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1160:	98 89       	ldd	r25, Y+16	; 0x10
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <align_center+0x38c>
    1166:	98 8b       	std	Y+16, r25	; 0x10
    1168:	8f 87       	std	Y+15, r24	; 0x0f
	  //diff = abs(y-MAX_Y/2);
	  //_delay_ms(diff/100);
	  _delay_ms(20);	
	  PORTA=0x00;	  //stop
    116a:	e2 e2       	ldi	r30, 0x22	; 34
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	10 82       	st	Z, r1
    1170:	7f c0       	rjmp	.+254    	; 0x1270 <align_center+0x49a>
   }

   else	//right to center
   {
	  PORTA=0x06;	//move forward
    1172:	e2 e2       	ldi	r30, 0x22	; 34
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	86 e0       	ldi	r24, 0x06	; 6
    1178:	80 83       	st	Z, r24
	  velocity(250,250);
    117a:	8a ef       	ldi	r24, 0xFA	; 250
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	6a ef       	ldi	r22, 0xFA	; 250
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 ea       	ldi	r26, 0xA0	; 160
    118c:	b1 e4       	ldi	r27, 0x41	; 65
    118e:	8b 87       	std	Y+11, r24	; 0x0b
    1190:	9c 87       	std	Y+12, r25	; 0x0c
    1192:	ad 87       	std	Y+13, r26	; 0x0d
    1194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	6b 85       	ldd	r22, Y+11	; 0x0b
    1198:	7c 85       	ldd	r23, Y+12	; 0x0c
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	9e 85       	ldd	r25, Y+14	; 0x0e
    119e:	26 e6       	ldi	r18, 0x66	; 102
    11a0:	36 e6       	ldi	r19, 0x66	; 102
    11a2:	46 e6       	ldi	r20, 0x66	; 102
    11a4:	55 e4       	ldi	r21, 0x45	; 69
    11a6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8f 83       	std	Y+7, r24	; 0x07
    11b0:	98 87       	std	Y+8, r25	; 0x08
    11b2:	a9 87       	std	Y+9, r26	; 0x09
    11b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <align_center+0x402>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <align_center+0x480>
	else if (__tmp > 65535)
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <align_center+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 83       	std	Y+5, r24	; 0x05
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <align_center+0x462>
    121a:	80 e7       	ldi	r24, 0x70	; 112
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <align_center+0x450>
    122a:	9c 83       	std	Y+4, r25	; 0x04
    122c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <align_center+0x444>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <align_center+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6f 81       	ldd	r22, Y+7	; 0x07
    1244:	78 85       	ldd	r23, Y+8	; 0x08
    1246:	89 85       	ldd	r24, Y+9	; 0x09
    1248:	9a 85       	ldd	r25, Y+10	; 0x0a
    124a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <align_center+0x48c>
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
	  //diff = abs(y-MAX_Y/2);
	  //_delay_ms(diff/100);
	  _delay_ms(20);
	  PORTA=0x00;
    126a:	e2 e2       	ldi	r30, 0x22	; 34
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	10 82       	st	Z, r1
   }
	
}
    1270:	ce 5b       	subi	r28, 0xBE	; 190
    1272:	df 4f       	sbci	r29, 0xFF	; 255
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <pluck_fruit>:

void pluck_fruit()	//cutting the fruit, servo 3 initially at 180 degree, open pos
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	2e 97       	sbiw	r28, 0x0e	; 14
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
	servo_3(120);	//move to 120 degrees close position
    1298:	88 e7       	ldi	r24, 0x78	; 120
    129a:	0e 94 c7 01 	call	0x38e	; 0x38e <servo_3>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a6 e9       	ldi	r26, 0x96	; 150
    12a4:	b3 e4       	ldi	r27, 0x43	; 67
    12a6:	8b 87       	std	Y+11, r24	; 0x0b
    12a8:	9c 87       	std	Y+12, r25	; 0x0c
    12aa:	ad 87       	std	Y+13, r26	; 0x0d
    12ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b6:	26 e6       	ldi	r18, 0x66	; 102
    12b8:	36 e6       	ldi	r19, 0x66	; 102
    12ba:	46 e6       	ldi	r20, 0x66	; 102
    12bc:	55 e4       	ldi	r21, 0x45	; 69
    12be:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	8f 83       	std	Y+7, r24	; 0x07
    12c8:	98 87       	std	Y+8, r25	; 0x08
    12ca:	a9 87       	std	Y+9, r26	; 0x09
    12cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ce:	6f 81       	ldd	r22, Y+7	; 0x07
    12d0:	78 85       	ldd	r23, Y+8	; 0x08
    12d2:	89 85       	ldd	r24, Y+9	; 0x09
    12d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <pluck_fruit+0x6c>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <pluck_fruit+0xea>
	else if (__tmp > 65535)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <pluck_fruit+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	6b 85       	ldd	r22, Y+11	; 0x0b
    130a:	7c 85       	ldd	r23, Y+12	; 0x0c
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <pluck_fruit+0xcc>
    1332:	80 e7       	ldi	r24, 0x70	; 112
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <pluck_fruit+0xba>
    1342:	9c 83       	std	Y+4, r25	; 0x04
    1344:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <pluck_fruit+0xae>
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <pluck_fruit+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	6f 81       	ldd	r22, Y+7	; 0x07
    135c:	78 85       	ldd	r23, Y+8	; 0x08
    135e:	89 85       	ldd	r24, Y+9	; 0x09
    1360:	9a 85       	ldd	r25, Y+10	; 0x0a
    1362:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	9a 81       	ldd	r25, Y+2	; 0x02
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <pluck_fruit+0xf6>
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	servo_3(120);
    1382:	88 e7       	ldi	r24, 0x78	; 120
    1384:	0e 94 c7 01 	call	0x38e	; 0x38e <servo_3>
}
    1388:	2e 96       	adiw	r28, 0x0e	; 14
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	c0 57       	subi	r28, 0x70	; 112
    13a8:	d0 40       	sbci	r29, 0x00	; 0
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	fe 01       	movw	r30, r28
    13b6:	e3 59       	subi	r30, 0x93	; 147
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a0 e8       	ldi	r26, 0x80	; 128
    13c0:	bf e3       	ldi	r27, 0x3F	; 63
    13c2:	80 83       	st	Z, r24
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	a2 83       	std	Z+2, r26	; 0x02
    13c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ca:	8e 01       	movw	r16, r28
    13cc:	07 59       	subi	r16, 0x97	; 151
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	fe 01       	movw	r30, r28
    13d2:	e3 59       	subi	r30, 0x93	; 147
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	60 81       	ld	r22, Z
    13d8:	71 81       	ldd	r23, Z+1	; 0x01
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	26 e6       	ldi	r18, 0x66	; 102
    13e0:	36 e6       	ldi	r19, 0x66	; 102
    13e2:	46 e6       	ldi	r20, 0x66	; 102
    13e4:	55 e4       	ldi	r21, 0x45	; 69
    13e6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	f8 01       	movw	r30, r16
    13f0:	80 83       	st	Z, r24
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	a2 83       	std	Z+2, r26	; 0x02
    13f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13f8:	fe 01       	movw	r30, r28
    13fa:	e7 59       	subi	r30, 0x97	; 151
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	60 81       	ld	r22, Z
    1400:	71 81       	ldd	r23, Z+1	; 0x01
    1402:	82 81       	ldd	r24, Z+2	; 0x02
    1404:	93 81       	ldd	r25, Z+3	; 0x03
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    1412:	88 23       	and	r24, r24
    1414:	44 f4       	brge	.+16     	; 0x1426 <lcd_set_4bit+0x8c>
		__ticks = 1;
    1416:	fe 01       	movw	r30, r28
    1418:	e9 59       	subi	r30, 0x99	; 153
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	91 83       	std	Z+1, r25	; 0x01
    1422:	80 83       	st	Z, r24
    1424:	64 c0       	rjmp	.+200    	; 0x14ee <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
    1426:	fe 01       	movw	r30, r28
    1428:	e7 59       	subi	r30, 0x97	; 151
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	60 81       	ld	r22, Z
    142e:	71 81       	ldd	r23, Z+1	; 0x01
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	3f ef       	ldi	r19, 0xFF	; 255
    1438:	4f e7       	ldi	r20, 0x7F	; 127
    143a:	57 e4       	ldi	r21, 0x47	; 71
    143c:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    1440:	18 16       	cp	r1, r24
    1442:	0c f0       	brlt	.+2      	; 0x1446 <lcd_set_4bit+0xac>
    1444:	43 c0       	rjmp	.+134    	; 0x14cc <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	fe 01       	movw	r30, r28
    1448:	e3 59       	subi	r30, 0x93	; 147
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e2       	ldi	r20, 0x20	; 32
    145a:	51 e4       	ldi	r21, 0x41	; 65
    145c:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8e 01       	movw	r16, r28
    1466:	09 59       	subi	r16, 0x99	; 153
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
    146a:	bc 01       	movw	r22, r24
    146c:	cd 01       	movw	r24, r26
    146e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	f8 01       	movw	r30, r16
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	1f c0       	rjmp	.+62     	; 0x14bc <lcd_set_4bit+0x122>
    147e:	fe 01       	movw	r30, r28
    1480:	eb 59       	subi	r30, 0x9B	; 155
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 e7       	ldi	r24, 0x70	; 112
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	91 83       	std	Z+1, r25	; 0x01
    148a:	80 83       	st	Z, r24
    148c:	fe 01       	movw	r30, r28
    148e:	eb 59       	subi	r30, 0x9B	; 155
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	91 81       	ldd	r25, Z+1	; 0x01
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <lcd_set_4bit+0xfc>
    149a:	fe 01       	movw	r30, r28
    149c:	eb 59       	subi	r30, 0x9B	; 155
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a4:	de 01       	movw	r26, r28
    14a6:	a9 59       	subi	r26, 0x99	; 153
    14a8:	bf 4f       	sbci	r27, 0xFF	; 255
    14aa:	fe 01       	movw	r30, r28
    14ac:	e9 59       	subi	r30, 0x99	; 153
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	91 81       	ldd	r25, Z+1	; 0x01
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	9c 93       	st	X, r25
    14ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14bc:	fe 01       	movw	r30, r28
    14be:	e9 59       	subi	r30, 0x99	; 153
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	d1 f6       	brne	.-76     	; 0x147e <lcd_set_4bit+0xe4>
    14ca:	27 c0       	rjmp	.+78     	; 0x151a <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	8e 01       	movw	r16, r28
    14ce:	09 59       	subi	r16, 0x99	; 153
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
    14d2:	fe 01       	movw	r30, r28
    14d4:	e7 59       	subi	r30, 0x97	; 151
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	60 81       	ld	r22, Z
    14da:	71 81       	ldd	r23, Z+1	; 0x01
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	f8 01       	movw	r30, r16
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	80 83       	st	Z, r24
    14ee:	de 01       	movw	r26, r28
    14f0:	ad 59       	subi	r26, 0x9D	; 157
    14f2:	bf 4f       	sbci	r27, 0xFF	; 255
    14f4:	fe 01       	movw	r30, r28
    14f6:	e9 59       	subi	r30, 0x99	; 153
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	8d 93       	st	X+, r24
    1500:	9c 93       	st	X, r25
    1502:	fe 01       	movw	r30, r28
    1504:	ed 59       	subi	r30, 0x9D	; 157
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <lcd_set_4bit+0x172>
    1510:	fe 01       	movw	r30, r28
    1512:	ed 59       	subi	r30, 0x9D	; 157
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    151a:	a8 e2       	ldi	r26, 0x28	; 40
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e2       	ldi	r30, 0x28	; 40
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8e 7f       	andi	r24, 0xFE	; 254
    1526:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1528:	a8 e2       	ldi	r26, 0x28	; 40
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e8 e2       	ldi	r30, 0x28	; 40
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8d 7f       	andi	r24, 0xFD	; 253
    1534:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    1536:	e8 e2       	ldi	r30, 0x28	; 40
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 e3       	ldi	r24, 0x30	; 48
    153c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    153e:	a8 e2       	ldi	r26, 0x28	; 40
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e8 e2       	ldi	r30, 0x28	; 40
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	8c 93       	st	X, r24
    154c:	fe 01       	movw	r30, r28
    154e:	e1 5a       	subi	r30, 0xA1	; 161
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 ea       	ldi	r26, 0xA0	; 160
    1558:	b0 e4       	ldi	r27, 0x40	; 64
    155a:	80 83       	st	Z, r24
    155c:	91 83       	std	Z+1, r25	; 0x01
    155e:	a2 83       	std	Z+2, r26	; 0x02
    1560:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1562:	8e 01       	movw	r16, r28
    1564:	05 5a       	subi	r16, 0xA5	; 165
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	e1 5a       	subi	r30, 0xA1	; 161
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	26 e6       	ldi	r18, 0x66	; 102
    1578:	36 e6       	ldi	r19, 0x66	; 102
    157a:	46 e6       	ldi	r20, 0x66	; 102
    157c:	55 e4       	ldi	r21, 0x45	; 69
    157e:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	f8 01       	movw	r30, r16
    1588:	80 83       	st	Z, r24
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	a2 83       	std	Z+2, r26	; 0x02
    158e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1590:	fe 01       	movw	r30, r28
    1592:	e5 5a       	subi	r30, 0xA5	; 165
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	44 f4       	brge	.+16     	; 0x15be <lcd_set_4bit+0x224>
		__ticks = 1;
    15ae:	fe 01       	movw	r30, r28
    15b0:	e7 5a       	subi	r30, 0xA7	; 167
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	64 c0       	rjmp	.+200    	; 0x1686 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
    15be:	fe 01       	movw	r30, r28
    15c0:	e5 5a       	subi	r30, 0xA5	; 165
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    15d8:	18 16       	cp	r1, r24
    15da:	0c f0       	brlt	.+2      	; 0x15de <lcd_set_4bit+0x244>
    15dc:	43 c0       	rjmp	.+134    	; 0x1664 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15de:	fe 01       	movw	r30, r28
    15e0:	e1 5a       	subi	r30, 0xA1	; 161
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8e 01       	movw	r16, r28
    15fe:	07 5a       	subi	r16, 0xA7	; 167
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	f8 01       	movw	r30, r16
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	1f c0       	rjmp	.+62     	; 0x1654 <lcd_set_4bit+0x2ba>
    1616:	fe 01       	movw	r30, r28
    1618:	e9 5a       	subi	r30, 0xA9	; 169
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 e7       	ldi	r24, 0x70	; 112
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
    1624:	fe 01       	movw	r30, r28
    1626:	e9 5a       	subi	r30, 0xA9	; 169
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	91 81       	ldd	r25, Z+1	; 0x01
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <lcd_set_4bit+0x294>
    1632:	fe 01       	movw	r30, r28
    1634:	e9 5a       	subi	r30, 0xA9	; 169
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	de 01       	movw	r26, r28
    163e:	a7 5a       	subi	r26, 0xA7	; 167
    1640:	bf 4f       	sbci	r27, 0xFF	; 255
    1642:	fe 01       	movw	r30, r28
    1644:	e7 5a       	subi	r30, 0xA7	; 167
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	9c 93       	st	X, r25
    1652:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1654:	fe 01       	movw	r30, r28
    1656:	e7 5a       	subi	r30, 0xA7	; 167
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	d1 f6       	brne	.-76     	; 0x1616 <lcd_set_4bit+0x27c>
    1662:	27 c0       	rjmp	.+78     	; 0x16b2 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	8e 01       	movw	r16, r28
    1666:	07 5a       	subi	r16, 0xA7	; 167
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	e5 5a       	subi	r30, 0xA5	; 165
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	f8 01       	movw	r30, r16
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
    1686:	de 01       	movw	r26, r28
    1688:	ab 5a       	subi	r26, 0xAB	; 171
    168a:	bf 4f       	sbci	r27, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	e7 5a       	subi	r30, 0xA7	; 167
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	8d 93       	st	X+, r24
    1698:	9c 93       	st	X, r25
    169a:	fe 01       	movw	r30, r28
    169c:	eb 5a       	subi	r30, 0xAB	; 171
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <lcd_set_4bit+0x30a>
    16a8:	fe 01       	movw	r30, r28
    16aa:	eb 5a       	subi	r30, 0xAB	; 171
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    16b2:	a8 e2       	ldi	r26, 0x28	; 40
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e2       	ldi	r30, 0x28	; 40
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8b 7f       	andi	r24, 0xFB	; 251
    16be:	8c 93       	st	X, r24
    16c0:	fe 01       	movw	r30, r28
    16c2:	ef 5a       	subi	r30, 0xAF	; 175
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e8       	ldi	r26, 0x80	; 128
    16cc:	bf e3       	ldi	r27, 0x3F	; 63
    16ce:	80 83       	st	Z, r24
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	a2 83       	std	Z+2, r26	; 0x02
    16d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d6:	8e 01       	movw	r16, r28
    16d8:	03 5b       	subi	r16, 0xB3	; 179
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	fe 01       	movw	r30, r28
    16de:	ef 5a       	subi	r30, 0xAF	; 175
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	26 e6       	ldi	r18, 0x66	; 102
    16ec:	36 e6       	ldi	r19, 0x66	; 102
    16ee:	46 e6       	ldi	r20, 0x66	; 102
    16f0:	55 e4       	ldi	r21, 0x45	; 69
    16f2:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	f8 01       	movw	r30, r16
    16fc:	80 83       	st	Z, r24
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	a2 83       	std	Z+2, r26	; 0x02
    1702:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1704:	fe 01       	movw	r30, r28
    1706:	e3 5b       	subi	r30, 0xB3	; 179
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	44 f4       	brge	.+16     	; 0x1732 <lcd_set_4bit+0x398>
		__ticks = 1;
    1722:	fe 01       	movw	r30, r28
    1724:	e5 5b       	subi	r30, 0xB5	; 181
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	64 c0       	rjmp	.+200    	; 0x17fa <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
    1732:	fe 01       	movw	r30, r28
    1734:	e3 5b       	subi	r30, 0xB3	; 179
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	3f ef       	ldi	r19, 0xFF	; 255
    1744:	4f e7       	ldi	r20, 0x7F	; 127
    1746:	57 e4       	ldi	r21, 0x47	; 71
    1748:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    174c:	18 16       	cp	r1, r24
    174e:	0c f0       	brlt	.+2      	; 0x1752 <lcd_set_4bit+0x3b8>
    1750:	43 c0       	rjmp	.+134    	; 0x17d8 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1752:	fe 01       	movw	r30, r28
    1754:	ef 5a       	subi	r30, 0xAF	; 175
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e2       	ldi	r20, 0x20	; 32
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8e 01       	movw	r16, r28
    1772:	05 5b       	subi	r16, 0xB5	; 181
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	f8 01       	movw	r30, r16
    1784:	91 83       	std	Z+1, r25	; 0x01
    1786:	80 83       	st	Z, r24
    1788:	1f c0       	rjmp	.+62     	; 0x17c8 <lcd_set_4bit+0x42e>
    178a:	fe 01       	movw	r30, r28
    178c:	e7 5b       	subi	r30, 0xB7	; 183
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	80 e7       	ldi	r24, 0x70	; 112
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	fe 01       	movw	r30, r28
    179a:	e7 5b       	subi	r30, 0xB7	; 183
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <lcd_set_4bit+0x408>
    17a6:	fe 01       	movw	r30, r28
    17a8:	e7 5b       	subi	r30, 0xB7	; 183
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	de 01       	movw	r26, r28
    17b2:	a5 5b       	subi	r26, 0xB5	; 181
    17b4:	bf 4f       	sbci	r27, 0xFF	; 255
    17b6:	fe 01       	movw	r30, r28
    17b8:	e5 5b       	subi	r30, 0xB5	; 181
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	80 81       	ld	r24, Z
    17be:	91 81       	ldd	r25, Z+1	; 0x01
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	11 96       	adiw	r26, 0x01	; 1
    17c4:	9c 93       	st	X, r25
    17c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	fe 01       	movw	r30, r28
    17ca:	e5 5b       	subi	r30, 0xB5	; 181
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	d1 f6       	brne	.-76     	; 0x178a <lcd_set_4bit+0x3f0>
    17d6:	27 c0       	rjmp	.+78     	; 0x1826 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d8:	8e 01       	movw	r16, r28
    17da:	05 5b       	subi	r16, 0xB5	; 181
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	fe 01       	movw	r30, r28
    17e0:	e3 5b       	subi	r30, 0xB3	; 179
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
    17ea:	93 81       	ldd	r25, Z+3	; 0x03
    17ec:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	f8 01       	movw	r30, r16
    17f6:	91 83       	std	Z+1, r25	; 0x01
    17f8:	80 83       	st	Z, r24
    17fa:	de 01       	movw	r26, r28
    17fc:	a9 5b       	subi	r26, 0xB9	; 185
    17fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1800:	fe 01       	movw	r30, r28
    1802:	e5 5b       	subi	r30, 0xB5	; 181
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	8d 93       	st	X+, r24
    180c:	9c 93       	st	X, r25
    180e:	fe 01       	movw	r30, r28
    1810:	e9 5b       	subi	r30, 0xB9	; 185
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <lcd_set_4bit+0x47e>
    181c:	fe 01       	movw	r30, r28
    181e:	e9 5b       	subi	r30, 0xB9	; 185
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1826:	a8 e2       	ldi	r26, 0x28	; 40
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e8 e2       	ldi	r30, 0x28	; 40
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	8e 7f       	andi	r24, 0xFE	; 254
    1832:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1834:	a8 e2       	ldi	r26, 0x28	; 40
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e8 e2       	ldi	r30, 0x28	; 40
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	8d 7f       	andi	r24, 0xFD	; 253
    1840:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    1842:	e8 e2       	ldi	r30, 0x28	; 40
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 e3       	ldi	r24, 0x30	; 48
    1848:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    184a:	a8 e2       	ldi	r26, 0x28	; 40
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e8 e2       	ldi	r30, 0x28	; 40
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	84 60       	ori	r24, 0x04	; 4
    1856:	8c 93       	st	X, r24
    1858:	fe 01       	movw	r30, r28
    185a:	ed 5b       	subi	r30, 0xBD	; 189
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 ea       	ldi	r26, 0xA0	; 160
    1864:	b0 e4       	ldi	r27, 0x40	; 64
    1866:	80 83       	st	Z, r24
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	a2 83       	std	Z+2, r26	; 0x02
    186c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186e:	8e 01       	movw	r16, r28
    1870:	01 5c       	subi	r16, 0xC1	; 193
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	fe 01       	movw	r30, r28
    1876:	ed 5b       	subi	r30, 0xBD	; 189
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	26 e6       	ldi	r18, 0x66	; 102
    1884:	36 e6       	ldi	r19, 0x66	; 102
    1886:	46 e6       	ldi	r20, 0x66	; 102
    1888:	55 e4       	ldi	r21, 0x45	; 69
    188a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	f8 01       	movw	r30, r16
    1894:	80 83       	st	Z, r24
    1896:	91 83       	std	Z+1, r25	; 0x01
    1898:	a2 83       	std	Z+2, r26	; 0x02
    189a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    189c:	fe 01       	movw	r30, r28
    189e:	ff 96       	adiw	r30, 0x3f	; 63
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <lcd_set_4bit+0x528>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9e af       	std	Y+62, r25	; 0x3e
    18be:	8d af       	std	Y+61, r24	; 0x3d
    18c0:	46 c0       	rjmp	.+140    	; 0x194e <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
    18c2:	fe 01       	movw	r30, r28
    18c4:	ff 96       	adiw	r30, 0x3f	; 63
    18c6:	60 81       	ld	r22, Z
    18c8:	71 81       	ldd	r23, Z+1	; 0x01
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	64 f5       	brge	.+88     	; 0x1936 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18de:	fe 01       	movw	r30, r28
    18e0:	ed 5b       	subi	r30, 0xBD	; 189
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9e af       	std	Y+62, r25	; 0x3e
    190a:	8d af       	std	Y+61, r24	; 0x3d
    190c:	0f c0       	rjmp	.+30     	; 0x192c <lcd_set_4bit+0x592>
    190e:	80 e7       	ldi	r24, 0x70	; 112
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	9c af       	std	Y+60, r25	; 0x3c
    1914:	8b af       	std	Y+59, r24	; 0x3b
    1916:	8b ad       	ldd	r24, Y+59	; 0x3b
    1918:	9c ad       	ldd	r25, Y+60	; 0x3c
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <lcd_set_4bit+0x580>
    191e:	9c af       	std	Y+60, r25	; 0x3c
    1920:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8d ad       	ldd	r24, Y+61	; 0x3d
    1924:	9e ad       	ldd	r25, Y+62	; 0x3e
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9e af       	std	Y+62, r25	; 0x3e
    192a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8d ad       	ldd	r24, Y+61	; 0x3d
    192e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <lcd_set_4bit+0x574>
    1934:	16 c0       	rjmp	.+44     	; 0x1962 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	fe 01       	movw	r30, r28
    1938:	ff 96       	adiw	r30, 0x3f	; 63
    193a:	60 81       	ld	r22, Z
    193c:	71 81       	ldd	r23, Z+1	; 0x01
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9e af       	std	Y+62, r25	; 0x3e
    194c:	8d af       	std	Y+61, r24	; 0x3d
    194e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1950:	9e ad       	ldd	r25, Y+62	; 0x3e
    1952:	9a af       	std	Y+58, r25	; 0x3a
    1954:	89 af       	std	Y+57, r24	; 0x39
    1956:	89 ad       	ldd	r24, Y+57	; 0x39
    1958:	9a ad       	ldd	r25, Y+58	; 0x3a
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <lcd_set_4bit+0x5c0>
    195e:	9a af       	std	Y+58, r25	; 0x3a
    1960:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1962:	a8 e2       	ldi	r26, 0x28	; 40
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e8 e2       	ldi	r30, 0x28	; 40
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8b 7f       	andi	r24, 0xFB	; 251
    196e:	8c 93       	st	X, r24
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e8       	ldi	r26, 0x80	; 128
    1976:	bf e3       	ldi	r27, 0x3F	; 63
    1978:	8d ab       	std	Y+53, r24	; 0x35
    197a:	9e ab       	std	Y+54, r25	; 0x36
    197c:	af ab       	std	Y+55, r26	; 0x37
    197e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6d a9       	ldd	r22, Y+53	; 0x35
    1982:	7e a9       	ldd	r23, Y+54	; 0x36
    1984:	8f a9       	ldd	r24, Y+55	; 0x37
    1986:	98 ad       	ldd	r25, Y+56	; 0x38
    1988:	26 e6       	ldi	r18, 0x66	; 102
    198a:	36 e6       	ldi	r19, 0x66	; 102
    198c:	46 e6       	ldi	r20, 0x66	; 102
    198e:	55 e4       	ldi	r21, 0x45	; 69
    1990:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	89 ab       	std	Y+49, r24	; 0x31
    199a:	9a ab       	std	Y+50, r25	; 0x32
    199c:	ab ab       	std	Y+51, r26	; 0x33
    199e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19a0:	69 a9       	ldd	r22, Y+49	; 0x31
    19a2:	7a a9       	ldd	r23, Y+50	; 0x32
    19a4:	8b a9       	ldd	r24, Y+51	; 0x33
    19a6:	9c a9       	ldd	r25, Y+52	; 0x34
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <lcd_set_4bit+0x628>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	98 ab       	std	Y+48, r25	; 0x30
    19be:	8f a7       	std	Y+47, r24	; 0x2f
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
    19c2:	69 a9       	ldd	r22, Y+49	; 0x31
    19c4:	7a a9       	ldd	r23, Y+50	; 0x32
    19c6:	8b a9       	ldd	r24, Y+51	; 0x33
    19c8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6d a9       	ldd	r22, Y+53	; 0x35
    19dc:	7e a9       	ldd	r23, Y+54	; 0x36
    19de:	8f a9       	ldd	r24, Y+55	; 0x37
    19e0:	98 ad       	ldd	r25, Y+56	; 0x38
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	98 ab       	std	Y+48, r25	; 0x30
    1a00:	8f a7       	std	Y+47, r24	; 0x2f
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <lcd_set_4bit+0x688>
    1a04:	80 e7       	ldi	r24, 0x70	; 112
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	9e a7       	std	Y+46, r25	; 0x2e
    1a0a:	8d a7       	std	Y+45, r24	; 0x2d
    1a0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <lcd_set_4bit+0x676>
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	98 ab       	std	Y+48, r25	; 0x30
    1a20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a24:	98 a9       	ldd	r25, Y+48	; 0x30
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <lcd_set_4bit+0x66a>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a30:	8b a9       	ldd	r24, Y+51	; 0x33
    1a32:	9c a9       	ldd	r25, Y+52	; 0x34
    1a34:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	98 ab       	std	Y+48, r25	; 0x30
    1a3e:	8f a7       	std	Y+47, r24	; 0x2f
    1a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a42:	98 a9       	ldd	r25, Y+48	; 0x30
    1a44:	9c a7       	std	Y+44, r25	; 0x2c
    1a46:	8b a7       	std	Y+43, r24	; 0x2b
    1a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <lcd_set_4bit+0x6b2>
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1a54:	a8 e2       	ldi	r26, 0x28	; 40
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e8 e2       	ldi	r30, 0x28	; 40
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8e 7f       	andi	r24, 0xFE	; 254
    1a60:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1a62:	a8 e2       	ldi	r26, 0x28	; 40
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e8 e2       	ldi	r30, 0x28	; 40
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8d 7f       	andi	r24, 0xFD	; 253
    1a6e:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
    1a70:	e8 e2       	ldi	r30, 0x28	; 40
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 e3       	ldi	r24, 0x30	; 48
    1a76:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1a78:	a8 e2       	ldi	r26, 0x28	; 40
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e8 e2       	ldi	r30, 0x28	; 40
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	84 60       	ori	r24, 0x04	; 4
    1a84:	8c 93       	st	X, r24
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a8c:	b0 e4       	ldi	r27, 0x40	; 64
    1a8e:	8f a3       	std	Y+39, r24	; 0x27
    1a90:	98 a7       	std	Y+40, r25	; 0x28
    1a92:	a9 a7       	std	Y+41, r26	; 0x29
    1a94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	6f a1       	ldd	r22, Y+39	; 0x27
    1a98:	78 a5       	ldd	r23, Y+40	; 0x28
    1a9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a9e:	26 e6       	ldi	r18, 0x66	; 102
    1aa0:	36 e6       	ldi	r19, 0x66	; 102
    1aa2:	46 e6       	ldi	r20, 0x66	; 102
    1aa4:	55 e4       	ldi	r21, 0x45	; 69
    1aa6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8b a3       	std	Y+35, r24	; 0x23
    1ab0:	9c a3       	std	Y+36, r25	; 0x24
    1ab2:	ad a3       	std	Y+37, r26	; 0x25
    1ab4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ab6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aba:	8d a1       	ldd	r24, Y+37	; 0x25
    1abc:	9e a1       	ldd	r25, Y+38	; 0x26
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <lcd_set_4bit+0x73e>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9a a3       	std	Y+34, r25	; 0x22
    1ad4:	89 a3       	std	Y+33, r24	; 0x21
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
    1ad8:	6b a1       	ldd	r22, Y+35	; 0x23
    1ada:	7c a1       	ldd	r23, Y+36	; 0x24
    1adc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ade:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	6f a1       	ldd	r22, Y+39	; 0x27
    1af2:	78 a5       	ldd	r23, Y+40	; 0x28
    1af4:	89 a5       	ldd	r24, Y+41	; 0x29
    1af6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e2       	ldi	r20, 0x20	; 32
    1afe:	51 e4       	ldi	r21, 0x41	; 65
    1b00:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9a a3       	std	Y+34, r25	; 0x22
    1b16:	89 a3       	std	Y+33, r24	; 0x21
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <lcd_set_4bit+0x79e>
    1b1a:	80 e7       	ldi	r24, 0x70	; 112
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	98 a3       	std	Y+32, r25	; 0x20
    1b20:	8f 8f       	std	Y+31, r24	; 0x1f
    1b22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b24:	98 a1       	ldd	r25, Y+32	; 0x20
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <lcd_set_4bit+0x78c>
    1b2a:	98 a3       	std	Y+32, r25	; 0x20
    1b2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b30:	9a a1       	ldd	r25, Y+34	; 0x22
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9a a3       	std	Y+34, r25	; 0x22
    1b36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <lcd_set_4bit+0x780>
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	6b a1       	ldd	r22, Y+35	; 0x23
    1b44:	7c a1       	ldd	r23, Y+36	; 0x24
    1b46:	8d a1       	ldd	r24, Y+37	; 0x25
    1b48:	9e a1       	ldd	r25, Y+38	; 0x26
    1b4a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9a a3       	std	Y+34, r25	; 0x22
    1b54:	89 a3       	std	Y+33, r24	; 0x21
    1b56:	89 a1       	ldd	r24, Y+33	; 0x21
    1b58:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <lcd_set_4bit+0x7c8>
    1b66:	9e 8f       	std	Y+30, r25	; 0x1e
    1b68:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1b6a:	a8 e2       	ldi	r26, 0x28	; 40
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e8 e2       	ldi	r30, 0x28	; 40
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	8b 7f       	andi	r24, 0xFB	; 251
    1b76:	8c 93       	st	X, r24
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e8       	ldi	r26, 0x80	; 128
    1b7e:	bf e3       	ldi	r27, 0x3F	; 63
    1b80:	89 8f       	std	Y+25, r24	; 0x19
    1b82:	9a 8f       	std	Y+26, r25	; 0x1a
    1b84:	ab 8f       	std	Y+27, r26	; 0x1b
    1b86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b88:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b90:	26 e6       	ldi	r18, 0x66	; 102
    1b92:	36 e6       	ldi	r19, 0x66	; 102
    1b94:	46 e6       	ldi	r20, 0x66	; 102
    1b96:	55 e4       	ldi	r21, 0x45	; 69
    1b98:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	8d 8b       	std	Y+21, r24	; 0x15
    1ba2:	9e 8b       	std	Y+22, r25	; 0x16
    1ba4:	af 8b       	std	Y+23, r26	; 0x17
    1ba6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    1baa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <lcd_set_4bit+0x830>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
    1bc8:	3f c0       	rjmp	.+126    	; 0x1c48 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
    1bca:	6d 89       	ldd	r22, Y+21	; 0x15
    1bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bce:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	4c f5       	brge	.+82     	; 0x1c34 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	69 8d       	ldd	r22, Y+25	; 0x19
    1be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9c 8b       	std	Y+20, r25	; 0x14
    1c08:	8b 8b       	std	Y+19, r24	; 0x13
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <lcd_set_4bit+0x890>
    1c0c:	80 e7       	ldi	r24, 0x70	; 112
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	9a 8b       	std	Y+18, r25	; 0x12
    1c12:	89 8b       	std	Y+17, r24	; 0x11
    1c14:	89 89       	ldd	r24, Y+17	; 0x11
    1c16:	9a 89       	ldd	r25, Y+18	; 0x12
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <lcd_set_4bit+0x87e>
    1c1c:	9a 8b       	std	Y+18, r25	; 0x12
    1c1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	8b 89       	ldd	r24, Y+19	; 0x13
    1c22:	9c 89       	ldd	r25, Y+20	; 0x14
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	9c 8b       	std	Y+20, r25	; 0x14
    1c28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <lcd_set_4bit+0x872>
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	6d 89       	ldd	r22, Y+21	; 0x15
    1c36:	7e 89       	ldd	r23, Y+22	; 0x16
    1c38:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9c 8b       	std	Y+20, r25	; 0x14
    1c46:	8b 8b       	std	Y+19, r24	; 0x13
    1c48:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4c:	98 8b       	std	Y+16, r25	; 0x10
    1c4e:	8f 87       	std	Y+15, r24	; 0x0f
    1c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c52:	98 89       	ldd	r25, Y+16	; 0x10
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <lcd_set_4bit+0x8ba>
    1c58:	98 8b       	std	Y+16, r25	; 0x10
    1c5a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1c5c:	a8 e2       	ldi	r26, 0x28	; 40
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e8 e2       	ldi	r30, 0x28	; 40
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	8e 7f       	andi	r24, 0xFE	; 254
    1c68:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1c6a:	a8 e2       	ldi	r26, 0x28	; 40
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e8 e2       	ldi	r30, 0x28	; 40
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8d 7f       	andi	r24, 0xFD	; 253
    1c76:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    1c78:	e8 e2       	ldi	r30, 0x28	; 40
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 e2       	ldi	r24, 0x20	; 32
    1c7e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1c80:	a8 e2       	ldi	r26, 0x28	; 40
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e8 e2       	ldi	r30, 0x28	; 40
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	84 60       	ori	r24, 0x04	; 4
    1c8c:	8c 93       	st	X, r24
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 ea       	ldi	r26, 0xA0	; 160
    1c94:	b0 e4       	ldi	r27, 0x40	; 64
    1c96:	8b 87       	std	Y+11, r24	; 0x0b
    1c98:	9c 87       	std	Y+12, r25	; 0x0c
    1c9a:	ad 87       	std	Y+13, r26	; 0x0d
    1c9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca6:	26 e6       	ldi	r18, 0x66	; 102
    1ca8:	36 e6       	ldi	r19, 0x66	; 102
    1caa:	46 e6       	ldi	r20, 0x66	; 102
    1cac:	55 e4       	ldi	r21, 0x45	; 69
    1cae:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8f 83       	std	Y+7, r24	; 0x07
    1cb8:	98 87       	std	Y+8, r25	; 0x08
    1cba:	a9 87       	std	Y+9, r26	; 0x09
    1cbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc0:	78 85       	ldd	r23, Y+8	; 0x08
    1cc2:	89 85       	ldd	r24, Y+9	; 0x09
    1cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <lcd_set_4bit+0x946>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    1ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce2:	78 85       	ldd	r23, Y+8	; 0x08
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <lcd_set_4bit+0x9a6>
    1d22:	80 e7       	ldi	r24, 0x70	; 112
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <lcd_set_4bit+0x994>
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
    1d42:	9e 81       	ldd	r25, Y+6	; 0x06
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <lcd_set_4bit+0x988>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4c:	78 85       	ldd	r23, Y+8	; 0x08
    1d4e:	89 85       	ldd	r24, Y+9	; 0x09
    1d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d52:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <lcd_set_4bit+0x9d0>
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1d72:	a8 e2       	ldi	r26, 0x28	; 40
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e8 e2       	ldi	r30, 0x28	; 40
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8b 7f       	andi	r24, 0xFB	; 251
    1d7e:	8c 93       	st	X, r24

	
}
    1d80:	c0 59       	subi	r28, 0x90	; 144
    1d82:	df 4f       	sbci	r29, 0xFF	; 255
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	2e 97       	sbiw	r28, 0x0e	; 14
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e8       	ldi	r26, 0x80	; 128
    1db2:	bf e3       	ldi	r27, 0x3F	; 63
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
    1db6:	9c 87       	std	Y+12, r25	; 0x0c
    1db8:	ad 87       	std	Y+13, r26	; 0x0d
    1dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	26 e6       	ldi	r18, 0x66	; 102
    1dc6:	36 e6       	ldi	r19, 0x66	; 102
    1dc8:	46 e6       	ldi	r20, 0x66	; 102
    1dca:	55 e4       	ldi	r21, 0x45	; 69
    1dcc:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8f 83       	std	Y+7, r24	; 0x07
    1dd6:	98 87       	std	Y+8, r25	; 0x08
    1dd8:	a9 87       	std	Y+9, r26	; 0x09
    1dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <lcd_init+0x66>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <lcd_init+0xe4>
	else if (__tmp > 65535)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <lcd_init+0xc6>
    1e40:	80 e7       	ldi	r24, 0x70	; 112
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <lcd_init+0xb4>
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <lcd_init+0xa8>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <lcd_init+0xf0>
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1e90:	88 e2       	ldi	r24, 0x28	; 40
    1e92:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
	lcd_wr_command(0x01);
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
	lcd_wr_command(0x06);
    1e9c:	86 e0       	ldi	r24, 0x06	; 6
    1e9e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
	lcd_wr_command(0x0E);
    1ea2:	8e e0       	ldi	r24, 0x0E	; 14
    1ea4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
	lcd_wr_command(0x80);
    1ea8:	80 e8       	ldi	r24, 0x80	; 128
    1eaa:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
		
}
    1eae:	2e 96       	adiw	r28, 0x0e	; 14
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	6e 97       	sbiw	r28, 0x1e	; 30
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	de bf       	out	0x3e, r29	; 62
    1ed0:	0f be       	out	0x3f, r0	; 63
    1ed2:	cd bf       	out	0x3d, r28	; 61
    1ed4:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    1ed6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ed8:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1eda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1edc:	80 7f       	andi	r24, 0xF0	; 240
    1ede:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1ee0:	a8 e2       	ldi	r26, 0x28	; 40
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e8 e2       	ldi	r30, 0x28	; 40
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	8f 70       	andi	r24, 0x0F	; 15
    1eec:	8c 93       	st	X, r24
	lcd_port |= temp;
    1eee:	a8 e2       	ldi	r26, 0x28	; 40
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e8 e2       	ldi	r30, 0x28	; 40
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	90 81       	ld	r25, Z
    1ef8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1efa:	89 2b       	or	r24, r25
    1efc:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1efe:	a8 e2       	ldi	r26, 0x28	; 40
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e8 e2       	ldi	r30, 0x28	; 40
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	8e 7f       	andi	r24, 0xFE	; 254
    1f0a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1f0c:	a8 e2       	ldi	r26, 0x28	; 40
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e8 e2       	ldi	r30, 0x28	; 40
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	8d 7f       	andi	r24, 0xFD	; 253
    1f18:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1f1a:	a8 e2       	ldi	r26, 0x28	; 40
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e8 e2       	ldi	r30, 0x28	; 40
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	84 60       	ori	r24, 0x04	; 4
    1f26:	8c 93       	st	X, r24
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f2e:	b0 e4       	ldi	r27, 0x40	; 64
    1f30:	89 8f       	std	Y+25, r24	; 0x19
    1f32:	9a 8f       	std	Y+26, r25	; 0x1a
    1f34:	ab 8f       	std	Y+27, r26	; 0x1b
    1f36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	69 8d       	ldd	r22, Y+25	; 0x19
    1f3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f40:	26 e6       	ldi	r18, 0x66	; 102
    1f42:	36 e6       	ldi	r19, 0x66	; 102
    1f44:	46 e6       	ldi	r20, 0x66	; 102
    1f46:	55 e4       	ldi	r21, 0x45	; 69
    1f48:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8d 8b       	std	Y+21, r24	; 0x15
    1f52:	9e 8b       	std	Y+22, r25	; 0x16
    1f54:	af 8b       	std	Y+23, r26	; 0x17
    1f56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f58:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <lcd_wr_command+0xba>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    1f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f80:	98 8d       	ldd	r25, Y+24	; 0x18
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	69 8d       	ldd	r22, Y+25	; 0x19
    1f94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9c 8b       	std	Y+20, r25	; 0x14
    1fb8:	8b 8b       	std	Y+19, r24	; 0x13
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <lcd_wr_command+0x11a>
    1fbc:	80 e7       	ldi	r24, 0x70	; 112
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	9a 8b       	std	Y+18, r25	; 0x12
    1fc2:	89 8b       	std	Y+17, r24	; 0x11
    1fc4:	89 89       	ldd	r24, Y+17	; 0x11
    1fc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <lcd_wr_command+0x108>
    1fcc:	9a 8b       	std	Y+18, r25	; 0x12
    1fce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9c 8b       	std	Y+20, r25	; 0x14
    1fd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	8b 89       	ldd	r24, Y+19	; 0x13
    1fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <lcd_wr_command+0xfc>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fea:	98 8d       	ldd	r25, Y+24	; 0x18
    1fec:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9c 8b       	std	Y+20, r25	; 0x14
    1ff6:	8b 8b       	std	Y+19, r24	; 0x13
    1ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffc:	98 8b       	std	Y+16, r25	; 0x10
    1ffe:	8f 87       	std	Y+15, r24	; 0x0f
    2000:	8f 85       	ldd	r24, Y+15	; 0x0f
    2002:	98 89       	ldd	r25, Y+16	; 0x10
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <lcd_wr_command+0x144>
    2008:	98 8b       	std	Y+16, r25	; 0x10
    200a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    200c:	a8 e2       	ldi	r26, 0x28	; 40
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e8 e2       	ldi	r30, 0x28	; 40
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8b 7f       	andi	r24, 0xFB	; 251
    2018:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    201a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    201c:	8f 70       	andi	r24, 0x0F	; 15
    201e:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    2020:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2022:	82 95       	swap	r24
    2024:	80 7f       	andi	r24, 0xF0	; 240
    2026:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    2028:	a8 e2       	ldi	r26, 0x28	; 40
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e8 e2       	ldi	r30, 0x28	; 40
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 70       	andi	r24, 0x0F	; 15
    2034:	8c 93       	st	X, r24
	lcd_port |= cmd;
    2036:	a8 e2       	ldi	r26, 0x28	; 40
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e8 e2       	ldi	r30, 0x28	; 40
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	90 81       	ld	r25, Z
    2040:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2042:	89 2b       	or	r24, r25
    2044:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    2046:	a8 e2       	ldi	r26, 0x28	; 40
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e8 e2       	ldi	r30, 0x28	; 40
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	8e 7f       	andi	r24, 0xFE	; 254
    2052:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    2054:	a8 e2       	ldi	r26, 0x28	; 40
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e8 e2       	ldi	r30, 0x28	; 40
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8d 7f       	andi	r24, 0xFD	; 253
    2060:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    2062:	a8 e2       	ldi	r26, 0x28	; 40
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e8 e2       	ldi	r30, 0x28	; 40
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	84 60       	ori	r24, 0x04	; 4
    206e:	8c 93       	st	X, r24
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a0 ea       	ldi	r26, 0xA0	; 160
    2076:	b0 e4       	ldi	r27, 0x40	; 64
    2078:	8b 87       	std	Y+11, r24	; 0x0b
    207a:	9c 87       	std	Y+12, r25	; 0x0c
    207c:	ad 87       	std	Y+13, r26	; 0x0d
    207e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	6b 85       	ldd	r22, Y+11	; 0x0b
    2082:	7c 85       	ldd	r23, Y+12	; 0x0c
    2084:	8d 85       	ldd	r24, Y+13	; 0x0d
    2086:	9e 85       	ldd	r25, Y+14	; 0x0e
    2088:	26 e6       	ldi	r18, 0x66	; 102
    208a:	36 e6       	ldi	r19, 0x66	; 102
    208c:	46 e6       	ldi	r20, 0x66	; 102
    208e:	55 e4       	ldi	r21, 0x45	; 69
    2090:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	8f 83       	std	Y+7, r24	; 0x07
    209a:	98 87       	std	Y+8, r25	; 0x08
    209c:	a9 87       	std	Y+9, r26	; 0x09
    209e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	2c f4       	brge	.+10     	; 0x20c2 <lcd_wr_command+0x202>
		__ticks = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	3f c0       	rjmp	.+126    	; 0x2140 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    20c2:	6f 81       	ldd	r22, Y+7	; 0x07
    20c4:	78 85       	ldd	r23, Y+8	; 0x08
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	4f e7       	ldi	r20, 0x7F	; 127
    20d0:	57 e4       	ldi	r21, 0x47	; 71
    20d2:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	4c f5       	brge	.+82     	; 0x212c <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	6b 85       	ldd	r22, Y+11	; 0x0b
    20dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20de:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e2       	ldi	r20, 0x20	; 32
    20e8:	51 e4       	ldi	r21, 0x41	; 65
    20ea:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <lcd_wr_command+0x262>
    2104:	80 e7       	ldi	r24, 0x70	; 112
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <lcd_wr_command+0x250>
    2114:	9c 83       	std	Y+4, r25	; 0x04
    2116:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	8d 81       	ldd	r24, Y+5	; 0x05
    211a:	9e 81       	ldd	r25, Y+6	; 0x06
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	8d 81       	ldd	r24, Y+5	; 0x05
    2124:	9e 81       	ldd	r25, Y+6	; 0x06
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	69 f7       	brne	.-38     	; 0x2104 <lcd_wr_command+0x244>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	8d 81       	ldd	r24, Y+5	; 0x05
    2142:	9e 81       	ldd	r25, Y+6	; 0x06
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <lcd_wr_command+0x28c>
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    2154:	a8 e2       	ldi	r26, 0x28	; 40
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e8 e2       	ldi	r30, 0x28	; 40
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	8b 7f       	andi	r24, 0xFB	; 251
    2160:	8c 93       	st	X, r24
}
    2162:	6e 96       	adiw	r28, 0x1e	; 30
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	6e 97       	sbiw	r28, 0x1e	; 30
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    218a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    218c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    218e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2190:	80 7f       	andi	r24, 0xF0	; 240
    2192:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    2194:	a8 e2       	ldi	r26, 0x28	; 40
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e8 e2       	ldi	r30, 0x28	; 40
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8f 70       	andi	r24, 0x0F	; 15
    21a0:	8c 93       	st	X, r24
	lcd_port |= temp;
    21a2:	a8 e2       	ldi	r26, 0x28	; 40
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e8 e2       	ldi	r30, 0x28	; 40
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	90 81       	ld	r25, Z
    21ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ae:	89 2b       	or	r24, r25
    21b0:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    21b2:	a8 e2       	ldi	r26, 0x28	; 40
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e8 e2       	ldi	r30, 0x28	; 40
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	81 60       	ori	r24, 0x01	; 1
    21be:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    21c0:	a8 e2       	ldi	r26, 0x28	; 40
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e8 e2       	ldi	r30, 0x28	; 40
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	8d 7f       	andi	r24, 0xFD	; 253
    21cc:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    21ce:	a8 e2       	ldi	r26, 0x28	; 40
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e8 e2       	ldi	r30, 0x28	; 40
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	84 60       	ori	r24, 0x04	; 4
    21da:	8c 93       	st	X, r24
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 ea       	ldi	r26, 0xA0	; 160
    21e2:	b0 e4       	ldi	r27, 0x40	; 64
    21e4:	89 8f       	std	Y+25, r24	; 0x19
    21e6:	9a 8f       	std	Y+26, r25	; 0x1a
    21e8:	ab 8f       	std	Y+27, r26	; 0x1b
    21ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	69 8d       	ldd	r22, Y+25	; 0x19
    21ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f4:	26 e6       	ldi	r18, 0x66	; 102
    21f6:	36 e6       	ldi	r19, 0x66	; 102
    21f8:	46 e6       	ldi	r20, 0x66	; 102
    21fa:	55 e4       	ldi	r21, 0x45	; 69
    21fc:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8d 8b       	std	Y+21, r24	; 0x15
    2206:	9e 8b       	std	Y+22, r25	; 0x16
    2208:	af 8b       	std	Y+23, r26	; 0x17
    220a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    220c:	6d 89       	ldd	r22, Y+21	; 0x15
    220e:	7e 89       	ldd	r23, Y+22	; 0x16
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	2c f4       	brge	.+10     	; 0x222e <__stack+0x2f>
		__ticks = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9c 8b       	std	Y+20, r25	; 0x14
    222a:	8b 8b       	std	Y+19, r24	; 0x13
    222c:	3f c0       	rjmp	.+126    	; 0x22ac <__stack+0xad>
	else if (__tmp > 65535)
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	4c f5       	brge	.+82     	; 0x2298 <__stack+0x99>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	69 8d       	ldd	r22, Y+25	; 0x19
    2248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9c 8b       	std	Y+20, r25	; 0x14
    226c:	8b 8b       	std	Y+19, r24	; 0x13
    226e:	0f c0       	rjmp	.+30     	; 0x228e <__stack+0x8f>
    2270:	80 e7       	ldi	r24, 0x70	; 112
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	9a 8b       	std	Y+18, r25	; 0x12
    2276:	89 8b       	std	Y+17, r24	; 0x11
    2278:	89 89       	ldd	r24, Y+17	; 0x11
    227a:	9a 89       	ldd	r25, Y+18	; 0x12
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <__stack+0x7d>
    2280:	9a 8b       	std	Y+18, r25	; 0x12
    2282:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2284:	8b 89       	ldd	r24, Y+19	; 0x13
    2286:	9c 89       	ldd	r25, Y+20	; 0x14
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	8b 89       	ldd	r24, Y+19	; 0x13
    2290:	9c 89       	ldd	r25, Y+20	; 0x14
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	69 f7       	brne	.-38     	; 0x2270 <__stack+0x71>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <__stack+0xc1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	6d 89       	ldd	r22, Y+21	; 0x15
    229a:	7e 89       	ldd	r23, Y+22	; 0x16
    229c:	8f 89       	ldd	r24, Y+23	; 0x17
    229e:	98 8d       	ldd	r25, Y+24	; 0x18
    22a0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	98 8b       	std	Y+16, r25	; 0x10
    22b2:	8f 87       	std	Y+15, r24	; 0x0f
    22b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b6:	98 89       	ldd	r25, Y+16	; 0x10
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <__stack+0xb9>
    22bc:	98 8b       	std	Y+16, r25	; 0x10
    22be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    22c0:	a8 e2       	ldi	r26, 0x28	; 40
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e8 e2       	ldi	r30, 0x28	; 40
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8b 7f       	andi	r24, 0xFB	; 251
    22cc:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    22ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d0:	8f 70       	andi	r24, 0x0F	; 15
    22d2:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    22d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d6:	82 95       	swap	r24
    22d8:	80 7f       	andi	r24, 0xF0	; 240
    22da:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    22dc:	a8 e2       	ldi	r26, 0x28	; 40
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e8 e2       	ldi	r30, 0x28	; 40
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	8f 70       	andi	r24, 0x0F	; 15
    22e8:	8c 93       	st	X, r24
	lcd_port |= letter;
    22ea:	a8 e2       	ldi	r26, 0x28	; 40
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e8 e2       	ldi	r30, 0x28	; 40
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	90 81       	ld	r25, Z
    22f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22f6:	89 2b       	or	r24, r25
    22f8:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    22fa:	a8 e2       	ldi	r26, 0x28	; 40
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e8 e2       	ldi	r30, 0x28	; 40
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	81 60       	ori	r24, 0x01	; 1
    2306:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    2308:	a8 e2       	ldi	r26, 0x28	; 40
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e8 e2       	ldi	r30, 0x28	; 40
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	8d 7f       	andi	r24, 0xFD	; 253
    2314:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    2316:	a8 e2       	ldi	r26, 0x28	; 40
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e8 e2       	ldi	r30, 0x28	; 40
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	84 60       	ori	r24, 0x04	; 4
    2322:	8c 93       	st	X, r24
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 ea       	ldi	r26, 0xA0	; 160
    232a:	b0 e4       	ldi	r27, 0x40	; 64
    232c:	8b 87       	std	Y+11, r24	; 0x0b
    232e:	9c 87       	std	Y+12, r25	; 0x0c
    2330:	ad 87       	std	Y+13, r26	; 0x0d
    2332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	6b 85       	ldd	r22, Y+11	; 0x0b
    2336:	7c 85       	ldd	r23, Y+12	; 0x0c
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	26 e6       	ldi	r18, 0x66	; 102
    233e:	36 e6       	ldi	r19, 0x66	; 102
    2340:	46 e6       	ldi	r20, 0x66	; 102
    2342:	55 e4       	ldi	r21, 0x45	; 69
    2344:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8f 83       	std	Y+7, r24	; 0x07
    234e:	98 87       	std	Y+8, r25	; 0x08
    2350:	a9 87       	std	Y+9, r26	; 0x09
    2352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2354:	6f 81       	ldd	r22, Y+7	; 0x07
    2356:	78 85       	ldd	r23, Y+8	; 0x08
    2358:	89 85       	ldd	r24, Y+9	; 0x09
    235a:	9a 85       	ldd	r25, Y+10	; 0x0a
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <__stack+0x177>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <__stack+0x1f5>
	else if (__tmp > 65535)
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <__stack+0x1e1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <__stack+0x1d7>
    23b8:	80 e7       	ldi	r24, 0x70	; 112
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <__stack+0x1c5>
    23c8:	9c 83       	std	Y+4, r25	; 0x04
    23ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <__stack+0x1b9>
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <__stack+0x209>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	9a 83       	std	Y+2, r25	; 0x02
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <__stack+0x201>
    2404:	9a 83       	std	Y+2, r25	; 0x02
    2406:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    2408:	a8 e2       	ldi	r26, 0x28	; 40
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e8 e2       	ldi	r30, 0x28	; 40
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8b 7f       	andi	r24, 0xFB	; 251
    2414:	8c 93       	st	X, r24
}
    2416:	6e 96       	adiw	r28, 0x1e	; 30
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <lcd_home>:


void lcd_home()
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    2430:	80 e8       	ldi	r24, 0x80	; 128
    2432:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
}
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	0f 92       	push	r0
    2442:	0f 92       	push	r0
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	89 83       	std	Y+1, r24	; 0x01
    244c:	0a c0       	rjmp	.+20     	; 0x2462 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    244e:	e9 81       	ldd	r30, Y+1	; 0x01
    2450:	fa 81       	ldd	r31, Y+2	; 0x02
    2452:	80 81       	ld	r24, Z
    2454:	0e 94 ba 10 	call	0x2174	; 0x2174 <lcd_wr_char>
		str++;
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    2462:	e9 81       	ldd	r30, Y+1	; 0x01
    2464:	fa 81       	ldd	r31, Y+2	; 0x02
    2466:	80 81       	ld	r24, Z
    2468:	88 23       	and	r24, r24
    246a:	89 f7       	brne	.-30     	; 0x244e <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	00 d0       	rcall	.+0      	; 0x247c <lcd_cursor+0x6>
    247c:	0f 92       	push	r0
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	3c 83       	std	Y+4, r19	; 0x04
    248e:	2b 83       	std	Y+3, r18	; 0x03
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	82 30       	cpi	r24, 0x02	; 2
    2496:	91 05       	cpc	r25, r1
    2498:	d9 f0       	breq	.+54     	; 0x24d0 <lcd_cursor+0x5a>
    249a:	2b 81       	ldd	r18, Y+3	; 0x03
    249c:	3c 81       	ldd	r19, Y+4	; 0x04
    249e:	23 30       	cpi	r18, 0x03	; 3
    24a0:	31 05       	cpc	r19, r1
    24a2:	34 f4       	brge	.+12     	; 0x24b0 <lcd_cursor+0x3a>
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	81 30       	cpi	r24, 0x01	; 1
    24aa:	91 05       	cpc	r25, r1
    24ac:	61 f0       	breq	.+24     	; 0x24c6 <lcd_cursor+0x50>
    24ae:	1e c0       	rjmp	.+60     	; 0x24ec <lcd_cursor+0x76>
    24b0:	2b 81       	ldd	r18, Y+3	; 0x03
    24b2:	3c 81       	ldd	r19, Y+4	; 0x04
    24b4:	23 30       	cpi	r18, 0x03	; 3
    24b6:	31 05       	cpc	r19, r1
    24b8:	81 f0       	breq	.+32     	; 0x24da <lcd_cursor+0x64>
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	84 30       	cpi	r24, 0x04	; 4
    24c0:	91 05       	cpc	r25, r1
    24c2:	81 f0       	breq	.+32     	; 0x24e4 <lcd_cursor+0x6e>
    24c4:	13 c0       	rjmp	.+38     	; 0x24ec <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	81 58       	subi	r24, 0x81	; 129
    24ca:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
    24ce:	0e c0       	rjmp	.+28     	; 0x24ec <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	81 54       	subi	r24, 0x41	; 65
    24d4:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
    24d8:	09 c0       	rjmp	.+18     	; 0x24ec <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	8d 56       	subi	r24, 0x6D	; 109
    24de:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	8d 52       	subi	r24, 0x2D	; 45
    24e8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <lcd_wr_command>
		default: break;
	}
}
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	27 97       	sbiw	r28, 0x07	; 7
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	8a 83       	std	Y+2, r24	; 0x02
    2510:	6b 83       	std	Y+3, r22	; 0x03
    2512:	5d 83       	std	Y+5, r21	; 0x05
    2514:	4c 83       	std	Y+4, r20	; 0x04
    2516:	3f 83       	std	Y+7, r19	; 0x07
    2518:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    251a:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	88 23       	and	r24, r24
    2520:	19 f0       	breq	.+6      	; 0x2528 <lcd_print+0x2e>
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	88 23       	and	r24, r24
    2526:	19 f4       	brne	.+6      	; 0x252e <lcd_print+0x34>
	{
		lcd_home();
    2528:	0e 94 14 12 	call	0x2428	; 0x2428 <lcd_home>
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	6b 81       	ldd	r22, Y+3	; 0x03
    2532:	0e 94 3b 12 	call	0x2476	; 0x2476 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    2536:	8e 81       	ldd	r24, Y+6	; 0x06
    2538:	9f 81       	ldd	r25, Y+7	; 0x07
    253a:	85 30       	cpi	r24, 0x05	; 5
    253c:	91 05       	cpc	r25, r1
    253e:	19 f0       	breq	.+6      	; 0x2546 <lcd_print+0x4c>
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	a9 f4       	brne	.+42     	; 0x2570 <lcd_print+0x76>
	{
		million=value/10000+48;
    2546:	8c 81       	ldd	r24, Y+4	; 0x04
    2548:	9d 81       	ldd	r25, Y+5	; 0x05
    254a:	20 e1       	ldi	r18, 0x10	; 16
    254c:	37 e2       	ldi	r19, 0x27	; 39
    254e:	b9 01       	movw	r22, r18
    2550:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    2554:	cb 01       	movw	r24, r22
    2556:	c0 96       	adiw	r24, 0x30	; 48
    2558:	90 93 31 03 	sts	0x0331, r25
    255c:	80 93 30 03 	sts	0x0330, r24
		lcd_wr_char(million);
    2560:	80 91 30 03 	lds	r24, 0x0330
    2564:	90 91 31 03 	lds	r25, 0x0331
    2568:	0e 94 ba 10 	call	0x2174	; 0x2174 <lcd_wr_char>
		flag=1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    2570:	8e 81       	ldd	r24, Y+6	; 0x06
    2572:	9f 81       	ldd	r25, Y+7	; 0x07
    2574:	84 30       	cpi	r24, 0x04	; 4
    2576:	91 05       	cpc	r25, r1
    2578:	19 f0       	breq	.+6      	; 0x2580 <lcd_print+0x86>
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	81 30       	cpi	r24, 0x01	; 1
    257e:	11 f5       	brne	.+68     	; 0x25c4 <lcd_print+0xca>
	{
		temp = value/1000;
    2580:	8c 81       	ldd	r24, Y+4	; 0x04
    2582:	9d 81       	ldd	r25, Y+5	; 0x05
    2584:	28 ee       	ldi	r18, 0xE8	; 232
    2586:	33 e0       	ldi	r19, 0x03	; 3
    2588:	b9 01       	movw	r22, r18
    258a:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    258e:	cb 01       	movw	r24, r22
    2590:	90 93 33 03 	sts	0x0333, r25
    2594:	80 93 32 03 	sts	0x0332, r24
		thousand = temp%10 + 48;
    2598:	80 91 32 03 	lds	r24, 0x0332
    259c:	90 91 33 03 	lds	r25, 0x0333
    25a0:	2a e0       	ldi	r18, 0x0A	; 10
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	b9 01       	movw	r22, r18
    25a6:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    25aa:	c0 96       	adiw	r24, 0x30	; 48
    25ac:	90 93 40 03 	sts	0x0340, r25
    25b0:	80 93 3f 03 	sts	0x033F, r24
		lcd_wr_char(thousand);
    25b4:	80 91 3f 03 	lds	r24, 0x033F
    25b8:	90 91 40 03 	lds	r25, 0x0340
    25bc:	0e 94 ba 10 	call	0x2174	; 0x2174 <lcd_wr_char>
		flag=1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    25c4:	8e 81       	ldd	r24, Y+6	; 0x06
    25c6:	9f 81       	ldd	r25, Y+7	; 0x07
    25c8:	83 30       	cpi	r24, 0x03	; 3
    25ca:	91 05       	cpc	r25, r1
    25cc:	19 f0       	breq	.+6      	; 0x25d4 <lcd_print+0xda>
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	81 30       	cpi	r24, 0x01	; 1
    25d2:	11 f5       	brne	.+68     	; 0x2618 <lcd_print+0x11e>
	{
		temp = value/100;
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	9d 81       	ldd	r25, Y+5	; 0x05
    25d8:	24 e6       	ldi	r18, 0x64	; 100
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	b9 01       	movw	r22, r18
    25de:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    25e2:	cb 01       	movw	r24, r22
    25e4:	90 93 33 03 	sts	0x0333, r25
    25e8:	80 93 32 03 	sts	0x0332, r24
		hundred = temp%10 + 48;
    25ec:	80 91 32 03 	lds	r24, 0x0332
    25f0:	90 91 33 03 	lds	r25, 0x0333
    25f4:	2a e0       	ldi	r18, 0x0A	; 10
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	b9 01       	movw	r22, r18
    25fa:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    25fe:	c0 96       	adiw	r24, 0x30	; 48
    2600:	90 93 3c 03 	sts	0x033C, r25
    2604:	80 93 3b 03 	sts	0x033B, r24
		lcd_wr_char(hundred);
    2608:	80 91 3b 03 	lds	r24, 0x033B
    260c:	90 91 3c 03 	lds	r25, 0x033C
    2610:	0e 94 ba 10 	call	0x2174	; 0x2174 <lcd_wr_char>
		flag=1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    2618:	8e 81       	ldd	r24, Y+6	; 0x06
    261a:	9f 81       	ldd	r25, Y+7	; 0x07
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	91 05       	cpc	r25, r1
    2620:	19 f0       	breq	.+6      	; 0x2628 <lcd_print+0x12e>
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	81 30       	cpi	r24, 0x01	; 1
    2626:	11 f5       	brne	.+68     	; 0x266c <lcd_print+0x172>
	{
		temp = value/10;
    2628:	8c 81       	ldd	r24, Y+4	; 0x04
    262a:	9d 81       	ldd	r25, Y+5	; 0x05
    262c:	2a e0       	ldi	r18, 0x0A	; 10
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	b9 01       	movw	r22, r18
    2632:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    2636:	cb 01       	movw	r24, r22
    2638:	90 93 33 03 	sts	0x0333, r25
    263c:	80 93 32 03 	sts	0x0332, r24
		tens = temp%10 + 48;
    2640:	80 91 32 03 	lds	r24, 0x0332
    2644:	90 91 33 03 	lds	r25, 0x0333
    2648:	2a e0       	ldi	r18, 0x0A	; 10
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	b9 01       	movw	r22, r18
    264e:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    2652:	c0 96       	adiw	r24, 0x30	; 48
    2654:	90 93 39 03 	sts	0x0339, r25
    2658:	80 93 38 03 	sts	0x0338, r24
		lcd_wr_char(tens);
    265c:	80 91 38 03 	lds	r24, 0x0338
    2660:	90 91 39 03 	lds	r25, 0x0339
    2664:	0e 94 ba 10 	call	0x2174	; 0x2174 <lcd_wr_char>
		flag=1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    266c:	8e 81       	ldd	r24, Y+6	; 0x06
    266e:	9f 81       	ldd	r25, Y+7	; 0x07
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	91 05       	cpc	r25, r1
    2674:	19 f0       	breq	.+6      	; 0x267c <lcd_print+0x182>
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	81 30       	cpi	r24, 0x01	; 1
    267a:	91 f4       	brne	.+36     	; 0x26a0 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	2a e0       	ldi	r18, 0x0A	; 10
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	b9 01       	movw	r22, r18
    2686:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    268a:	c0 96       	adiw	r24, 0x30	; 48
    268c:	90 93 3e 03 	sts	0x033E, r25
    2690:	80 93 3d 03 	sts	0x033D, r24
		lcd_wr_char(unit);
    2694:	80 91 3d 03 	lds	r24, 0x033D
    2698:	90 91 3e 03 	lds	r25, 0x033E
    269c:	0e 94 ba 10 	call	0x2174	; 0x2174 <lcd_wr_char>
	}
	if(digits>5)
    26a0:	8e 81       	ldd	r24, Y+6	; 0x06
    26a2:	9f 81       	ldd	r25, Y+7	; 0x07
    26a4:	86 30       	cpi	r24, 0x06	; 6
    26a6:	91 05       	cpc	r25, r1
    26a8:	1c f0       	brlt	.+6      	; 0x26b0 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    26aa:	85 e4       	ldi	r24, 0x45	; 69
    26ac:	0e 94 ba 10 	call	0x2174	; 0x2174 <lcd_wr_char>
	}
	
}
    26b0:	27 96       	adiw	r28, 0x07	; 7
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <lcd_port_config>:
unsigned char MAX_ROW = 8;
unsigned char MAX_COLUMN = 8;

//Function to configure LCD port
void lcd_port_config (void)
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    26ca:	a7 e2       	ldi	r26, 0x27	; 39
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e7 e2       	ldi	r30, 0x27	; 39
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	87 6f       	ori	r24, 0xF7	; 247
    26d6:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    26d8:	a8 e2       	ldi	r26, 0x28	; 40
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e8 e2       	ldi	r30, 0x28	; 40
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	80 78       	andi	r24, 0x80	; 128
    26e4:	8c 93       	st	X, r24
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    26f4:	e0 e3       	ldi	r30, 0x30	; 48
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	10 82       	st	Z, r1
 PORTF = 0x00;
    26fa:	e1 e3       	ldi	r30, 0x31	; 49
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	10 82       	st	Z, r1
 DDRK = 0x00;
    2700:	e7 e0       	ldi	r30, 0x07	; 7
    2702:	f1 e0       	ldi	r31, 0x01	; 1
    2704:	10 82       	st	Z, r1
 PORTK = 0x00;
    2706:	e8 e0       	ldi	r30, 0x08	; 8
    2708:	f1 e0       	ldi	r31, 0x01	; 1
    270a:	10 82       	st	Z, r1
}
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <motion_pin_config_lf>:

//Function to configure ports to enable robot's motion
void motion_pin_config_lf (void) 
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    271a:	a1 e2       	ldi	r26, 0x21	; 33
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e1 e2       	ldi	r30, 0x21	; 33
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8f 60       	ori	r24, 0x0F	; 15
    2726:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    2728:	a2 e2       	ldi	r26, 0x22	; 34
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e2 e2       	ldi	r30, 0x22	; 34
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	80 7f       	andi	r24, 0xF0	; 240
    2734:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    2736:	aa e0       	ldi	r26, 0x0A	; 10
    2738:	b1 e0       	ldi	r27, 0x01	; 1
    273a:	ea e0       	ldi	r30, 0x0A	; 10
    273c:	f1 e0       	ldi	r31, 0x01	; 1
    273e:	80 81       	ld	r24, Z
    2740:	88 61       	ori	r24, 0x18	; 24
    2742:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    2744:	ab e0       	ldi	r26, 0x0B	; 11
    2746:	b1 e0       	ldi	r27, 0x01	; 1
    2748:	eb e0       	ldi	r30, 0x0B	; 11
    274a:	f1 e0       	ldi	r31, 0x01	; 1
    274c:	80 81       	ld	r24, Z
    274e:	88 61       	ori	r24, 0x18	; 24
    2750:	8c 93       	st	X, r24
}
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <port_init_lf>:

//Function to Initialize PORTS
void port_init_lf()
{
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    2760:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_port_config>
	adc_pin_config();
    2764:	0e 94 76 13 	call	0x26ec	; 0x26ec <adc_pin_config>
	motion_pin_config_lf();	
    2768:	0e 94 89 13 	call	0x2712	; 0x2712 <motion_pin_config_lf>
}
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    277a:	e1 e2       	ldi	r30, 0x21	; 33
    277c:	f1 e0       	ldi	r31, 0x01	; 1
    277e:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    2780:	e5 e2       	ldi	r30, 0x25	; 37
    2782:	f1 e0       	ldi	r31, 0x01	; 1
    2784:	8f ef       	ldi	r24, 0xFF	; 255
    2786:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    2788:	e4 e2       	ldi	r30, 0x24	; 36
    278a:	f1 e0       	ldi	r31, 0x01	; 1
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    2790:	e9 e2       	ldi	r30, 0x29	; 41
    2792:	f1 e0       	ldi	r31, 0x01	; 1
    2794:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    2796:	e8 e2       	ldi	r30, 0x28	; 40
    2798:	f1 e0       	ldi	r31, 0x01	; 1
    279a:	8f ef       	ldi	r24, 0xFF	; 255
    279c:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    279e:	eb e2       	ldi	r30, 0x2B	; 43
    27a0:	f1 e0       	ldi	r31, 0x01	; 1
    27a2:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    27a4:	ea e2       	ldi	r30, 0x2A	; 42
    27a6:	f1 e0       	ldi	r31, 0x01	; 1
    27a8:	8f ef       	ldi	r24, 0xFF	; 255
    27aa:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    27ac:	ed e2       	ldi	r30, 0x2D	; 45
    27ae:	f1 e0       	ldi	r31, 0x01	; 1
    27b0:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    27b2:	ec e2       	ldi	r30, 0x2C	; 44
    27b4:	f1 e0       	ldi	r31, 0x01	; 1
    27b6:	8f ef       	ldi	r24, 0xFF	; 255
    27b8:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    27ba:	e0 e2       	ldi	r30, 0x20	; 32
    27bc:	f1 e0       	ldi	r31, 0x01	; 1
    27be:	89 ea       	ldi	r24, 0xA9	; 169
    27c0:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    27c2:	e1 e2       	ldi	r30, 0x21	; 33
    27c4:	f1 e0       	ldi	r31, 0x01	; 1
    27c6:	8b e0       	ldi	r24, 0x0B	; 11
    27c8:	80 83       	st	Z, r24
}
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <adc_init>:

void adc_init()
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    27d8:	ea e7       	ldi	r30, 0x7A	; 122
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    27de:	eb e7       	ldi	r30, 0x7B	; 123
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    27e4:	ec e7       	ldi	r30, 0x7C	; 124
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 e2       	ldi	r24, 0x20	; 32
    27ea:	80 83       	st	Z, r24
	ACSR = 0x80;
    27ec:	e0 e5       	ldi	r30, 0x50	; 80
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 e8       	ldi	r24, 0x80	; 128
    27f2:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    27f4:	ea e7       	ldi	r30, 0x7A	; 122
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	86 e8       	ldi	r24, 0x86	; 134
    27fa:	80 83       	st	Z, r24
}
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	0f 92       	push	r0
    2808:	0f 92       	push	r0
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	88 30       	cpi	r24, 0x08	; 8
    2814:	20 f0       	brcs	.+8      	; 0x281e <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    2816:	eb e7       	ldi	r30, 0x7B	; 123
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	88 e0       	ldi	r24, 0x08	; 8
    281c:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	87 70       	andi	r24, 0x07	; 7
    2822:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    2824:	ec e7       	ldi	r30, 0x7C	; 124
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	80 62       	ori	r24, 0x20	; 32
    282c:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    282e:	aa e7       	ldi	r26, 0x7A	; 122
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ea e7       	ldi	r30, 0x7A	; 122
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	80 64       	ori	r24, 0x40	; 64
    283a:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    283c:	ea e7       	ldi	r30, 0x7A	; 122
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	80 71       	andi	r24, 0x10	; 16
    2848:	90 70       	andi	r25, 0x00	; 0
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	b9 f3       	breq	.-18     	; 0x283c <ADC_Conversion+0x3a>
	a=ADCH;
    284e:	e9 e7       	ldi	r30, 0x79	; 121
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    2856:	aa e7       	ldi	r26, 0x7A	; 122
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	ea e7       	ldi	r30, 0x7A	; 122
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	80 61       	ori	r24, 0x10	; 16
    2862:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    2864:	eb e7       	ldi	r30, 0x7B	; 123
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	10 82       	st	Z, r1
	return a;
    286a:	89 81       	ldd	r24, Y+1	; 0x01
}
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	00 d0       	rcall	.+0      	; 0x287c <print_sensor+0x6>
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	6a 83       	std	Y+2, r22	; 0x02
    2884:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	0e 94 01 14 	call	0x2802	; 0x2802 <ADC_Conversion>
    288c:	80 93 34 03 	sts	0x0334, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    2890:	80 91 34 03 	lds	r24, 0x0334
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	6a 81       	ldd	r22, Y+2	; 0x02
    289c:	a9 01       	movw	r20, r18
    289e:	23 e0       	ldi	r18, 0x03	; 3
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	0e 94 7d 12 	call	0x24fa	; 0x24fa <lcd_print>
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	0f 92       	push	r0
    28b8:	0f 92       	push	r0
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    28c2:	e8 e2       	ldi	r30, 0x28	; 40
    28c4:	f1 e0       	ldi	r31, 0x01	; 1
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    28ca:	ea e2       	ldi	r30, 0x2A	; 42
    28cc:	f1 e0       	ldi	r31, 0x01	; 1
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	80 83       	st	Z, r24
}
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret

000028dc <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	0f 92       	push	r0
    28e2:	0f 92       	push	r0
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    28ea:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	8f 70       	andi	r24, 0x0F	; 15
    28f0:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    28f2:	e2 e2       	ldi	r30, 0x22	; 34
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	80 7f       	andi	r24, 0xF0	; 240
    28fe:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    2900:	99 81       	ldd	r25, Y+1	; 0x01
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	89 2b       	or	r24, r25
    2906:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    2908:	e2 e2       	ldi	r30, 0x22	; 34
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	80 83       	st	Z, r24
}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <forward>:

void forward (void) // Both wheels forward
{
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    2922:	86 e0       	ldi	r24, 0x06	; 6
    2924:	0e 94 6e 14 	call	0x28dc	; 0x28dc <motion_set>
}
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <backward>:


void backward(void)  //Both wheels Backward
{	
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x09);
    2936:	89 e0       	ldi	r24, 0x09	; 9
    2938:	0e 94 6e 14 	call	0x28dc	; 0x28dc <motion_set>
}
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <stop>:
void stop (void)     //Stops both the wheels
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <motion_set>
}
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    295e:	85 e0       	ldi	r24, 0x05	; 5
    2960:	0e 94 6e 14 	call	0x28dc	; 0x28dc <motion_set>
}
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    296a:	df 93       	push	r29
    296c:	cf 93       	push	r28
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    2972:	8a e0       	ldi	r24, 0x0A	; 10
    2974:	0e 94 6e 14 	call	0x28dc	; 0x28dc <motion_set>
}
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <init_devices_lf>:

void init_devices_lf (void)
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
 	cli(); //Clears the global interrupts
    2986:	f8 94       	cli
	port_init_lf();
    2988:	0e 94 ac 13 	call	0x2758	; 0x2758 <port_init_lf>
	adc_init();
    298c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <adc_init>
	timer5_init();
    2990:	0e 94 b9 13 	call	0x2772	; 0x2772 <timer5_init>
	sei();   //Enables the global interrupts
    2994:	78 94       	sei
}
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <move_dir>:


void move_dir(unsigned int steps, int dir)  // moves the bot given no of steps in the given direction
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	cd b7       	in	r28, 0x3d	; 61
    29a2:	de b7       	in	r29, 0x3e	; 62
    29a4:	a0 97       	sbiw	r28, 0x20	; 32
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	9e 8f       	std	Y+30, r25	; 0x1e
    29b2:	8d 8f       	std	Y+29, r24	; 0x1d
    29b4:	78 a3       	std	Y+32, r23	; 0x20
    29b6:	6f 8f       	std	Y+31, r22	; 0x1f
	if (steps==0)
    29b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	09 f4       	brne	.+2      	; 0x29c2 <move_dir+0x26>
    29c0:	d2 c1       	rjmp	.+932    	; 0x2d66 <move_dir+0x3ca>
		return;

	else
	{
		if (dir==1)          //dir value 1 for forward and 0 for backward
    29c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c4:	98 a1       	ldd	r25, Y+32	; 0x20
    29c6:	81 30       	cpi	r24, 0x01	; 1
    29c8:	91 05       	cpc	r25, r1
    29ca:	19 f4       	brne	.+6      	; 0x29d2 <move_dir+0x36>
			forward();
    29cc:	0e 94 8d 14 	call	0x291a	; 0x291a <forward>
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <move_dir+0x3a>
		else
			backward();
    29d2:	0e 94 97 14 	call	0x292e	; 0x292e <backward>
		while(1)
		{

			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    29d6:	83 e0       	ldi	r24, 0x03	; 3
    29d8:	0e 94 01 14 	call	0x2802	; 0x2802 <ADC_Conversion>
    29dc:	80 93 0e 03 	sts	0x030E, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    29e0:	82 e0       	ldi	r24, 0x02	; 2
    29e2:	0e 94 01 14 	call	0x2802	; 0x2802 <ADC_Conversion>
    29e6:	80 93 0f 03 	sts	0x030F, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	0e 94 01 14 	call	0x2802	; 0x2802 <ADC_Conversion>
    29f0:	80 93 10 03 	sts	0x0310, r24

			//flag=0;

			print_sensor(1,1,3);	//Prints value of White Line Sensor1
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	61 e0       	ldi	r22, 0x01	; 1
    29f8:	43 e0       	ldi	r20, 0x03	; 3
    29fa:	0e 94 3b 14 	call	0x2876	; 0x2876 <print_sensor>
			print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	65 e0       	ldi	r22, 0x05	; 5
    2a02:	42 e0       	ldi	r20, 0x02	; 2
    2a04:	0e 94 3b 14 	call	0x2876	; 0x2876 <print_sensor>
			print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	69 e0       	ldi	r22, 0x09	; 9
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	0e 94 3b 14 	call	0x2876	; 0x2876 <print_sensor>
		
		

			if(Left_white_line<0x19 && Center_white_line<0x19 && Right_white_line<0x19)  //www
    2a12:	80 91 0e 03 	lds	r24, 0x030E
    2a16:	89 31       	cpi	r24, 0x19	; 25
    2a18:	b8 f4       	brcc	.+46     	; 0x2a48 <move_dir+0xac>
    2a1a:	80 91 0f 03 	lds	r24, 0x030F
    2a1e:	89 31       	cpi	r24, 0x19	; 25
    2a20:	98 f4       	brcc	.+38     	; 0x2a48 <move_dir+0xac>
    2a22:	80 91 10 03 	lds	r24, 0x0310
    2a26:	89 31       	cpi	r24, 0x19	; 25
    2a28:	78 f4       	brcc	.+30     	; 0x2a48 <move_dir+0xac>
			{
				if (dir==1)
    2a2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a2c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	91 05       	cpc	r25, r1
    2a32:	29 f4       	brne	.+10     	; 0x2a3e <move_dir+0xa2>
					velocity(150,250);    //adjusting the bot to move left for forward direction
    2a34:	86 e9       	ldi	r24, 0x96	; 150
    2a36:	6a ef       	ldi	r22, 0xFA	; 250
    2a38:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2a3c:	cc cf       	rjmp	.-104    	; 0x29d6 <move_dir+0x3a>
				else
					velocity(250,150);    //Doing the reverse for backward direction
    2a3e:	8a ef       	ldi	r24, 0xFA	; 250
    2a40:	66 e9       	ldi	r22, 0x96	; 150
    2a42:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2a46:	c7 cf       	rjmp	.-114    	; 0x29d6 <move_dir+0x3a>
			}

			else if(Left_white_line<0x19 && Center_white_line<0x19 && Right_white_line>0x19)  //wwb
    2a48:	80 91 0e 03 	lds	r24, 0x030E
    2a4c:	89 31       	cpi	r24, 0x19	; 25
    2a4e:	b8 f4       	brcc	.+46     	; 0x2a7e <move_dir+0xe2>
    2a50:	80 91 0f 03 	lds	r24, 0x030F
    2a54:	89 31       	cpi	r24, 0x19	; 25
    2a56:	98 f4       	brcc	.+38     	; 0x2a7e <move_dir+0xe2>
    2a58:	80 91 10 03 	lds	r24, 0x0310
    2a5c:	8a 31       	cpi	r24, 0x1A	; 26
    2a5e:	78 f0       	brcs	.+30     	; 0x2a7e <move_dir+0xe2>
			{
				if (dir==1)
    2a60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a62:	98 a1       	ldd	r25, Y+32	; 0x20
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	91 05       	cpc	r25, r1
    2a68:	29 f4       	brne	.+10     	; 0x2a74 <move_dir+0xd8>
					velocity(250,200);	  //Bot takes a slight right turn
    2a6a:	8a ef       	ldi	r24, 0xFA	; 250
    2a6c:	68 ec       	ldi	r22, 0xC8	; 200
    2a6e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2a72:	b1 cf       	rjmp	.-158    	; 0x29d6 <move_dir+0x3a>
				else
					velocity(200,250);
    2a74:	88 ec       	ldi	r24, 0xC8	; 200
    2a76:	6a ef       	ldi	r22, 0xFA	; 250
    2a78:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2a7c:	ac cf       	rjmp	.-168    	; 0x29d6 <move_dir+0x3a>
			}

		    else if(Left_white_line<0x19 && Center_white_line>0x19 && Right_white_line<0x19)  //wbw
    2a7e:	80 91 0e 03 	lds	r24, 0x030E
    2a82:	89 31       	cpi	r24, 0x19	; 25
    2a84:	68 f4       	brcc	.+26     	; 0x2aa0 <move_dir+0x104>
    2a86:	80 91 0f 03 	lds	r24, 0x030F
    2a8a:	8a 31       	cpi	r24, 0x1A	; 26
    2a8c:	48 f0       	brcs	.+18     	; 0x2aa0 <move_dir+0x104>
    2a8e:	80 91 10 03 	lds	r24, 0x0310
    2a92:	89 31       	cpi	r24, 0x19	; 25
    2a94:	28 f4       	brcc	.+10     	; 0x2aa0 <move_dir+0x104>
			{
				velocity(250,250);       //Bot simply moves forward or backward based on motors spinning direction
    2a96:	8a ef       	ldi	r24, 0xFA	; 250
    2a98:	6a ef       	ldi	r22, 0xFA	; 250
    2a9a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2a9e:	9b cf       	rjmp	.-202    	; 0x29d6 <move_dir+0x3a>
			}
		
			else if(Left_white_line<0x19 && Center_white_line>0x19 && Right_white_line>0x19)  //wbb
    2aa0:	80 91 0e 03 	lds	r24, 0x030E
    2aa4:	89 31       	cpi	r24, 0x19	; 25
    2aa6:	b8 f4       	brcc	.+46     	; 0x2ad6 <move_dir+0x13a>
    2aa8:	80 91 0f 03 	lds	r24, 0x030F
    2aac:	8a 31       	cpi	r24, 0x1A	; 26
    2aae:	98 f0       	brcs	.+38     	; 0x2ad6 <move_dir+0x13a>
    2ab0:	80 91 10 03 	lds	r24, 0x0310
    2ab4:	8a 31       	cpi	r24, 0x1A	; 26
    2ab6:	78 f0       	brcs	.+30     	; 0x2ad6 <move_dir+0x13a>
			{
				if (dir==1)
    2ab8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aba:	98 a1       	ldd	r25, Y+32	; 0x20
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	91 05       	cpc	r25, r1
    2ac0:	29 f4       	brne	.+10     	; 0x2acc <move_dir+0x130>
					velocity(220,200);   //Bot moves slightly to right
    2ac2:	8c ed       	ldi	r24, 0xDC	; 220
    2ac4:	68 ec       	ldi	r22, 0xC8	; 200
    2ac6:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2aca:	85 cf       	rjmp	.-246    	; 0x29d6 <move_dir+0x3a>
				else
					velocity(200,220);
    2acc:	88 ec       	ldi	r24, 0xC8	; 200
    2ace:	6c ed       	ldi	r22, 0xDC	; 220
    2ad0:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2ad4:	80 cf       	rjmp	.-256    	; 0x29d6 <move_dir+0x3a>
			}

			else if(Left_white_line>0x19 && Center_white_line<0x19 && Right_white_line<0x19)  //bww -- right
    2ad6:	80 91 0e 03 	lds	r24, 0x030E
    2ada:	8a 31       	cpi	r24, 0x1A	; 26
    2adc:	b8 f0       	brcs	.+46     	; 0x2b0c <move_dir+0x170>
    2ade:	80 91 0f 03 	lds	r24, 0x030F
    2ae2:	89 31       	cpi	r24, 0x19	; 25
    2ae4:	98 f4       	brcc	.+38     	; 0x2b0c <move_dir+0x170>
    2ae6:	80 91 10 03 	lds	r24, 0x0310
    2aea:	89 31       	cpi	r24, 0x19	; 25
    2aec:	78 f4       	brcc	.+30     	; 0x2b0c <move_dir+0x170>
			{
				if (dir==1)
    2aee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2af0:	98 a1       	ldd	r25, Y+32	; 0x20
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	91 05       	cpc	r25, r1
    2af6:	29 f4       	brne	.+10     	; 0x2b02 <move_dir+0x166>
					velocity(200,250);	 //Bot moves towards left
    2af8:	88 ec       	ldi	r24, 0xC8	; 200
    2afa:	6a ef       	ldi	r22, 0xFA	; 250
    2afc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2b00:	6a cf       	rjmp	.-300    	; 0x29d6 <move_dir+0x3a>
				else
					velocity(250,200);
    2b02:	8a ef       	ldi	r24, 0xFA	; 250
    2b04:	68 ec       	ldi	r22, 0xC8	; 200
    2b06:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2b0a:	65 cf       	rjmp	.-310    	; 0x29d6 <move_dir+0x3a>
			}


			else if(Left_white_line>0x19 && Center_white_line<0x19 && Right_white_line>0x19)	 //bwb -- straight
    2b0c:	80 91 0e 03 	lds	r24, 0x030E
    2b10:	8a 31       	cpi	r24, 0x1A	; 26
    2b12:	68 f0       	brcs	.+26     	; 0x2b2e <move_dir+0x192>
    2b14:	80 91 0f 03 	lds	r24, 0x030F
    2b18:	89 31       	cpi	r24, 0x19	; 25
    2b1a:	48 f4       	brcc	.+18     	; 0x2b2e <move_dir+0x192>
    2b1c:	80 91 10 03 	lds	r24, 0x0310
    2b20:	8a 31       	cpi	r24, 0x1A	; 26
    2b22:	28 f0       	brcs	.+10     	; 0x2b2e <move_dir+0x192>
			{
				velocity(250,250);   // Bot moves forward
    2b24:	8a ef       	ldi	r24, 0xFA	; 250
    2b26:	6a ef       	ldi	r22, 0xFA	; 250
    2b28:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2b2c:	54 cf       	rjmp	.-344    	; 0x29d6 <move_dir+0x3a>
			}

			else if(Left_white_line>0x19 && Center_white_line>0x19 && Right_white_line<0x19)  //bbw -- more right
    2b2e:	80 91 0e 03 	lds	r24, 0x030E
    2b32:	8a 31       	cpi	r24, 0x1A	; 26
    2b34:	b8 f0       	brcs	.+46     	; 0x2b64 <move_dir+0x1c8>
    2b36:	80 91 0f 03 	lds	r24, 0x030F
    2b3a:	8a 31       	cpi	r24, 0x1A	; 26
    2b3c:	98 f0       	brcs	.+38     	; 0x2b64 <move_dir+0x1c8>
    2b3e:	80 91 10 03 	lds	r24, 0x0310
    2b42:	89 31       	cpi	r24, 0x19	; 25
    2b44:	78 f4       	brcc	.+30     	; 0x2b64 <move_dir+0x1c8>
			{
				if (dir==1)
    2b46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b48:	98 a1       	ldd	r25, Y+32	; 0x20
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	29 f4       	brne	.+10     	; 0x2b5a <move_dir+0x1be>
					velocity(200,220);    //Bot moves slightly to left
    2b50:	88 ec       	ldi	r24, 0xC8	; 200
    2b52:	6c ed       	ldi	r22, 0xDC	; 220
    2b54:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2b58:	3e cf       	rjmp	.-388    	; 0x29d6 <move_dir+0x3a>
				else
					velocity(220,200);
    2b5a:	8c ed       	ldi	r24, 0xDC	; 220
    2b5c:	68 ec       	ldi	r22, 0xC8	; 200
    2b5e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2b62:	39 cf       	rjmp	.-398    	; 0x29d6 <move_dir+0x3a>
			}

			else if(Left_white_line>0x19 && Center_white_line>0x19 && Right_white_line>0x19)  //bbb
    2b64:	80 91 0e 03 	lds	r24, 0x030E
    2b68:	8a 31       	cpi	r24, 0x1A	; 26
    2b6a:	08 f4       	brcc	.+2      	; 0x2b6e <move_dir+0x1d2>
    2b6c:	34 cf       	rjmp	.-408    	; 0x29d6 <move_dir+0x3a>
    2b6e:	80 91 0f 03 	lds	r24, 0x030F
    2b72:	8a 31       	cpi	r24, 0x1A	; 26
    2b74:	08 f4       	brcc	.+2      	; 0x2b78 <move_dir+0x1dc>
    2b76:	2f cf       	rjmp	.-418    	; 0x29d6 <move_dir+0x3a>
    2b78:	80 91 10 03 	lds	r24, 0x0310
    2b7c:	8a 31       	cpi	r24, 0x1A	; 26
    2b7e:	08 f4       	brcc	.+2      	; 0x2b82 <move_dir+0x1e6>
    2b80:	2a cf       	rjmp	.-428    	; 0x29d6 <move_dir+0x3a>
			{
				stop();               //completed one step
    2b82:	0e 94 a1 14 	call	0x2942	; 0x2942 <stop>
				velocity(0,0);
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	aa ef       	ldi	r26, 0xFA	; 250
    2b94:	b3 e4       	ldi	r27, 0x43	; 67
    2b96:	89 8f       	std	Y+25, r24	; 0x19
    2b98:	9a 8f       	std	Y+26, r25	; 0x1a
    2b9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba6:	26 e6       	ldi	r18, 0x66	; 102
    2ba8:	36 e6       	ldi	r19, 0x66	; 102
    2baa:	46 e6       	ldi	r20, 0x66	; 102
    2bac:	55 e4       	ldi	r21, 0x45	; 69
    2bae:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	8d 8b       	std	Y+21, r24	; 0x15
    2bb8:	9e 8b       	std	Y+22, r25	; 0x16
    2bba:	af 8b       	std	Y+23, r26	; 0x17
    2bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	2c f4       	brge	.+10     	; 0x2be0 <move_dir+0x244>
		__ticks = 1;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9c 8b       	std	Y+20, r25	; 0x14
    2bdc:	8b 8b       	std	Y+19, r24	; 0x13
    2bde:	3f c0       	rjmp	.+126    	; 0x2c5e <move_dir+0x2c2>
	else if (__tmp > 65535)
    2be0:	6d 89       	ldd	r22, Y+21	; 0x15
    2be2:	7e 89       	ldd	r23, Y+22	; 0x16
    2be4:	8f 89       	ldd	r24, Y+23	; 0x17
    2be6:	98 8d       	ldd	r25, Y+24	; 0x18
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	3f ef       	ldi	r19, 0xFF	; 255
    2bec:	4f e7       	ldi	r20, 0x7F	; 127
    2bee:	57 e4       	ldi	r21, 0x47	; 71
    2bf0:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    2bf4:	18 16       	cp	r1, r24
    2bf6:	4c f5       	brge	.+82     	; 0x2c4a <move_dir+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e2       	ldi	r20, 0x20	; 32
    2c06:	51 e4       	ldi	r21, 0x41	; 65
    2c08:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	bc 01       	movw	r22, r24
    2c12:	cd 01       	movw	r24, r26
    2c14:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
    2c1e:	8b 8b       	std	Y+19, r24	; 0x13
    2c20:	0f c0       	rjmp	.+30     	; 0x2c40 <move_dir+0x2a4>
    2c22:	80 e7       	ldi	r24, 0x70	; 112
    2c24:	91 e0       	ldi	r25, 0x01	; 1
    2c26:	9a 8b       	std	Y+18, r25	; 0x12
    2c28:	89 8b       	std	Y+17, r24	; 0x11
    2c2a:	89 89       	ldd	r24, Y+17	; 0x11
    2c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <move_dir+0x292>
    2c32:	9a 8b       	std	Y+18, r25	; 0x12
    2c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c36:	8b 89       	ldd	r24, Y+19	; 0x13
    2c38:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	9c 8b       	std	Y+20, r25	; 0x14
    2c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c40:	8b 89       	ldd	r24, Y+19	; 0x13
    2c42:	9c 89       	ldd	r25, Y+20	; 0x14
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	69 f7       	brne	.-38     	; 0x2c22 <move_dir+0x286>
    2c48:	14 c0       	rjmp	.+40     	; 0x2c72 <move_dir+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c50:	98 8d       	ldd	r25, Y+24	; 0x18
    2c52:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9c 8b       	std	Y+20, r25	; 0x14
    2c5c:	8b 8b       	std	Y+19, r24	; 0x13
    2c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c60:	9c 89       	ldd	r25, Y+20	; 0x14
    2c62:	98 8b       	std	Y+16, r25	; 0x10
    2c64:	8f 87       	std	Y+15, r24	; 0x0f
    2c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c68:	98 89       	ldd	r25, Y+16	; 0x10
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <move_dir+0x2ce>
    2c6e:	98 8b       	std	Y+16, r25	; 0x10
    2c70:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				move_dir(steps-1, dir);  // decremented the no of steps in that direction by 1
    2c72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2c7a:	38 a1       	ldd	r19, Y+32	; 0x20
    2c7c:	b9 01       	movw	r22, r18
    2c7e:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	aa ef       	ldi	r26, 0xFA	; 250
    2c88:	b3 e4       	ldi	r27, 0x43	; 67
    2c8a:	8b 87       	std	Y+11, r24	; 0x0b
    2c8c:	9c 87       	std	Y+12, r25	; 0x0c
    2c8e:	ad 87       	std	Y+13, r26	; 0x0d
    2c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9a:	26 e6       	ldi	r18, 0x66	; 102
    2c9c:	36 e6       	ldi	r19, 0x66	; 102
    2c9e:	46 e6       	ldi	r20, 0x66	; 102
    2ca0:	55 e4       	ldi	r21, 0x45	; 69
    2ca2:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	8f 83       	std	Y+7, r24	; 0x07
    2cac:	98 87       	std	Y+8, r25	; 0x08
    2cae:	a9 87       	std	Y+9, r26	; 0x09
    2cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb4:	78 85       	ldd	r23, Y+8	; 0x08
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	5f e3       	ldi	r21, 0x3F	; 63
    2cc2:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    2cc6:	88 23       	and	r24, r24
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <move_dir+0x338>
		__ticks = 1;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
    2cd2:	3f c0       	rjmp	.+126    	; 0x2d52 <move_dir+0x3b6>
	else if (__tmp > 65535)
    2cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd6:	78 85       	ldd	r23, Y+8	; 0x08
    2cd8:	89 85       	ldd	r24, Y+9	; 0x09
    2cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	3f ef       	ldi	r19, 0xFF	; 255
    2ce0:	4f e7       	ldi	r20, 0x7F	; 127
    2ce2:	57 e4       	ldi	r21, 0x47	; 71
    2ce4:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    2ce8:	18 16       	cp	r1, r24
    2cea:	4c f5       	brge	.+82     	; 0x2d3e <move_dir+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e2       	ldi	r20, 0x20	; 32
    2cfa:	51 e4       	ldi	r21, 0x41	; 65
    2cfc:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9e 83       	std	Y+6, r25	; 0x06
    2d12:	8d 83       	std	Y+5, r24	; 0x05
    2d14:	0f c0       	rjmp	.+30     	; 0x2d34 <move_dir+0x398>
    2d16:	80 e7       	ldi	r24, 0x70	; 112
    2d18:	91 e0       	ldi	r25, 0x01	; 1
    2d1a:	9c 83       	std	Y+4, r25	; 0x04
    2d1c:	8b 83       	std	Y+3, r24	; 0x03
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	9c 81       	ldd	r25, Y+4	; 0x04
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <move_dir+0x386>
    2d26:	9c 83       	std	Y+4, r25	; 0x04
    2d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	9e 83       	std	Y+6, r25	; 0x06
    2d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d34:	8d 81       	ldd	r24, Y+5	; 0x05
    2d36:	9e 81       	ldd	r25, Y+6	; 0x06
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	69 f7       	brne	.-38     	; 0x2d16 <move_dir+0x37a>
    2d3c:	14 c0       	rjmp	.+40     	; 0x2d66 <move_dir+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d40:	78 85       	ldd	r23, Y+8	; 0x08
    2d42:	89 85       	ldd	r24, Y+9	; 0x09
    2d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d46:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	8d 81       	ldd	r24, Y+5	; 0x05
    2d54:	9e 81       	ldd	r25, Y+6	; 0x06
    2d56:	9a 83       	std	Y+2, r25	; 0x02
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <move_dir+0x3c2>
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				break;
			}
		}
	}
}
    2d66:	a0 96       	adiw	r28, 0x20	; 32
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <move_bot>:


void move_bot(unsigned int row, unsigned int col)   // Moves the bot to a particular row and column from starting position (0 0)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	62 97       	sbiw	r28, 0x12	; 18
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	98 8b       	std	Y+16, r25	; 0x10
    2d8e:	8f 87       	std	Y+15, r24	; 0x0f
    2d90:	7a 8b       	std	Y+18, r23	; 0x12
    2d92:	69 8b       	std	Y+17, r22	; 0x11
	
	if (row==0 && col==0)
    2d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d96:	98 89       	ldd	r25, Y+16	; 0x10
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	29 f4       	brne	.+10     	; 0x2da6 <move_bot+0x2e>
    2d9c:	89 89       	ldd	r24, Y+17	; 0x11
    2d9e:	9a 89       	ldd	r25, Y+18	; 0x12
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <move_bot+0x2e>
    2da4:	8d c0       	rjmp	.+282    	; 0x2ec0 <move_bot+0x148>
		return;	

	if (col==0)
    2da6:	89 89       	ldd	r24, Y+17	; 0x11
    2da8:	9a 89       	ldd	r25, Y+18	; 0x12
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	39 f4       	brne	.+14     	; 0x2dbc <move_bot+0x44>
		move_dir(row,1);   //simply cover the rows
    2dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db0:	98 89       	ldd	r25, Y+16	; 0x10
    2db2:	61 e0       	ldi	r22, 0x01	; 1
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    2dba:	82 c0       	rjmp	.+260    	; 0x2ec0 <move_bot+0x148>
	else
	{
		move_dir(row,1);   // first cover the rows
    2dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbe:	98 89       	ldd	r25, Y+16	; 0x10
    2dc0:	61 e0       	ldi	r22, 0x01	; 1
    2dc2:	70 e0       	ldi	r23, 0x00	; 0
    2dc4:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
		velocity(0,250);   // Takes left turn 
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	6a ef       	ldi	r22, 0xFA	; 250
    2dcc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	90 e8       	ldi	r25, 0x80	; 128
    2dd4:	ab e3       	ldi	r26, 0x3B	; 59
    2dd6:	b5 e4       	ldi	r27, 0x45	; 69
    2dd8:	8b 87       	std	Y+11, r24	; 0x0b
    2dda:	9c 87       	std	Y+12, r25	; 0x0c
    2ddc:	ad 87       	std	Y+13, r26	; 0x0d
    2dde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de8:	26 e6       	ldi	r18, 0x66	; 102
    2dea:	36 e6       	ldi	r19, 0x66	; 102
    2dec:	46 e6       	ldi	r20, 0x66	; 102
    2dee:	55 e4       	ldi	r21, 0x45	; 69
    2df0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	8f 83       	std	Y+7, r24	; 0x07
    2dfa:	98 87       	std	Y+8, r25	; 0x08
    2dfc:	a9 87       	std	Y+9, r26	; 0x09
    2dfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e00:	6f 81       	ldd	r22, Y+7	; 0x07
    2e02:	78 85       	ldd	r23, Y+8	; 0x08
    2e04:	89 85       	ldd	r24, Y+9	; 0x09
    2e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e8       	ldi	r20, 0x80	; 128
    2e0e:	5f e3       	ldi	r21, 0x3F	; 63
    2e10:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    2e14:	88 23       	and	r24, r24
    2e16:	2c f4       	brge	.+10     	; 0x2e22 <move_bot+0xaa>
		__ticks = 1;
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	9e 83       	std	Y+6, r25	; 0x06
    2e1e:	8d 83       	std	Y+5, r24	; 0x05
    2e20:	3f c0       	rjmp	.+126    	; 0x2ea0 <move_bot+0x128>
	else if (__tmp > 65535)
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	3f ef       	ldi	r19, 0xFF	; 255
    2e2e:	4f e7       	ldi	r20, 0x7F	; 127
    2e30:	57 e4       	ldi	r21, 0x47	; 71
    2e32:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    2e36:	18 16       	cp	r1, r24
    2e38:	4c f5       	brge	.+82     	; 0x2e8c <move_bot+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	40 e2       	ldi	r20, 0x20	; 32
    2e48:	51 e4       	ldi	r21, 0x41	; 65
    2e4a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    2e4e:	dc 01       	movw	r26, r24
    2e50:	cb 01       	movw	r24, r22
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9e 83       	std	Y+6, r25	; 0x06
    2e60:	8d 83       	std	Y+5, r24	; 0x05
    2e62:	0f c0       	rjmp	.+30     	; 0x2e82 <move_bot+0x10a>
    2e64:	80 e7       	ldi	r24, 0x70	; 112
    2e66:	91 e0       	ldi	r25, 0x01	; 1
    2e68:	9c 83       	std	Y+4, r25	; 0x04
    2e6a:	8b 83       	std	Y+3, r24	; 0x03
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <move_bot+0xf8>
    2e74:	9c 83       	std	Y+4, r25	; 0x04
    2e76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e78:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	9e 83       	std	Y+6, r25	; 0x06
    2e80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	69 f7       	brne	.-38     	; 0x2e64 <move_bot+0xec>
    2e8a:	14 c0       	rjmp	.+40     	; 0x2eb4 <move_bot+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8e:	78 85       	ldd	r23, Y+8	; 0x08
    2e90:	89 85       	ldd	r24, Y+9	; 0x09
    2e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e94:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	9e 83       	std	Y+6, r25	; 0x06
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <move_bot+0x134>
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		move_dir(col,1);   // now covers the columns
    2eb4:	89 89       	ldd	r24, Y+17	; 0x11
    2eb6:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb8:	61 e0       	ldi	r22, 0x01	; 1
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
			
	}
}
    2ec0:	62 96       	adiw	r28, 0x12	; 18
    2ec2:	0f b6       	in	r0, 0x3f	; 63
    2ec4:	f8 94       	cli
    2ec6:	de bf       	out	0x3e, r29	; 62
    2ec8:	0f be       	out	0x3f, r0	; 63
    2eca:	cd bf       	out	0x3d, r28	; 61
    2ecc:	cf 91       	pop	r28
    2ece:	df 91       	pop	r29
    2ed0:	08 95       	ret

00002ed2 <move_bot_p2p>:

// Moves the bot from (row1 col1) to (row2 col2)

// While using these functions adjust the delay properly while taking turns
void move_bot_p2p(unsigned int row1, unsigned int col1, unsigned int row2, unsigned int col2)
{
    2ed2:	0f 93       	push	r16
    2ed4:	1f 93       	push	r17
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	c8 5e       	subi	r28, 0xE8	; 232
    2ee0:	d0 40       	sbci	r29, 0x00	; 0
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	fe 01       	movw	r30, r28
    2eee:	ef 51       	subi	r30, 0x1F	; 31
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	80 83       	st	Z, r24
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	ed 51       	subi	r30, 0x1D	; 29
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	71 83       	std	Z+1, r23	; 0x01
    2efe:	60 83       	st	Z, r22
    2f00:	fe 01       	movw	r30, r28
    2f02:	eb 51       	subi	r30, 0x1B	; 27
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	51 83       	std	Z+1, r21	; 0x01
    2f08:	40 83       	st	Z, r20
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e9 51       	subi	r30, 0x19	; 25
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	31 83       	std	Z+1, r19	; 0x01
    2f12:	20 83       	st	Z, r18
	if (col1==col2)
    2f14:	fe 01       	movw	r30, r28
    2f16:	ed 51       	subi	r30, 0x1D	; 29
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	de 01       	movw	r26, r28
    2f1c:	a9 51       	subi	r26, 0x19	; 25
    2f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f20:	20 81       	ld	r18, Z
    2f22:	31 81       	ldd	r19, Z+1	; 0x01
    2f24:	8d 91       	ld	r24, X+
    2f26:	9c 91       	ld	r25, X
    2f28:	11 97       	sbiw	r26, 0x01	; 1
    2f2a:	28 17       	cp	r18, r24
    2f2c:	39 07       	cpc	r19, r25
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <move_bot_p2p+0x60>
    2f30:	46 c0       	rjmp	.+140    	; 0x2fbe <move_bot_p2p+0xec>
	{
		if (row1<row2)
    2f32:	fe 01       	movw	r30, r28
    2f34:	ef 51       	subi	r30, 0x1F	; 31
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	de 01       	movw	r26, r28
    2f3a:	ab 51       	subi	r26, 0x1B	; 27
    2f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3e:	20 81       	ld	r18, Z
    2f40:	31 81       	ldd	r19, Z+1	; 0x01
    2f42:	8d 91       	ld	r24, X+
    2f44:	9c 91       	ld	r25, X
    2f46:	11 97       	sbiw	r26, 0x01	; 1
    2f48:	28 17       	cp	r18, r24
    2f4a:	39 07       	cpc	r19, r25
    2f4c:	a0 f4       	brcc	.+40     	; 0x2f76 <move_bot_p2p+0xa4>
			move_dir(row2-row1,1);  // Simply cover the rows in the correct direction
    2f4e:	fe 01       	movw	r30, r28
    2f50:	eb 51       	subi	r30, 0x1B	; 27
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	de 01       	movw	r26, r28
    2f56:	af 51       	subi	r26, 0x1F	; 31
    2f58:	bf 4f       	sbci	r27, 0xFF	; 255
    2f5a:	20 81       	ld	r18, Z
    2f5c:	31 81       	ldd	r19, Z+1	; 0x01
    2f5e:	8d 91       	ld	r24, X+
    2f60:	9c 91       	ld	r25, X
    2f62:	a9 01       	movw	r20, r18
    2f64:	48 1b       	sub	r20, r24
    2f66:	59 0b       	sbc	r21, r25
    2f68:	ca 01       	movw	r24, r20
    2f6a:	61 e0       	ldi	r22, 0x01	; 1
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    2f72:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <move_bot_p2p+0x17d6>
		else if (row1>row2)
    2f76:	fe 01       	movw	r30, r28
    2f78:	ef 51       	subi	r30, 0x1F	; 31
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	de 01       	movw	r26, r28
    2f7e:	ab 51       	subi	r26, 0x1B	; 27
    2f80:	bf 4f       	sbci	r27, 0xFF	; 255
    2f82:	20 81       	ld	r18, Z
    2f84:	31 81       	ldd	r19, Z+1	; 0x01
    2f86:	8d 91       	ld	r24, X+
    2f88:	9c 91       	ld	r25, X
    2f8a:	11 97       	sbiw	r26, 0x01	; 1
    2f8c:	82 17       	cp	r24, r18
    2f8e:	93 07       	cpc	r25, r19
    2f90:	10 f0       	brcs	.+4      	; 0x2f96 <move_bot_p2p+0xc4>
    2f92:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <move_bot_p2p+0x17d6>
			move_dir(row1-row2,0);
    2f96:	fe 01       	movw	r30, r28
    2f98:	ef 51       	subi	r30, 0x1F	; 31
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	de 01       	movw	r26, r28
    2f9e:	ab 51       	subi	r26, 0x1B	; 27
    2fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa2:	20 81       	ld	r18, Z
    2fa4:	31 81       	ldd	r19, Z+1	; 0x01
    2fa6:	8d 91       	ld	r24, X+
    2fa8:	9c 91       	ld	r25, X
    2faa:	f9 01       	movw	r30, r18
    2fac:	e8 1b       	sub	r30, r24
    2fae:	f9 0b       	sbc	r31, r25
    2fb0:	cf 01       	movw	r24, r30
    2fb2:	60 e0       	ldi	r22, 0x00	; 0
    2fb4:	70 e0       	ldi	r23, 0x00	; 0
    2fb6:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    2fba:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <move_bot_p2p+0x17d6>
	}
	
	else if (col1<col2)
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	ed 51       	subi	r30, 0x1D	; 29
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	de 01       	movw	r26, r28
    2fc6:	a9 51       	subi	r26, 0x19	; 25
    2fc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fca:	20 81       	ld	r18, Z
    2fcc:	31 81       	ldd	r19, Z+1	; 0x01
    2fce:	8d 91       	ld	r24, X+
    2fd0:	9c 91       	ld	r25, X
    2fd2:	11 97       	sbiw	r26, 0x01	; 1
    2fd4:	28 17       	cp	r18, r24
    2fd6:	39 07       	cpc	r19, r25
    2fd8:	08 f0       	brcs	.+2      	; 0x2fdc <move_bot_p2p+0x10a>
    2fda:	4d c6       	rjmp	.+3226   	; 0x3c76 <move_bot_p2p+0xda4>
	{
		if(row1<=row2)
    2fdc:	fe 01       	movw	r30, r28
    2fde:	ef 51       	subi	r30, 0x1F	; 31
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	de 01       	movw	r26, r28
    2fe4:	ab 51       	subi	r26, 0x1B	; 27
    2fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe8:	20 81       	ld	r18, Z
    2fea:	31 81       	ldd	r19, Z+1	; 0x01
    2fec:	8d 91       	ld	r24, X+
    2fee:	9c 91       	ld	r25, X
    2ff0:	11 97       	sbiw	r26, 0x01	; 1
    2ff2:	82 17       	cp	r24, r18
    2ff4:	93 07       	cpc	r25, r19
    2ff6:	08 f4       	brcc	.+2      	; 0x2ffa <move_bot_p2p+0x128>
    2ff8:	2a c3       	rjmp	.+1620   	; 0x364e <move_bot_p2p+0x77c>
		{
			if (row1==row2)
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	ef 51       	subi	r30, 0x1F	; 31
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	de 01       	movw	r26, r28
    3002:	ab 51       	subi	r26, 0x1B	; 27
    3004:	bf 4f       	sbci	r27, 0xFF	; 255
    3006:	20 81       	ld	r18, Z
    3008:	31 81       	ldd	r19, Z+1	; 0x01
    300a:	8d 91       	ld	r24, X+
    300c:	9c 91       	ld	r25, X
    300e:	11 97       	sbiw	r26, 0x01	; 1
    3010:	28 17       	cp	r18, r24
    3012:	39 07       	cpc	r19, r25
    3014:	39 f4       	brne	.+14     	; 0x3024 <move_bot_p2p+0x152>
				move_dir(1,0);     //moves one step backward
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    3022:	23 c0       	rjmp	.+70     	; 0x306a <move_bot_p2p+0x198>
			else if(row1 < row2-1) 
    3024:	fe 01       	movw	r30, r28
    3026:	eb 51       	subi	r30, 0x1B	; 27
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	80 81       	ld	r24, Z
    302c:	91 81       	ldd	r25, Z+1	; 0x01
    302e:	9c 01       	movw	r18, r24
    3030:	21 50       	subi	r18, 0x01	; 1
    3032:	30 40       	sbci	r19, 0x00	; 0
    3034:	fe 01       	movw	r30, r28
    3036:	ef 51       	subi	r30, 0x1F	; 31
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 81       	ld	r24, Z
    303c:	91 81       	ldd	r25, Z+1	; 0x01
    303e:	82 17       	cp	r24, r18
    3040:	93 07       	cpc	r25, r19
    3042:	98 f4       	brcc	.+38     	; 0x306a <move_bot_p2p+0x198>
				move_dir(row2-row1-1,1); // moves diff minus 1 steps because some rows are dedicated to plants so u cant walk along that row so go to previous row and cover the columns
    3044:	fe 01       	movw	r30, r28
    3046:	eb 51       	subi	r30, 0x1B	; 27
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	de 01       	movw	r26, r28
    304c:	af 51       	subi	r26, 0x1F	; 31
    304e:	bf 4f       	sbci	r27, 0xFF	; 255
    3050:	20 81       	ld	r18, Z
    3052:	31 81       	ldd	r19, Z+1	; 0x01
    3054:	8d 91       	ld	r24, X+
    3056:	9c 91       	ld	r25, X
    3058:	a9 01       	movw	r20, r18
    305a:	48 1b       	sub	r20, r24
    305c:	59 0b       	sbc	r21, r25
    305e:	ca 01       	movw	r24, r20
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	70 e0       	ldi	r23, 0x00	; 0
    3066:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    306a:	fe 01       	movw	r30, r28
    306c:	e3 52       	subi	r30, 0x23	; 35
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	a1 ee       	ldi	r26, 0xE1	; 225
    3076:	b3 e4       	ldi	r27, 0x43	; 67
    3078:	80 83       	st	Z, r24
    307a:	91 83       	std	Z+1, r25	; 0x01
    307c:	a2 83       	std	Z+2, r26	; 0x02
    307e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3080:	8e 01       	movw	r16, r28
    3082:	07 52       	subi	r16, 0x27	; 39
    3084:	1f 4f       	sbci	r17, 0xFF	; 255
    3086:	fe 01       	movw	r30, r28
    3088:	e3 52       	subi	r30, 0x23	; 35
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	60 81       	ld	r22, Z
    308e:	71 81       	ldd	r23, Z+1	; 0x01
    3090:	82 81       	ldd	r24, Z+2	; 0x02
    3092:	93 81       	ldd	r25, Z+3	; 0x03
    3094:	26 e6       	ldi	r18, 0x66	; 102
    3096:	36 e6       	ldi	r19, 0x66	; 102
    3098:	46 e6       	ldi	r20, 0x66	; 102
    309a:	55 e4       	ldi	r21, 0x45	; 69
    309c:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	f8 01       	movw	r30, r16
    30a6:	80 83       	st	Z, r24
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	a2 83       	std	Z+2, r26	; 0x02
    30ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30ae:	fe 01       	movw	r30, r28
    30b0:	e7 52       	subi	r30, 0x27	; 39
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	60 81       	ld	r22, Z
    30b6:	71 81       	ldd	r23, Z+1	; 0x01
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e8       	ldi	r20, 0x80	; 128
    30c2:	5f e3       	ldi	r21, 0x3F	; 63
    30c4:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    30c8:	88 23       	and	r24, r24
    30ca:	44 f4       	brge	.+16     	; 0x30dc <move_bot_p2p+0x20a>
		__ticks = 1;
    30cc:	fe 01       	movw	r30, r28
    30ce:	e9 52       	subi	r30, 0x29	; 41
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	80 83       	st	Z, r24
    30da:	64 c0       	rjmp	.+200    	; 0x31a4 <move_bot_p2p+0x2d2>
	else if (__tmp > 65535)
    30dc:	fe 01       	movw	r30, r28
    30de:	e7 52       	subi	r30, 0x27	; 39
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	3f ef       	ldi	r19, 0xFF	; 255
    30ee:	4f e7       	ldi	r20, 0x7F	; 127
    30f0:	57 e4       	ldi	r21, 0x47	; 71
    30f2:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    30f6:	18 16       	cp	r1, r24
    30f8:	0c f0       	brlt	.+2      	; 0x30fc <move_bot_p2p+0x22a>
    30fa:	43 c0       	rjmp	.+134    	; 0x3182 <move_bot_p2p+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fc:	fe 01       	movw	r30, r28
    30fe:	e3 52       	subi	r30, 0x23	; 35
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	60 81       	ld	r22, Z
    3104:	71 81       	ldd	r23, Z+1	; 0x01
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	93 81       	ldd	r25, Z+3	; 0x03
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	40 e2       	ldi	r20, 0x20	; 32
    3110:	51 e4       	ldi	r21, 0x41	; 65
    3112:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	8e 01       	movw	r16, r28
    311c:	09 52       	subi	r16, 0x29	; 41
    311e:	1f 4f       	sbci	r17, 0xFF	; 255
    3120:	bc 01       	movw	r22, r24
    3122:	cd 01       	movw	r24, r26
    3124:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	f8 01       	movw	r30, r16
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	80 83       	st	Z, r24
    3132:	1f c0       	rjmp	.+62     	; 0x3172 <move_bot_p2p+0x2a0>
    3134:	fe 01       	movw	r30, r28
    3136:	eb 52       	subi	r30, 0x2B	; 43
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	80 e7       	ldi	r24, 0x70	; 112
    313c:	91 e0       	ldi	r25, 0x01	; 1
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	80 83       	st	Z, r24
    3142:	fe 01       	movw	r30, r28
    3144:	eb 52       	subi	r30, 0x2B	; 43
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	80 81       	ld	r24, Z
    314a:	91 81       	ldd	r25, Z+1	; 0x01
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	f1 f7       	brne	.-4      	; 0x314c <move_bot_p2p+0x27a>
    3150:	fe 01       	movw	r30, r28
    3152:	eb 52       	subi	r30, 0x2B	; 43
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	91 83       	std	Z+1, r25	; 0x01
    3158:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315a:	de 01       	movw	r26, r28
    315c:	a9 52       	subi	r26, 0x29	; 41
    315e:	bf 4f       	sbci	r27, 0xFF	; 255
    3160:	fe 01       	movw	r30, r28
    3162:	e9 52       	subi	r30, 0x29	; 41
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	11 96       	adiw	r26, 0x01	; 1
    316e:	9c 93       	st	X, r25
    3170:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3172:	fe 01       	movw	r30, r28
    3174:	e9 52       	subi	r30, 0x29	; 41
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	00 97       	sbiw	r24, 0x00	; 0
    317e:	d1 f6       	brne	.-76     	; 0x3134 <move_bot_p2p+0x262>
    3180:	27 c0       	rjmp	.+78     	; 0x31d0 <move_bot_p2p+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3182:	8e 01       	movw	r16, r28
    3184:	09 52       	subi	r16, 0x29	; 41
    3186:	1f 4f       	sbci	r17, 0xFF	; 255
    3188:	fe 01       	movw	r30, r28
    318a:	e7 52       	subi	r30, 0x27	; 39
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	60 81       	ld	r22, Z
    3190:	71 81       	ldd	r23, Z+1	; 0x01
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	f8 01       	movw	r30, r16
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	80 83       	st	Z, r24
    31a4:	de 01       	movw	r26, r28
    31a6:	ad 52       	subi	r26, 0x2D	; 45
    31a8:	bf 4f       	sbci	r27, 0xFF	; 255
    31aa:	fe 01       	movw	r30, r28
    31ac:	e9 52       	subi	r30, 0x29	; 41
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 81       	ld	r24, Z
    31b2:	91 81       	ldd	r25, Z+1	; 0x01
    31b4:	8d 93       	st	X+, r24
    31b6:	9c 93       	st	X, r25
    31b8:	fe 01       	movw	r30, r28
    31ba:	ed 52       	subi	r30, 0x2D	; 45
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	80 81       	ld	r24, Z
    31c0:	91 81       	ldd	r25, Z+1	; 0x01
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <move_bot_p2p+0x2f0>
    31c6:	fe 01       	movw	r30, r28
    31c8:	ed 52       	subi	r30, 0x2D	; 45
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	80 83       	st	Z, r24
			_delay_ms(450);
			velocity(250,250);
    31d0:	8a ef       	ldi	r24, 0xFA	; 250
    31d2:	6a ef       	ldi	r22, 0xFA	; 250
    31d4:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			right();			// takes right turn 
    31d8:	0e 94 b5 14 	call	0x296a	; 0x296a <right>
    31dc:	fe 01       	movw	r30, r28
    31de:	e1 53       	subi	r30, 0x31	; 49
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e8       	ldi	r25, 0x80	; 128
    31e6:	a9 e0       	ldi	r26, 0x09	; 9
    31e8:	b4 e4       	ldi	r27, 0x44	; 68
    31ea:	80 83       	st	Z, r24
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	a2 83       	std	Z+2, r26	; 0x02
    31f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f2:	8e 01       	movw	r16, r28
    31f4:	05 53       	subi	r16, 0x35	; 53
    31f6:	1f 4f       	sbci	r17, 0xFF	; 255
    31f8:	fe 01       	movw	r30, r28
    31fa:	e1 53       	subi	r30, 0x31	; 49
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	26 e6       	ldi	r18, 0x66	; 102
    3208:	36 e6       	ldi	r19, 0x66	; 102
    320a:	46 e6       	ldi	r20, 0x66	; 102
    320c:	55 e4       	ldi	r21, 0x45	; 69
    320e:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	f8 01       	movw	r30, r16
    3218:	80 83       	st	Z, r24
    321a:	91 83       	std	Z+1, r25	; 0x01
    321c:	a2 83       	std	Z+2, r26	; 0x02
    321e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3220:	fe 01       	movw	r30, r28
    3222:	e5 53       	subi	r30, 0x35	; 53
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e8       	ldi	r20, 0x80	; 128
    3234:	5f e3       	ldi	r21, 0x3F	; 63
    3236:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    323a:	88 23       	and	r24, r24
    323c:	44 f4       	brge	.+16     	; 0x324e <move_bot_p2p+0x37c>
		__ticks = 1;
    323e:	fe 01       	movw	r30, r28
    3240:	e7 53       	subi	r30, 0x37	; 55
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	91 83       	std	Z+1, r25	; 0x01
    324a:	80 83       	st	Z, r24
    324c:	64 c0       	rjmp	.+200    	; 0x3316 <move_bot_p2p+0x444>
	else if (__tmp > 65535)
    324e:	fe 01       	movw	r30, r28
    3250:	e5 53       	subi	r30, 0x35	; 53
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	82 81       	ldd	r24, Z+2	; 0x02
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	0c f0       	brlt	.+2      	; 0x326e <move_bot_p2p+0x39c>
    326c:	43 c0       	rjmp	.+134    	; 0x32f4 <move_bot_p2p+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326e:	fe 01       	movw	r30, r28
    3270:	e1 53       	subi	r30, 0x31	; 49
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	60 81       	ld	r22, Z
    3276:	71 81       	ldd	r23, Z+1	; 0x01
    3278:	82 81       	ldd	r24, Z+2	; 0x02
    327a:	93 81       	ldd	r25, Z+3	; 0x03
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e2       	ldi	r20, 0x20	; 32
    3282:	51 e4       	ldi	r21, 0x41	; 65
    3284:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	8e 01       	movw	r16, r28
    328e:	07 53       	subi	r16, 0x37	; 55
    3290:	1f 4f       	sbci	r17, 0xFF	; 255
    3292:	bc 01       	movw	r22, r24
    3294:	cd 01       	movw	r24, r26
    3296:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	f8 01       	movw	r30, r16
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	1f c0       	rjmp	.+62     	; 0x32e4 <move_bot_p2p+0x412>
    32a6:	fe 01       	movw	r30, r28
    32a8:	e9 53       	subi	r30, 0x39	; 57
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	80 e7       	ldi	r24, 0x70	; 112
    32ae:	91 e0       	ldi	r25, 0x01	; 1
    32b0:	91 83       	std	Z+1, r25	; 0x01
    32b2:	80 83       	st	Z, r24
    32b4:	fe 01       	movw	r30, r28
    32b6:	e9 53       	subi	r30, 0x39	; 57
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	80 81       	ld	r24, Z
    32bc:	91 81       	ldd	r25, Z+1	; 0x01
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	f1 f7       	brne	.-4      	; 0x32be <move_bot_p2p+0x3ec>
    32c2:	fe 01       	movw	r30, r28
    32c4:	e9 53       	subi	r30, 0x39	; 57
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	91 83       	std	Z+1, r25	; 0x01
    32ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32cc:	de 01       	movw	r26, r28
    32ce:	a7 53       	subi	r26, 0x37	; 55
    32d0:	bf 4f       	sbci	r27, 0xFF	; 255
    32d2:	fe 01       	movw	r30, r28
    32d4:	e7 53       	subi	r30, 0x37	; 55
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	80 81       	ld	r24, Z
    32da:	91 81       	ldd	r25, Z+1	; 0x01
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	11 96       	adiw	r26, 0x01	; 1
    32e0:	9c 93       	st	X, r25
    32e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e4:	fe 01       	movw	r30, r28
    32e6:	e7 53       	subi	r30, 0x37	; 55
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	d1 f6       	brne	.-76     	; 0x32a6 <move_bot_p2p+0x3d4>
    32f2:	27 c0       	rjmp	.+78     	; 0x3342 <move_bot_p2p+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f4:	8e 01       	movw	r16, r28
    32f6:	07 53       	subi	r16, 0x37	; 55
    32f8:	1f 4f       	sbci	r17, 0xFF	; 255
    32fa:	fe 01       	movw	r30, r28
    32fc:	e5 53       	subi	r30, 0x35	; 53
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	60 81       	ld	r22, Z
    3302:	71 81       	ldd	r23, Z+1	; 0x01
    3304:	82 81       	ldd	r24, Z+2	; 0x02
    3306:	93 81       	ldd	r25, Z+3	; 0x03
    3308:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	f8 01       	movw	r30, r16
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	80 83       	st	Z, r24
    3316:	de 01       	movw	r26, r28
    3318:	ab 53       	subi	r26, 0x3B	; 59
    331a:	bf 4f       	sbci	r27, 0xFF	; 255
    331c:	fe 01       	movw	r30, r28
    331e:	e7 53       	subi	r30, 0x37	; 55
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	8d 93       	st	X+, r24
    3328:	9c 93       	st	X, r25
    332a:	fe 01       	movw	r30, r28
    332c:	eb 53       	subi	r30, 0x3B	; 59
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 81       	ld	r24, Z
    3332:	91 81       	ldd	r25, Z+1	; 0x01
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <move_bot_p2p+0x462>
    3338:	fe 01       	movw	r30, r28
    333a:	eb 53       	subi	r30, 0x3B	; 59
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	80 83       	st	Z, r24
			_delay_ms(550);
			move_dir(col2-col1,1);  // covers the columns
    3342:	fe 01       	movw	r30, r28
    3344:	e9 51       	subi	r30, 0x19	; 25
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	de 01       	movw	r26, r28
    334a:	ad 51       	subi	r26, 0x1D	; 29
    334c:	bf 4f       	sbci	r27, 0xFF	; 255
    334e:	20 81       	ld	r18, Z
    3350:	31 81       	ldd	r19, Z+1	; 0x01
    3352:	8d 91       	ld	r24, X+
    3354:	9c 91       	ld	r25, X
    3356:	a9 01       	movw	r20, r18
    3358:	48 1b       	sub	r20, r24
    335a:	59 0b       	sbc	r21, r25
    335c:	ca 01       	movw	r24, r20
    335e:	61 e0       	ldi	r22, 0x01	; 1
    3360:	70 e0       	ldi	r23, 0x00	; 0
    3362:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    3366:	fe 01       	movw	r30, r28
    3368:	ef 53       	subi	r30, 0x3F	; 63
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	a1 ee       	ldi	r26, 0xE1	; 225
    3372:	b3 e4       	ldi	r27, 0x43	; 67
    3374:	80 83       	st	Z, r24
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	a2 83       	std	Z+2, r26	; 0x02
    337a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337c:	8e 01       	movw	r16, r28
    337e:	03 54       	subi	r16, 0x43	; 67
    3380:	1f 4f       	sbci	r17, 0xFF	; 255
    3382:	fe 01       	movw	r30, r28
    3384:	ef 53       	subi	r30, 0x3F	; 63
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	60 81       	ld	r22, Z
    338a:	71 81       	ldd	r23, Z+1	; 0x01
    338c:	82 81       	ldd	r24, Z+2	; 0x02
    338e:	93 81       	ldd	r25, Z+3	; 0x03
    3390:	26 e6       	ldi	r18, 0x66	; 102
    3392:	36 e6       	ldi	r19, 0x66	; 102
    3394:	46 e6       	ldi	r20, 0x66	; 102
    3396:	55 e4       	ldi	r21, 0x45	; 69
    3398:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	f8 01       	movw	r30, r16
    33a2:	80 83       	st	Z, r24
    33a4:	91 83       	std	Z+1, r25	; 0x01
    33a6:	a2 83       	std	Z+2, r26	; 0x02
    33a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33aa:	fe 01       	movw	r30, r28
    33ac:	e3 54       	subi	r30, 0x43	; 67
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e8       	ldi	r20, 0x80	; 128
    33be:	5f e3       	ldi	r21, 0x3F	; 63
    33c0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    33c4:	88 23       	and	r24, r24
    33c6:	44 f4       	brge	.+16     	; 0x33d8 <move_bot_p2p+0x506>
		__ticks = 1;
    33c8:	fe 01       	movw	r30, r28
    33ca:	e5 54       	subi	r30, 0x45	; 69
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	91 83       	std	Z+1, r25	; 0x01
    33d4:	80 83       	st	Z, r24
    33d6:	64 c0       	rjmp	.+200    	; 0x34a0 <move_bot_p2p+0x5ce>
	else if (__tmp > 65535)
    33d8:	fe 01       	movw	r30, r28
    33da:	e3 54       	subi	r30, 0x43	; 67
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	3f ef       	ldi	r19, 0xFF	; 255
    33ea:	4f e7       	ldi	r20, 0x7F	; 127
    33ec:	57 e4       	ldi	r21, 0x47	; 71
    33ee:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    33f2:	18 16       	cp	r1, r24
    33f4:	0c f0       	brlt	.+2      	; 0x33f8 <move_bot_p2p+0x526>
    33f6:	43 c0       	rjmp	.+134    	; 0x347e <move_bot_p2p+0x5ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f8:	fe 01       	movw	r30, r28
    33fa:	ef 53       	subi	r30, 0x3F	; 63
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e2       	ldi	r20, 0x20	; 32
    340c:	51 e4       	ldi	r21, 0x41	; 65
    340e:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	8e 01       	movw	r16, r28
    3418:	05 54       	subi	r16, 0x45	; 69
    341a:	1f 4f       	sbci	r17, 0xFF	; 255
    341c:	bc 01       	movw	r22, r24
    341e:	cd 01       	movw	r24, r26
    3420:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	f8 01       	movw	r30, r16
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
    342e:	1f c0       	rjmp	.+62     	; 0x346e <move_bot_p2p+0x59c>
    3430:	fe 01       	movw	r30, r28
    3432:	e7 54       	subi	r30, 0x47	; 71
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 e7       	ldi	r24, 0x70	; 112
    3438:	91 e0       	ldi	r25, 0x01	; 1
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	80 83       	st	Z, r24
    343e:	fe 01       	movw	r30, r28
    3440:	e7 54       	subi	r30, 0x47	; 71
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	80 81       	ld	r24, Z
    3446:	91 81       	ldd	r25, Z+1	; 0x01
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <move_bot_p2p+0x576>
    344c:	fe 01       	movw	r30, r28
    344e:	e7 54       	subi	r30, 0x47	; 71
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3456:	de 01       	movw	r26, r28
    3458:	a5 54       	subi	r26, 0x45	; 69
    345a:	bf 4f       	sbci	r27, 0xFF	; 255
    345c:	fe 01       	movw	r30, r28
    345e:	e5 54       	subi	r30, 0x45	; 69
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	80 81       	ld	r24, Z
    3464:	91 81       	ldd	r25, Z+1	; 0x01
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	11 96       	adiw	r26, 0x01	; 1
    346a:	9c 93       	st	X, r25
    346c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346e:	fe 01       	movw	r30, r28
    3470:	e5 54       	subi	r30, 0x45	; 69
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	91 81       	ldd	r25, Z+1	; 0x01
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	d1 f6       	brne	.-76     	; 0x3430 <move_bot_p2p+0x55e>
    347c:	27 c0       	rjmp	.+78     	; 0x34cc <move_bot_p2p+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347e:	8e 01       	movw	r16, r28
    3480:	05 54       	subi	r16, 0x45	; 69
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	fe 01       	movw	r30, r28
    3486:	e3 54       	subi	r30, 0x43	; 67
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	60 81       	ld	r22, Z
    348c:	71 81       	ldd	r23, Z+1	; 0x01
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	f8 01       	movw	r30, r16
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	80 83       	st	Z, r24
    34a0:	de 01       	movw	r26, r28
    34a2:	a9 54       	subi	r26, 0x49	; 73
    34a4:	bf 4f       	sbci	r27, 0xFF	; 255
    34a6:	fe 01       	movw	r30, r28
    34a8:	e5 54       	subi	r30, 0x45	; 69
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	8d 93       	st	X+, r24
    34b2:	9c 93       	st	X, r25
    34b4:	fe 01       	movw	r30, r28
    34b6:	e9 54       	subi	r30, 0x49	; 73
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	91 81       	ldd	r25, Z+1	; 0x01
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <move_bot_p2p+0x5ec>
    34c2:	fe 01       	movw	r30, r28
    34c4:	e9 54       	subi	r30, 0x49	; 73
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	91 83       	std	Z+1, r25	; 0x01
    34ca:	80 83       	st	Z, r24
			_delay_ms(450);
			velocity(250,250);
    34cc:	8a ef       	ldi	r24, 0xFA	; 250
    34ce:	6a ef       	ldi	r22, 0xFA	; 250
    34d0:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			left();				// takes left turn 
    34d4:	0e 94 ab 14 	call	0x2956	; 0x2956 <left>
    34d8:	fe 01       	movw	r30, r28
    34da:	ed 54       	subi	r30, 0x4D	; 77
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 e8       	ldi	r25, 0x80	; 128
    34e2:	a9 e0       	ldi	r26, 0x09	; 9
    34e4:	b4 e4       	ldi	r27, 0x44	; 68
    34e6:	80 83       	st	Z, r24
    34e8:	91 83       	std	Z+1, r25	; 0x01
    34ea:	a2 83       	std	Z+2, r26	; 0x02
    34ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ee:	8e 01       	movw	r16, r28
    34f0:	01 55       	subi	r16, 0x51	; 81
    34f2:	1f 4f       	sbci	r17, 0xFF	; 255
    34f4:	fe 01       	movw	r30, r28
    34f6:	ed 54       	subi	r30, 0x4D	; 77
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	60 81       	ld	r22, Z
    34fc:	71 81       	ldd	r23, Z+1	; 0x01
    34fe:	82 81       	ldd	r24, Z+2	; 0x02
    3500:	93 81       	ldd	r25, Z+3	; 0x03
    3502:	26 e6       	ldi	r18, 0x66	; 102
    3504:	36 e6       	ldi	r19, 0x66	; 102
    3506:	46 e6       	ldi	r20, 0x66	; 102
    3508:	55 e4       	ldi	r21, 0x45	; 69
    350a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	f8 01       	movw	r30, r16
    3514:	80 83       	st	Z, r24
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	a2 83       	std	Z+2, r26	; 0x02
    351a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    351c:	fe 01       	movw	r30, r28
    351e:	e1 55       	subi	r30, 0x51	; 81
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	60 81       	ld	r22, Z
    3524:	71 81       	ldd	r23, Z+1	; 0x01
    3526:	82 81       	ldd	r24, Z+2	; 0x02
    3528:	93 81       	ldd	r25, Z+3	; 0x03
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e8       	ldi	r20, 0x80	; 128
    3530:	5f e3       	ldi	r21, 0x3F	; 63
    3532:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    3536:	88 23       	and	r24, r24
    3538:	44 f4       	brge	.+16     	; 0x354a <move_bot_p2p+0x678>
		__ticks = 1;
    353a:	fe 01       	movw	r30, r28
    353c:	e3 55       	subi	r30, 0x53	; 83
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	91 83       	std	Z+1, r25	; 0x01
    3546:	80 83       	st	Z, r24
    3548:	64 c0       	rjmp	.+200    	; 0x3612 <move_bot_p2p+0x740>
	else if (__tmp > 65535)
    354a:	fe 01       	movw	r30, r28
    354c:	e1 55       	subi	r30, 0x51	; 81
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	82 81       	ldd	r24, Z+2	; 0x02
    3556:	93 81       	ldd	r25, Z+3	; 0x03
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    3564:	18 16       	cp	r1, r24
    3566:	0c f0       	brlt	.+2      	; 0x356a <move_bot_p2p+0x698>
    3568:	43 c0       	rjmp	.+134    	; 0x35f0 <move_bot_p2p+0x71e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356a:	fe 01       	movw	r30, r28
    356c:	ed 54       	subi	r30, 0x4D	; 77
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	60 81       	ld	r22, Z
    3572:	71 81       	ldd	r23, Z+1	; 0x01
    3574:	82 81       	ldd	r24, Z+2	; 0x02
    3576:	93 81       	ldd	r25, Z+3	; 0x03
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e2       	ldi	r20, 0x20	; 32
    357e:	51 e4       	ldi	r21, 0x41	; 65
    3580:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	8e 01       	movw	r16, r28
    358a:	03 55       	subi	r16, 0x53	; 83
    358c:	1f 4f       	sbci	r17, 0xFF	; 255
    358e:	bc 01       	movw	r22, r24
    3590:	cd 01       	movw	r24, r26
    3592:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	f8 01       	movw	r30, r16
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	80 83       	st	Z, r24
    35a0:	1f c0       	rjmp	.+62     	; 0x35e0 <move_bot_p2p+0x70e>
    35a2:	fe 01       	movw	r30, r28
    35a4:	e5 55       	subi	r30, 0x55	; 85
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	80 e7       	ldi	r24, 0x70	; 112
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
    35b0:	fe 01       	movw	r30, r28
    35b2:	e5 55       	subi	r30, 0x55	; 85
    35b4:	ff 4f       	sbci	r31, 0xFF	; 255
    35b6:	80 81       	ld	r24, Z
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <move_bot_p2p+0x6e8>
    35be:	fe 01       	movw	r30, r28
    35c0:	e5 55       	subi	r30, 0x55	; 85
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c8:	de 01       	movw	r26, r28
    35ca:	a3 55       	subi	r26, 0x53	; 83
    35cc:	bf 4f       	sbci	r27, 0xFF	; 255
    35ce:	fe 01       	movw	r30, r28
    35d0:	e3 55       	subi	r30, 0x53	; 83
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	11 96       	adiw	r26, 0x01	; 1
    35dc:	9c 93       	st	X, r25
    35de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	fe 01       	movw	r30, r28
    35e2:	e3 55       	subi	r30, 0x53	; 83
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	80 81       	ld	r24, Z
    35e8:	91 81       	ldd	r25, Z+1	; 0x01
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	d1 f6       	brne	.-76     	; 0x35a2 <move_bot_p2p+0x6d0>
    35ee:	27 c0       	rjmp	.+78     	; 0x363e <move_bot_p2p+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f0:	8e 01       	movw	r16, r28
    35f2:	03 55       	subi	r16, 0x53	; 83
    35f4:	1f 4f       	sbci	r17, 0xFF	; 255
    35f6:	fe 01       	movw	r30, r28
    35f8:	e1 55       	subi	r30, 0x51	; 81
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	60 81       	ld	r22, Z
    35fe:	71 81       	ldd	r23, Z+1	; 0x01
    3600:	82 81       	ldd	r24, Z+2	; 0x02
    3602:	93 81       	ldd	r25, Z+3	; 0x03
    3604:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	f8 01       	movw	r30, r16
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	80 83       	st	Z, r24
    3612:	de 01       	movw	r26, r28
    3614:	a7 55       	subi	r26, 0x57	; 87
    3616:	bf 4f       	sbci	r27, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	e3 55       	subi	r30, 0x53	; 83
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	8d 93       	st	X+, r24
    3624:	9c 93       	st	X, r25
    3626:	fe 01       	movw	r30, r28
    3628:	e7 55       	subi	r30, 0x57	; 87
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	f1 f7       	brne	.-4      	; 0x3630 <move_bot_p2p+0x75e>
    3634:	fe 01       	movw	r30, r28
    3636:	e7 55       	subi	r30, 0x57	; 87
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	80 83       	st	Z, r24
			_delay_ms(550);
			move_dir(1,1);		// now takes the last step for covering rows
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	61 e0       	ldi	r22, 0x01	; 1
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    364a:	0c 94 54 23 	jmp	0x46a8	; 0x46a8 <move_bot_p2p+0x17d6>
			
		}
		else
		{
			if(row1-1>row2)
    364e:	fe 01       	movw	r30, r28
    3650:	ef 51       	subi	r30, 0x1F	; 31
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	80 81       	ld	r24, Z
    3656:	91 81       	ldd	r25, Z+1	; 0x01
    3658:	9c 01       	movw	r18, r24
    365a:	21 50       	subi	r18, 0x01	; 1
    365c:	30 40       	sbci	r19, 0x00	; 0
    365e:	fe 01       	movw	r30, r28
    3660:	eb 51       	subi	r30, 0x1B	; 27
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	80 81       	ld	r24, Z
    3666:	91 81       	ldd	r25, Z+1	; 0x01
    3668:	82 17       	cp	r24, r18
    366a:	93 07       	cpc	r25, r19
    366c:	98 f4       	brcc	.+38     	; 0x3694 <move_bot_p2p+0x7c2>
				move_dir(row1-row2-1,0);  // moves diff minus 1 steps 
    366e:	fe 01       	movw	r30, r28
    3670:	ef 51       	subi	r30, 0x1F	; 31
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	de 01       	movw	r26, r28
    3676:	ab 51       	subi	r26, 0x1B	; 27
    3678:	bf 4f       	sbci	r27, 0xFF	; 255
    367a:	20 81       	ld	r18, Z
    367c:	31 81       	ldd	r19, Z+1	; 0x01
    367e:	8d 91       	ld	r24, X+
    3680:	9c 91       	ld	r25, X
    3682:	a9 01       	movw	r20, r18
    3684:	48 1b       	sub	r20, r24
    3686:	59 0b       	sbc	r21, r25
    3688:	ca 01       	movw	r24, r20
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	60 e0       	ldi	r22, 0x00	; 0
    368e:	70 e0       	ldi	r23, 0x00	; 0
    3690:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    3694:	fe 01       	movw	r30, r28
    3696:	eb 55       	subi	r30, 0x5B	; 91
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a1 ee       	ldi	r26, 0xE1	; 225
    36a0:	b3 e4       	ldi	r27, 0x43	; 67
    36a2:	80 83       	st	Z, r24
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	a2 83       	std	Z+2, r26	; 0x02
    36a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36aa:	8e 01       	movw	r16, r28
    36ac:	0f 55       	subi	r16, 0x5F	; 95
    36ae:	1f 4f       	sbci	r17, 0xFF	; 255
    36b0:	fe 01       	movw	r30, r28
    36b2:	eb 55       	subi	r30, 0x5B	; 91
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	60 81       	ld	r22, Z
    36b8:	71 81       	ldd	r23, Z+1	; 0x01
    36ba:	82 81       	ldd	r24, Z+2	; 0x02
    36bc:	93 81       	ldd	r25, Z+3	; 0x03
    36be:	26 e6       	ldi	r18, 0x66	; 102
    36c0:	36 e6       	ldi	r19, 0x66	; 102
    36c2:	46 e6       	ldi	r20, 0x66	; 102
    36c4:	55 e4       	ldi	r21, 0x45	; 69
    36c6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	f8 01       	movw	r30, r16
    36d0:	80 83       	st	Z, r24
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	a2 83       	std	Z+2, r26	; 0x02
    36d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36d8:	fe 01       	movw	r30, r28
    36da:	ef 55       	subi	r30, 0x5F	; 95
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	60 81       	ld	r22, Z
    36e0:	71 81       	ldd	r23, Z+1	; 0x01
    36e2:	82 81       	ldd	r24, Z+2	; 0x02
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 e8       	ldi	r20, 0x80	; 128
    36ec:	5f e3       	ldi	r21, 0x3F	; 63
    36ee:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    36f2:	88 23       	and	r24, r24
    36f4:	44 f4       	brge	.+16     	; 0x3706 <move_bot_p2p+0x834>
		__ticks = 1;
    36f6:	fe 01       	movw	r30, r28
    36f8:	e1 56       	subi	r30, 0x61	; 97
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	91 83       	std	Z+1, r25	; 0x01
    3702:	80 83       	st	Z, r24
    3704:	64 c0       	rjmp	.+200    	; 0x37ce <move_bot_p2p+0x8fc>
	else if (__tmp > 65535)
    3706:	fe 01       	movw	r30, r28
    3708:	ef 55       	subi	r30, 0x5F	; 95
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	0c f0       	brlt	.+2      	; 0x3726 <move_bot_p2p+0x854>
    3724:	43 c0       	rjmp	.+134    	; 0x37ac <move_bot_p2p+0x8da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3726:	fe 01       	movw	r30, r28
    3728:	eb 55       	subi	r30, 0x5B	; 91
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	82 81       	ldd	r24, Z+2	; 0x02
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e2       	ldi	r20, 0x20	; 32
    373a:	51 e4       	ldi	r21, 0x41	; 65
    373c:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8e 01       	movw	r16, r28
    3746:	01 56       	subi	r16, 0x61	; 97
    3748:	1f 4f       	sbci	r17, 0xFF	; 255
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	f8 01       	movw	r30, r16
    3758:	91 83       	std	Z+1, r25	; 0x01
    375a:	80 83       	st	Z, r24
    375c:	1f c0       	rjmp	.+62     	; 0x379c <move_bot_p2p+0x8ca>
    375e:	fe 01       	movw	r30, r28
    3760:	e3 56       	subi	r30, 0x63	; 99
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	80 e7       	ldi	r24, 0x70	; 112
    3766:	91 e0       	ldi	r25, 0x01	; 1
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	80 83       	st	Z, r24
    376c:	fe 01       	movw	r30, r28
    376e:	e3 56       	subi	r30, 0x63	; 99
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	80 81       	ld	r24, Z
    3774:	91 81       	ldd	r25, Z+1	; 0x01
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	f1 f7       	brne	.-4      	; 0x3776 <move_bot_p2p+0x8a4>
    377a:	fe 01       	movw	r30, r28
    377c:	e3 56       	subi	r30, 0x63	; 99
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	91 83       	std	Z+1, r25	; 0x01
    3782:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3784:	de 01       	movw	r26, r28
    3786:	a1 56       	subi	r26, 0x61	; 97
    3788:	bf 4f       	sbci	r27, 0xFF	; 255
    378a:	fe 01       	movw	r30, r28
    378c:	e1 56       	subi	r30, 0x61	; 97
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	11 96       	adiw	r26, 0x01	; 1
    3798:	9c 93       	st	X, r25
    379a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	fe 01       	movw	r30, r28
    379e:	e1 56       	subi	r30, 0x61	; 97
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	80 81       	ld	r24, Z
    37a4:	91 81       	ldd	r25, Z+1	; 0x01
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	d1 f6       	brne	.-76     	; 0x375e <move_bot_p2p+0x88c>
    37aa:	27 c0       	rjmp	.+78     	; 0x37fa <move_bot_p2p+0x928>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ac:	8e 01       	movw	r16, r28
    37ae:	01 56       	subi	r16, 0x61	; 97
    37b0:	1f 4f       	sbci	r17, 0xFF	; 255
    37b2:	fe 01       	movw	r30, r28
    37b4:	ef 55       	subi	r30, 0x5F	; 95
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	93 81       	ldd	r25, Z+3	; 0x03
    37c0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	f8 01       	movw	r30, r16
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	80 83       	st	Z, r24
    37ce:	de 01       	movw	r26, r28
    37d0:	a5 56       	subi	r26, 0x65	; 101
    37d2:	bf 4f       	sbci	r27, 0xFF	; 255
    37d4:	fe 01       	movw	r30, r28
    37d6:	e1 56       	subi	r30, 0x61	; 97
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	91 81       	ldd	r25, Z+1	; 0x01
    37de:	8d 93       	st	X+, r24
    37e0:	9c 93       	st	X, r25
    37e2:	fe 01       	movw	r30, r28
    37e4:	e5 56       	subi	r30, 0x65	; 101
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <move_bot_p2p+0x91a>
    37f0:	fe 01       	movw	r30, r28
    37f2:	e5 56       	subi	r30, 0x65	; 101
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
			_delay_ms(450);
			velocity(250,250);
    37fa:	8a ef       	ldi	r24, 0xFA	; 250
    37fc:	6a ef       	ldi	r22, 0xFA	; 250
    37fe:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			right();				// takes right turn
    3802:	0e 94 b5 14 	call	0x296a	; 0x296a <right>
    3806:	fe 01       	movw	r30, r28
    3808:	e9 56       	subi	r30, 0x69	; 105
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	80 e0       	ldi	r24, 0x00	; 0
    380e:	90 e8       	ldi	r25, 0x80	; 128
    3810:	a9 e0       	ldi	r26, 0x09	; 9
    3812:	b4 e4       	ldi	r27, 0x44	; 68
    3814:	80 83       	st	Z, r24
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	a2 83       	std	Z+2, r26	; 0x02
    381a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381c:	8e 01       	movw	r16, r28
    381e:	0d 56       	subi	r16, 0x6D	; 109
    3820:	1f 4f       	sbci	r17, 0xFF	; 255
    3822:	fe 01       	movw	r30, r28
    3824:	e9 56       	subi	r30, 0x69	; 105
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	60 81       	ld	r22, Z
    382a:	71 81       	ldd	r23, Z+1	; 0x01
    382c:	82 81       	ldd	r24, Z+2	; 0x02
    382e:	93 81       	ldd	r25, Z+3	; 0x03
    3830:	26 e6       	ldi	r18, 0x66	; 102
    3832:	36 e6       	ldi	r19, 0x66	; 102
    3834:	46 e6       	ldi	r20, 0x66	; 102
    3836:	55 e4       	ldi	r21, 0x45	; 69
    3838:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    383c:	dc 01       	movw	r26, r24
    383e:	cb 01       	movw	r24, r22
    3840:	f8 01       	movw	r30, r16
    3842:	80 83       	st	Z, r24
    3844:	91 83       	std	Z+1, r25	; 0x01
    3846:	a2 83       	std	Z+2, r26	; 0x02
    3848:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    384a:	fe 01       	movw	r30, r28
    384c:	ed 56       	subi	r30, 0x6D	; 109
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	60 81       	ld	r22, Z
    3852:	71 81       	ldd	r23, Z+1	; 0x01
    3854:	82 81       	ldd	r24, Z+2	; 0x02
    3856:	93 81       	ldd	r25, Z+3	; 0x03
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e8       	ldi	r20, 0x80	; 128
    385e:	5f e3       	ldi	r21, 0x3F	; 63
    3860:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    3864:	88 23       	and	r24, r24
    3866:	44 f4       	brge	.+16     	; 0x3878 <move_bot_p2p+0x9a6>
		__ticks = 1;
    3868:	fe 01       	movw	r30, r28
    386a:	ef 56       	subi	r30, 0x6F	; 111
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	80 83       	st	Z, r24
    3876:	64 c0       	rjmp	.+200    	; 0x3940 <move_bot_p2p+0xa6e>
	else if (__tmp > 65535)
    3878:	fe 01       	movw	r30, r28
    387a:	ed 56       	subi	r30, 0x6D	; 109
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	60 81       	ld	r22, Z
    3880:	71 81       	ldd	r23, Z+1	; 0x01
    3882:	82 81       	ldd	r24, Z+2	; 0x02
    3884:	93 81       	ldd	r25, Z+3	; 0x03
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	3f ef       	ldi	r19, 0xFF	; 255
    388a:	4f e7       	ldi	r20, 0x7F	; 127
    388c:	57 e4       	ldi	r21, 0x47	; 71
    388e:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    3892:	18 16       	cp	r1, r24
    3894:	0c f0       	brlt	.+2      	; 0x3898 <move_bot_p2p+0x9c6>
    3896:	43 c0       	rjmp	.+134    	; 0x391e <move_bot_p2p+0xa4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3898:	fe 01       	movw	r30, r28
    389a:	e9 56       	subi	r30, 0x69	; 105
    389c:	ff 4f       	sbci	r31, 0xFF	; 255
    389e:	60 81       	ld	r22, Z
    38a0:	71 81       	ldd	r23, Z+1	; 0x01
    38a2:	82 81       	ldd	r24, Z+2	; 0x02
    38a4:	93 81       	ldd	r25, Z+3	; 0x03
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	40 e2       	ldi	r20, 0x20	; 32
    38ac:	51 e4       	ldi	r21, 0x41	; 65
    38ae:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	8e 01       	movw	r16, r28
    38b8:	0f 56       	subi	r16, 0x6F	; 111
    38ba:	1f 4f       	sbci	r17, 0xFF	; 255
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	f8 01       	movw	r30, r16
    38ca:	91 83       	std	Z+1, r25	; 0x01
    38cc:	80 83       	st	Z, r24
    38ce:	1f c0       	rjmp	.+62     	; 0x390e <move_bot_p2p+0xa3c>
    38d0:	fe 01       	movw	r30, r28
    38d2:	e1 57       	subi	r30, 0x71	; 113
    38d4:	ff 4f       	sbci	r31, 0xFF	; 255
    38d6:	80 e7       	ldi	r24, 0x70	; 112
    38d8:	91 e0       	ldi	r25, 0x01	; 1
    38da:	91 83       	std	Z+1, r25	; 0x01
    38dc:	80 83       	st	Z, r24
    38de:	fe 01       	movw	r30, r28
    38e0:	e1 57       	subi	r30, 0x71	; 113
    38e2:	ff 4f       	sbci	r31, 0xFF	; 255
    38e4:	80 81       	ld	r24, Z
    38e6:	91 81       	ldd	r25, Z+1	; 0x01
    38e8:	01 97       	sbiw	r24, 0x01	; 1
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <move_bot_p2p+0xa16>
    38ec:	fe 01       	movw	r30, r28
    38ee:	e1 57       	subi	r30, 0x71	; 113
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	91 83       	std	Z+1, r25	; 0x01
    38f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f6:	de 01       	movw	r26, r28
    38f8:	af 56       	subi	r26, 0x6F	; 111
    38fa:	bf 4f       	sbci	r27, 0xFF	; 255
    38fc:	fe 01       	movw	r30, r28
    38fe:	ef 56       	subi	r30, 0x6F	; 111
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	80 81       	ld	r24, Z
    3904:	91 81       	ldd	r25, Z+1	; 0x01
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	11 96       	adiw	r26, 0x01	; 1
    390a:	9c 93       	st	X, r25
    390c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	fe 01       	movw	r30, r28
    3910:	ef 56       	subi	r30, 0x6F	; 111
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	80 81       	ld	r24, Z
    3916:	91 81       	ldd	r25, Z+1	; 0x01
    3918:	00 97       	sbiw	r24, 0x00	; 0
    391a:	d1 f6       	brne	.-76     	; 0x38d0 <move_bot_p2p+0x9fe>
    391c:	27 c0       	rjmp	.+78     	; 0x396c <move_bot_p2p+0xa9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391e:	8e 01       	movw	r16, r28
    3920:	0f 56       	subi	r16, 0x6F	; 111
    3922:	1f 4f       	sbci	r17, 0xFF	; 255
    3924:	fe 01       	movw	r30, r28
    3926:	ed 56       	subi	r30, 0x6D	; 109
    3928:	ff 4f       	sbci	r31, 0xFF	; 255
    392a:	60 81       	ld	r22, Z
    392c:	71 81       	ldd	r23, Z+1	; 0x01
    392e:	82 81       	ldd	r24, Z+2	; 0x02
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	f8 01       	movw	r30, r16
    393c:	91 83       	std	Z+1, r25	; 0x01
    393e:	80 83       	st	Z, r24
    3940:	de 01       	movw	r26, r28
    3942:	a3 57       	subi	r26, 0x73	; 115
    3944:	bf 4f       	sbci	r27, 0xFF	; 255
    3946:	fe 01       	movw	r30, r28
    3948:	ef 56       	subi	r30, 0x6F	; 111
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	80 81       	ld	r24, Z
    394e:	91 81       	ldd	r25, Z+1	; 0x01
    3950:	8d 93       	st	X+, r24
    3952:	9c 93       	st	X, r25
    3954:	fe 01       	movw	r30, r28
    3956:	e3 57       	subi	r30, 0x73	; 115
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	80 81       	ld	r24, Z
    395c:	91 81       	ldd	r25, Z+1	; 0x01
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <move_bot_p2p+0xa8c>
    3962:	fe 01       	movw	r30, r28
    3964:	e3 57       	subi	r30, 0x73	; 115
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	91 83       	std	Z+1, r25	; 0x01
    396a:	80 83       	st	Z, r24
			_delay_ms(550);
			move_dir(col2-col1,1);    // covers columns
    396c:	fe 01       	movw	r30, r28
    396e:	e9 51       	subi	r30, 0x19	; 25
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	de 01       	movw	r26, r28
    3974:	ad 51       	subi	r26, 0x1D	; 29
    3976:	bf 4f       	sbci	r27, 0xFF	; 255
    3978:	20 81       	ld	r18, Z
    397a:	31 81       	ldd	r19, Z+1	; 0x01
    397c:	8d 91       	ld	r24, X+
    397e:	9c 91       	ld	r25, X
    3980:	a9 01       	movw	r20, r18
    3982:	48 1b       	sub	r20, r24
    3984:	59 0b       	sbc	r21, r25
    3986:	ca 01       	movw	r24, r20
    3988:	61 e0       	ldi	r22, 0x01	; 1
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    3990:	fe 01       	movw	r30, r28
    3992:	e7 57       	subi	r30, 0x77	; 119
    3994:	ff 4f       	sbci	r31, 0xFF	; 255
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	a1 ee       	ldi	r26, 0xE1	; 225
    399c:	b3 e4       	ldi	r27, 0x43	; 67
    399e:	80 83       	st	Z, r24
    39a0:	91 83       	std	Z+1, r25	; 0x01
    39a2:	a2 83       	std	Z+2, r26	; 0x02
    39a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a6:	8e 01       	movw	r16, r28
    39a8:	0b 57       	subi	r16, 0x7B	; 123
    39aa:	1f 4f       	sbci	r17, 0xFF	; 255
    39ac:	fe 01       	movw	r30, r28
    39ae:	e7 57       	subi	r30, 0x77	; 119
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	60 81       	ld	r22, Z
    39b4:	71 81       	ldd	r23, Z+1	; 0x01
    39b6:	82 81       	ldd	r24, Z+2	; 0x02
    39b8:	93 81       	ldd	r25, Z+3	; 0x03
    39ba:	26 e6       	ldi	r18, 0x66	; 102
    39bc:	36 e6       	ldi	r19, 0x66	; 102
    39be:	46 e6       	ldi	r20, 0x66	; 102
    39c0:	55 e4       	ldi	r21, 0x45	; 69
    39c2:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	f8 01       	movw	r30, r16
    39cc:	80 83       	st	Z, r24
    39ce:	91 83       	std	Z+1, r25	; 0x01
    39d0:	a2 83       	std	Z+2, r26	; 0x02
    39d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39d4:	fe 01       	movw	r30, r28
    39d6:	eb 57       	subi	r30, 0x7B	; 123
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	60 81       	ld	r22, Z
    39dc:	71 81       	ldd	r23, Z+1	; 0x01
    39de:	82 81       	ldd	r24, Z+2	; 0x02
    39e0:	93 81       	ldd	r25, Z+3	; 0x03
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	40 e8       	ldi	r20, 0x80	; 128
    39e8:	5f e3       	ldi	r21, 0x3F	; 63
    39ea:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    39ee:	88 23       	and	r24, r24
    39f0:	44 f4       	brge	.+16     	; 0x3a02 <move_bot_p2p+0xb30>
		__ticks = 1;
    39f2:	fe 01       	movw	r30, r28
    39f4:	ed 57       	subi	r30, 0x7D	; 125
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	91 83       	std	Z+1, r25	; 0x01
    39fe:	80 83       	st	Z, r24
    3a00:	64 c0       	rjmp	.+200    	; 0x3aca <move_bot_p2p+0xbf8>
	else if (__tmp > 65535)
    3a02:	fe 01       	movw	r30, r28
    3a04:	eb 57       	subi	r30, 0x7B	; 123
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	60 81       	ld	r22, Z
    3a0a:	71 81       	ldd	r23, Z+1	; 0x01
    3a0c:	82 81       	ldd	r24, Z+2	; 0x02
    3a0e:	93 81       	ldd	r25, Z+3	; 0x03
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	3f ef       	ldi	r19, 0xFF	; 255
    3a14:	4f e7       	ldi	r20, 0x7F	; 127
    3a16:	57 e4       	ldi	r21, 0x47	; 71
    3a18:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    3a1c:	18 16       	cp	r1, r24
    3a1e:	0c f0       	brlt	.+2      	; 0x3a22 <move_bot_p2p+0xb50>
    3a20:	43 c0       	rjmp	.+134    	; 0x3aa8 <move_bot_p2p+0xbd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a22:	fe 01       	movw	r30, r28
    3a24:	e7 57       	subi	r30, 0x77	; 119
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	60 81       	ld	r22, Z
    3a2a:	71 81       	ldd	r23, Z+1	; 0x01
    3a2c:	82 81       	ldd	r24, Z+2	; 0x02
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	20 e0       	ldi	r18, 0x00	; 0
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	40 e2       	ldi	r20, 0x20	; 32
    3a36:	51 e4       	ldi	r21, 0x41	; 65
    3a38:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	8e 01       	movw	r16, r28
    3a42:	0d 57       	subi	r16, 0x7D	; 125
    3a44:	1f 4f       	sbci	r17, 0xFF	; 255
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	f8 01       	movw	r30, r16
    3a54:	91 83       	std	Z+1, r25	; 0x01
    3a56:	80 83       	st	Z, r24
    3a58:	1f c0       	rjmp	.+62     	; 0x3a98 <move_bot_p2p+0xbc6>
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	ef 57       	subi	r30, 0x7F	; 127
    3a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a60:	80 e7       	ldi	r24, 0x70	; 112
    3a62:	91 e0       	ldi	r25, 0x01	; 1
    3a64:	91 83       	std	Z+1, r25	; 0x01
    3a66:	80 83       	st	Z, r24
    3a68:	fe 01       	movw	r30, r28
    3a6a:	ef 57       	subi	r30, 0x7F	; 127
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	80 81       	ld	r24, Z
    3a70:	91 81       	ldd	r25, Z+1	; 0x01
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <move_bot_p2p+0xba0>
    3a76:	fe 01       	movw	r30, r28
    3a78:	ef 57       	subi	r30, 0x7F	; 127
    3a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7c:	91 83       	std	Z+1, r25	; 0x01
    3a7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a80:	de 01       	movw	r26, r28
    3a82:	ad 57       	subi	r26, 0x7D	; 125
    3a84:	bf 4f       	sbci	r27, 0xFF	; 255
    3a86:	fe 01       	movw	r30, r28
    3a88:	ed 57       	subi	r30, 0x7D	; 125
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	80 81       	ld	r24, Z
    3a8e:	91 81       	ldd	r25, Z+1	; 0x01
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	11 96       	adiw	r26, 0x01	; 1
    3a94:	9c 93       	st	X, r25
    3a96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a98:	fe 01       	movw	r30, r28
    3a9a:	ed 57       	subi	r30, 0x7D	; 125
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	80 81       	ld	r24, Z
    3aa0:	91 81       	ldd	r25, Z+1	; 0x01
    3aa2:	00 97       	sbiw	r24, 0x00	; 0
    3aa4:	d1 f6       	brne	.-76     	; 0x3a5a <move_bot_p2p+0xb88>
    3aa6:	27 c0       	rjmp	.+78     	; 0x3af6 <move_bot_p2p+0xc24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa8:	8e 01       	movw	r16, r28
    3aaa:	0d 57       	subi	r16, 0x7D	; 125
    3aac:	1f 4f       	sbci	r17, 0xFF	; 255
    3aae:	fe 01       	movw	r30, r28
    3ab0:	eb 57       	subi	r30, 0x7B	; 123
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	60 81       	ld	r22, Z
    3ab6:	71 81       	ldd	r23, Z+1	; 0x01
    3ab8:	82 81       	ldd	r24, Z+2	; 0x02
    3aba:	93 81       	ldd	r25, Z+3	; 0x03
    3abc:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	f8 01       	movw	r30, r16
    3ac6:	91 83       	std	Z+1, r25	; 0x01
    3ac8:	80 83       	st	Z, r24
    3aca:	de 01       	movw	r26, r28
    3acc:	a1 58       	subi	r26, 0x81	; 129
    3ace:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	ed 57       	subi	r30, 0x7D	; 125
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	80 81       	ld	r24, Z
    3ad8:	91 81       	ldd	r25, Z+1	; 0x01
    3ada:	8d 93       	st	X+, r24
    3adc:	9c 93       	st	X, r25
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e1 58       	subi	r30, 0x81	; 129
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	80 81       	ld	r24, Z
    3ae6:	91 81       	ldd	r25, Z+1	; 0x01
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <move_bot_p2p+0xc16>
    3aec:	fe 01       	movw	r30, r28
    3aee:	e1 58       	subi	r30, 0x81	; 129
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	91 83       	std	Z+1, r25	; 0x01
    3af4:	80 83       	st	Z, r24
			_delay_ms(450);
			velocity(250,250);
    3af6:	8a ef       	ldi	r24, 0xFA	; 250
    3af8:	6a ef       	ldi	r22, 0xFA	; 250
    3afa:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			right();				// takes right turn
    3afe:	0e 94 b5 14 	call	0x296a	; 0x296a <right>
    3b02:	fe 01       	movw	r30, r28
    3b04:	e5 58       	subi	r30, 0x85	; 133
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	90 e8       	ldi	r25, 0x80	; 128
    3b0c:	a9 e0       	ldi	r26, 0x09	; 9
    3b0e:	b4 e4       	ldi	r27, 0x44	; 68
    3b10:	80 83       	st	Z, r24
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	a2 83       	std	Z+2, r26	; 0x02
    3b16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b18:	8e 01       	movw	r16, r28
    3b1a:	09 58       	subi	r16, 0x89	; 137
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	fe 01       	movw	r30, r28
    3b20:	e5 58       	subi	r30, 0x85	; 133
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	60 81       	ld	r22, Z
    3b26:	71 81       	ldd	r23, Z+1	; 0x01
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	26 e6       	ldi	r18, 0x66	; 102
    3b2e:	36 e6       	ldi	r19, 0x66	; 102
    3b30:	46 e6       	ldi	r20, 0x66	; 102
    3b32:	55 e4       	ldi	r21, 0x45	; 69
    3b34:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	f8 01       	movw	r30, r16
    3b3e:	80 83       	st	Z, r24
    3b40:	91 83       	std	Z+1, r25	; 0x01
    3b42:	a2 83       	std	Z+2, r26	; 0x02
    3b44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b46:	fe 01       	movw	r30, r28
    3b48:	e9 58       	subi	r30, 0x89	; 137
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	60 81       	ld	r22, Z
    3b4e:	71 81       	ldd	r23, Z+1	; 0x01
    3b50:	82 81       	ldd	r24, Z+2	; 0x02
    3b52:	93 81       	ldd	r25, Z+3	; 0x03
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	40 e8       	ldi	r20, 0x80	; 128
    3b5a:	5f e3       	ldi	r21, 0x3F	; 63
    3b5c:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    3b60:	88 23       	and	r24, r24
    3b62:	44 f4       	brge	.+16     	; 0x3b74 <move_bot_p2p+0xca2>
		__ticks = 1;
    3b64:	fe 01       	movw	r30, r28
    3b66:	eb 58       	subi	r30, 0x8B	; 139
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	91 83       	std	Z+1, r25	; 0x01
    3b70:	80 83       	st	Z, r24
    3b72:	64 c0       	rjmp	.+200    	; 0x3c3c <move_bot_p2p+0xd6a>
	else if (__tmp > 65535)
    3b74:	fe 01       	movw	r30, r28
    3b76:	e9 58       	subi	r30, 0x89	; 137
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	60 81       	ld	r22, Z
    3b7c:	71 81       	ldd	r23, Z+1	; 0x01
    3b7e:	82 81       	ldd	r24, Z+2	; 0x02
    3b80:	93 81       	ldd	r25, Z+3	; 0x03
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	3f ef       	ldi	r19, 0xFF	; 255
    3b86:	4f e7       	ldi	r20, 0x7F	; 127
    3b88:	57 e4       	ldi	r21, 0x47	; 71
    3b8a:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    3b8e:	18 16       	cp	r1, r24
    3b90:	0c f0       	brlt	.+2      	; 0x3b94 <move_bot_p2p+0xcc2>
    3b92:	43 c0       	rjmp	.+134    	; 0x3c1a <move_bot_p2p+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b94:	fe 01       	movw	r30, r28
    3b96:	e5 58       	subi	r30, 0x85	; 133
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	60 81       	ld	r22, Z
    3b9c:	71 81       	ldd	r23, Z+1	; 0x01
    3b9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ba0:	93 81       	ldd	r25, Z+3	; 0x03
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e2       	ldi	r20, 0x20	; 32
    3ba8:	51 e4       	ldi	r21, 0x41	; 65
    3baa:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	8e 01       	movw	r16, r28
    3bb4:	0b 58       	subi	r16, 0x8B	; 139
    3bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb8:	bc 01       	movw	r22, r24
    3bba:	cd 01       	movw	r24, r26
    3bbc:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	f8 01       	movw	r30, r16
    3bc6:	91 83       	std	Z+1, r25	; 0x01
    3bc8:	80 83       	st	Z, r24
    3bca:	1f c0       	rjmp	.+62     	; 0x3c0a <move_bot_p2p+0xd38>
    3bcc:	fe 01       	movw	r30, r28
    3bce:	ed 58       	subi	r30, 0x8D	; 141
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 e7       	ldi	r24, 0x70	; 112
    3bd4:	91 e0       	ldi	r25, 0x01	; 1
    3bd6:	91 83       	std	Z+1, r25	; 0x01
    3bd8:	80 83       	st	Z, r24
    3bda:	fe 01       	movw	r30, r28
    3bdc:	ed 58       	subi	r30, 0x8D	; 141
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	80 81       	ld	r24, Z
    3be2:	91 81       	ldd	r25, Z+1	; 0x01
    3be4:	01 97       	sbiw	r24, 0x01	; 1
    3be6:	f1 f7       	brne	.-4      	; 0x3be4 <move_bot_p2p+0xd12>
    3be8:	fe 01       	movw	r30, r28
    3bea:	ed 58       	subi	r30, 0x8D	; 141
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	91 83       	std	Z+1, r25	; 0x01
    3bf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bf2:	de 01       	movw	r26, r28
    3bf4:	ab 58       	subi	r26, 0x8B	; 139
    3bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	eb 58       	subi	r30, 0x8B	; 139
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	91 81       	ldd	r25, Z+1	; 0x01
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	11 96       	adiw	r26, 0x01	; 1
    3c06:	9c 93       	st	X, r25
    3c08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	eb 58       	subi	r30, 0x8B	; 139
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	80 81       	ld	r24, Z
    3c12:	91 81       	ldd	r25, Z+1	; 0x01
    3c14:	00 97       	sbiw	r24, 0x00	; 0
    3c16:	d1 f6       	brne	.-76     	; 0x3bcc <move_bot_p2p+0xcfa>
    3c18:	27 c0       	rjmp	.+78     	; 0x3c68 <move_bot_p2p+0xd96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c1a:	8e 01       	movw	r16, r28
    3c1c:	0b 58       	subi	r16, 0x8B	; 139
    3c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c20:	fe 01       	movw	r30, r28
    3c22:	e9 58       	subi	r30, 0x89	; 137
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	60 81       	ld	r22, Z
    3c28:	71 81       	ldd	r23, Z+1	; 0x01
    3c2a:	82 81       	ldd	r24, Z+2	; 0x02
    3c2c:	93 81       	ldd	r25, Z+3	; 0x03
    3c2e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	f8 01       	movw	r30, r16
    3c38:	91 83       	std	Z+1, r25	; 0x01
    3c3a:	80 83       	st	Z, r24
    3c3c:	de 01       	movw	r26, r28
    3c3e:	af 58       	subi	r26, 0x8F	; 143
    3c40:	bf 4f       	sbci	r27, 0xFF	; 255
    3c42:	fe 01       	movw	r30, r28
    3c44:	eb 58       	subi	r30, 0x8B	; 139
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	8d 93       	st	X+, r24
    3c4e:	9c 93       	st	X, r25
    3c50:	fe 01       	movw	r30, r28
    3c52:	ef 58       	subi	r30, 0x8F	; 143
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	80 81       	ld	r24, Z
    3c58:	91 81       	ldd	r25, Z+1	; 0x01
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	f1 f7       	brne	.-4      	; 0x3c5a <move_bot_p2p+0xd88>
    3c5e:	fe 01       	movw	r30, r28
    3c60:	ef 58       	subi	r30, 0x8F	; 143
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	91 83       	std	Z+1, r25	; 0x01
    3c66:	80 83       	st	Z, r24
			_delay_ms(550);
			move_dir(1,1);           // takes the remaining step
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	61 e0       	ldi	r22, 0x01	; 1
    3c6e:	70 e0       	ldi	r23, 0x00	; 0
    3c70:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    3c74:	19 c5       	rjmp	.+2610   	; 0x46a8 <move_bot_p2p+0x17d6>
		}
	}
	else
	{
		if(row1<=row2)
    3c76:	fe 01       	movw	r30, r28
    3c78:	ef 51       	subi	r30, 0x1F	; 31
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	de 01       	movw	r26, r28
    3c7e:	ab 51       	subi	r26, 0x1B	; 27
    3c80:	bf 4f       	sbci	r27, 0xFF	; 255
    3c82:	20 81       	ld	r18, Z
    3c84:	31 81       	ldd	r19, Z+1	; 0x01
    3c86:	8d 91       	ld	r24, X+
    3c88:	9c 91       	ld	r25, X
    3c8a:	11 97       	sbiw	r26, 0x01	; 1
    3c8c:	82 17       	cp	r24, r18
    3c8e:	93 07       	cpc	r25, r19
    3c90:	08 f4       	brcc	.+2      	; 0x3c94 <move_bot_p2p+0xdc2>
    3c92:	fb c2       	rjmp	.+1526   	; 0x428a <move_bot_p2p+0x13b8>
		{
			if (row1==row2)
    3c94:	fe 01       	movw	r30, r28
    3c96:	ef 51       	subi	r30, 0x1F	; 31
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	de 01       	movw	r26, r28
    3c9c:	ab 51       	subi	r26, 0x1B	; 27
    3c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca0:	20 81       	ld	r18, Z
    3ca2:	31 81       	ldd	r19, Z+1	; 0x01
    3ca4:	8d 91       	ld	r24, X+
    3ca6:	9c 91       	ld	r25, X
    3ca8:	11 97       	sbiw	r26, 0x01	; 1
    3caa:	28 17       	cp	r18, r24
    3cac:	39 07       	cpc	r19, r25
    3cae:	39 f4       	brne	.+14     	; 0x3cbe <move_bot_p2p+0xdec>
				move_dir(1,0);     // moves one step backward
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	60 e0       	ldi	r22, 0x00	; 0
    3cb6:	70 e0       	ldi	r23, 0x00	; 0
    3cb8:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    3cbc:	23 c0       	rjmp	.+70     	; 0x3d04 <move_bot_p2p+0xe32>
			else if(row1 < row2-1) 
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	eb 51       	subi	r30, 0x1B	; 27
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 81       	ld	r24, Z
    3cc6:	91 81       	ldd	r25, Z+1	; 0x01
    3cc8:	9c 01       	movw	r18, r24
    3cca:	21 50       	subi	r18, 0x01	; 1
    3ccc:	30 40       	sbci	r19, 0x00	; 0
    3cce:	fe 01       	movw	r30, r28
    3cd0:	ef 51       	subi	r30, 0x1F	; 31
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	80 81       	ld	r24, Z
    3cd6:	91 81       	ldd	r25, Z+1	; 0x01
    3cd8:	82 17       	cp	r24, r18
    3cda:	93 07       	cpc	r25, r19
    3cdc:	98 f4       	brcc	.+38     	; 0x3d04 <move_bot_p2p+0xe32>
				move_dir(row2-row1-1,1);  // covers diff minus 1 rows
    3cde:	fe 01       	movw	r30, r28
    3ce0:	eb 51       	subi	r30, 0x1B	; 27
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	de 01       	movw	r26, r28
    3ce6:	af 51       	subi	r26, 0x1F	; 31
    3ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cea:	20 81       	ld	r18, Z
    3cec:	31 81       	ldd	r19, Z+1	; 0x01
    3cee:	8d 91       	ld	r24, X+
    3cf0:	9c 91       	ld	r25, X
    3cf2:	a9 01       	movw	r20, r18
    3cf4:	48 1b       	sub	r20, r24
    3cf6:	59 0b       	sbc	r21, r25
    3cf8:	ca 01       	movw	r24, r20
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	61 e0       	ldi	r22, 0x01	; 1
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    3d04:	fe 01       	movw	r30, r28
    3d06:	e3 59       	subi	r30, 0x93	; 147
    3d08:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0a:	80 e0       	ldi	r24, 0x00	; 0
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	a1 ee       	ldi	r26, 0xE1	; 225
    3d10:	b3 e4       	ldi	r27, 0x43	; 67
    3d12:	80 83       	st	Z, r24
    3d14:	91 83       	std	Z+1, r25	; 0x01
    3d16:	a2 83       	std	Z+2, r26	; 0x02
    3d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1a:	8e 01       	movw	r16, r28
    3d1c:	07 59       	subi	r16, 0x97	; 151
    3d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d20:	fe 01       	movw	r30, r28
    3d22:	e3 59       	subi	r30, 0x93	; 147
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	60 81       	ld	r22, Z
    3d28:	71 81       	ldd	r23, Z+1	; 0x01
    3d2a:	82 81       	ldd	r24, Z+2	; 0x02
    3d2c:	93 81       	ldd	r25, Z+3	; 0x03
    3d2e:	26 e6       	ldi	r18, 0x66	; 102
    3d30:	36 e6       	ldi	r19, 0x66	; 102
    3d32:	46 e6       	ldi	r20, 0x66	; 102
    3d34:	55 e4       	ldi	r21, 0x45	; 69
    3d36:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	f8 01       	movw	r30, r16
    3d40:	80 83       	st	Z, r24
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	a2 83       	std	Z+2, r26	; 0x02
    3d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d48:	fe 01       	movw	r30, r28
    3d4a:	e7 59       	subi	r30, 0x97	; 151
    3d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4e:	60 81       	ld	r22, Z
    3d50:	71 81       	ldd	r23, Z+1	; 0x01
    3d52:	82 81       	ldd	r24, Z+2	; 0x02
    3d54:	93 81       	ldd	r25, Z+3	; 0x03
    3d56:	20 e0       	ldi	r18, 0x00	; 0
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	40 e8       	ldi	r20, 0x80	; 128
    3d5c:	5f e3       	ldi	r21, 0x3F	; 63
    3d5e:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    3d62:	88 23       	and	r24, r24
    3d64:	44 f4       	brge	.+16     	; 0x3d76 <move_bot_p2p+0xea4>
		__ticks = 1;
    3d66:	fe 01       	movw	r30, r28
    3d68:	e9 59       	subi	r30, 0x99	; 153
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	91 83       	std	Z+1, r25	; 0x01
    3d72:	80 83       	st	Z, r24
    3d74:	64 c0       	rjmp	.+200    	; 0x3e3e <move_bot_p2p+0xf6c>
	else if (__tmp > 65535)
    3d76:	fe 01       	movw	r30, r28
    3d78:	e7 59       	subi	r30, 0x97	; 151
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	60 81       	ld	r22, Z
    3d7e:	71 81       	ldd	r23, Z+1	; 0x01
    3d80:	82 81       	ldd	r24, Z+2	; 0x02
    3d82:	93 81       	ldd	r25, Z+3	; 0x03
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	3f ef       	ldi	r19, 0xFF	; 255
    3d88:	4f e7       	ldi	r20, 0x7F	; 127
    3d8a:	57 e4       	ldi	r21, 0x47	; 71
    3d8c:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    3d90:	18 16       	cp	r1, r24
    3d92:	0c f0       	brlt	.+2      	; 0x3d96 <move_bot_p2p+0xec4>
    3d94:	43 c0       	rjmp	.+134    	; 0x3e1c <move_bot_p2p+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d96:	fe 01       	movw	r30, r28
    3d98:	e3 59       	subi	r30, 0x93	; 147
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	40 e2       	ldi	r20, 0x20	; 32
    3daa:	51 e4       	ldi	r21, 0x41	; 65
    3dac:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	8e 01       	movw	r16, r28
    3db6:	09 59       	subi	r16, 0x99	; 153
    3db8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dba:	bc 01       	movw	r22, r24
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	f8 01       	movw	r30, r16
    3dc8:	91 83       	std	Z+1, r25	; 0x01
    3dca:	80 83       	st	Z, r24
    3dcc:	1f c0       	rjmp	.+62     	; 0x3e0c <move_bot_p2p+0xf3a>
    3dce:	fe 01       	movw	r30, r28
    3dd0:	eb 59       	subi	r30, 0x9B	; 155
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	80 e7       	ldi	r24, 0x70	; 112
    3dd6:	91 e0       	ldi	r25, 0x01	; 1
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	80 83       	st	Z, r24
    3ddc:	fe 01       	movw	r30, r28
    3dde:	eb 59       	subi	r30, 0x9B	; 155
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <move_bot_p2p+0xf14>
    3dea:	fe 01       	movw	r30, r28
    3dec:	eb 59       	subi	r30, 0x9B	; 155
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df4:	de 01       	movw	r26, r28
    3df6:	a9 59       	subi	r26, 0x99	; 153
    3df8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e9 59       	subi	r30, 0x99	; 153
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	80 81       	ld	r24, Z
    3e02:	91 81       	ldd	r25, Z+1	; 0x01
    3e04:	01 97       	sbiw	r24, 0x01	; 1
    3e06:	11 96       	adiw	r26, 0x01	; 1
    3e08:	9c 93       	st	X, r25
    3e0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e9 59       	subi	r30, 0x99	; 153
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	d1 f6       	brne	.-76     	; 0x3dce <move_bot_p2p+0xefc>
    3e1a:	27 c0       	rjmp	.+78     	; 0x3e6a <move_bot_p2p+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1c:	8e 01       	movw	r16, r28
    3e1e:	09 59       	subi	r16, 0x99	; 153
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	fe 01       	movw	r30, r28
    3e24:	e7 59       	subi	r30, 0x97	; 151
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	f8 01       	movw	r30, r16
    3e3a:	91 83       	std	Z+1, r25	; 0x01
    3e3c:	80 83       	st	Z, r24
    3e3e:	de 01       	movw	r26, r28
    3e40:	ad 59       	subi	r26, 0x9D	; 157
    3e42:	bf 4f       	sbci	r27, 0xFF	; 255
    3e44:	fe 01       	movw	r30, r28
    3e46:	e9 59       	subi	r30, 0x99	; 153
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	8d 93       	st	X+, r24
    3e50:	9c 93       	st	X, r25
    3e52:	fe 01       	movw	r30, r28
    3e54:	ed 59       	subi	r30, 0x9D	; 157
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	01 97       	sbiw	r24, 0x01	; 1
    3e5e:	f1 f7       	brne	.-4      	; 0x3e5c <move_bot_p2p+0xf8a>
    3e60:	fe 01       	movw	r30, r28
    3e62:	ed 59       	subi	r30, 0x9D	; 157
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	91 83       	std	Z+1, r25	; 0x01
    3e68:	80 83       	st	Z, r24

			_delay_ms(450);
			velocity(250,250);
    3e6a:	8a ef       	ldi	r24, 0xFA	; 250
    3e6c:	6a ef       	ldi	r22, 0xFA	; 250
    3e6e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			left();                 // takes left turn
    3e72:	0e 94 ab 14 	call	0x2956	; 0x2956 <left>
    3e76:	fe 01       	movw	r30, r28
    3e78:	e1 5a       	subi	r30, 0xA1	; 161
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e8       	ldi	r25, 0x80	; 128
    3e80:	a9 e0       	ldi	r26, 0x09	; 9
    3e82:	b4 e4       	ldi	r27, 0x44	; 68
    3e84:	80 83       	st	Z, r24
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	a2 83       	std	Z+2, r26	; 0x02
    3e8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8c:	8e 01       	movw	r16, r28
    3e8e:	05 5a       	subi	r16, 0xA5	; 165
    3e90:	1f 4f       	sbci	r17, 0xFF	; 255
    3e92:	fe 01       	movw	r30, r28
    3e94:	e1 5a       	subi	r30, 0xA1	; 161
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	60 81       	ld	r22, Z
    3e9a:	71 81       	ldd	r23, Z+1	; 0x01
    3e9c:	82 81       	ldd	r24, Z+2	; 0x02
    3e9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ea0:	26 e6       	ldi	r18, 0x66	; 102
    3ea2:	36 e6       	ldi	r19, 0x66	; 102
    3ea4:	46 e6       	ldi	r20, 0x66	; 102
    3ea6:	55 e4       	ldi	r21, 0x45	; 69
    3ea8:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	f8 01       	movw	r30, r16
    3eb2:	80 83       	st	Z, r24
    3eb4:	91 83       	std	Z+1, r25	; 0x01
    3eb6:	a2 83       	std	Z+2, r26	; 0x02
    3eb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eba:	fe 01       	movw	r30, r28
    3ebc:	e5 5a       	subi	r30, 0xA5	; 165
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	60 81       	ld	r22, Z
    3ec2:	71 81       	ldd	r23, Z+1	; 0x01
    3ec4:	82 81       	ldd	r24, Z+2	; 0x02
    3ec6:	93 81       	ldd	r25, Z+3	; 0x03
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e8       	ldi	r20, 0x80	; 128
    3ece:	5f e3       	ldi	r21, 0x3F	; 63
    3ed0:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    3ed4:	88 23       	and	r24, r24
    3ed6:	44 f4       	brge	.+16     	; 0x3ee8 <move_bot_p2p+0x1016>
		__ticks = 1;
    3ed8:	fe 01       	movw	r30, r28
    3eda:	e7 5a       	subi	r30, 0xA7	; 167
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	91 83       	std	Z+1, r25	; 0x01
    3ee4:	80 83       	st	Z, r24
    3ee6:	64 c0       	rjmp	.+200    	; 0x3fb0 <move_bot_p2p+0x10de>
	else if (__tmp > 65535)
    3ee8:	fe 01       	movw	r30, r28
    3eea:	e5 5a       	subi	r30, 0xA5	; 165
    3eec:	ff 4f       	sbci	r31, 0xFF	; 255
    3eee:	60 81       	ld	r22, Z
    3ef0:	71 81       	ldd	r23, Z+1	; 0x01
    3ef2:	82 81       	ldd	r24, Z+2	; 0x02
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	3f ef       	ldi	r19, 0xFF	; 255
    3efa:	4f e7       	ldi	r20, 0x7F	; 127
    3efc:	57 e4       	ldi	r21, 0x47	; 71
    3efe:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    3f02:	18 16       	cp	r1, r24
    3f04:	0c f0       	brlt	.+2      	; 0x3f08 <move_bot_p2p+0x1036>
    3f06:	43 c0       	rjmp	.+134    	; 0x3f8e <move_bot_p2p+0x10bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e1 5a       	subi	r30, 0xA1	; 161
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	60 81       	ld	r22, Z
    3f10:	71 81       	ldd	r23, Z+1	; 0x01
    3f12:	82 81       	ldd	r24, Z+2	; 0x02
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e2       	ldi	r20, 0x20	; 32
    3f1c:	51 e4       	ldi	r21, 0x41	; 65
    3f1e:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	8e 01       	movw	r16, r28
    3f28:	07 5a       	subi	r16, 0xA7	; 167
    3f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2c:	bc 01       	movw	r22, r24
    3f2e:	cd 01       	movw	r24, r26
    3f30:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	f8 01       	movw	r30, r16
    3f3a:	91 83       	std	Z+1, r25	; 0x01
    3f3c:	80 83       	st	Z, r24
    3f3e:	1f c0       	rjmp	.+62     	; 0x3f7e <move_bot_p2p+0x10ac>
    3f40:	fe 01       	movw	r30, r28
    3f42:	e9 5a       	subi	r30, 0xA9	; 169
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	80 e7       	ldi	r24, 0x70	; 112
    3f48:	91 e0       	ldi	r25, 0x01	; 1
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
    3f4e:	fe 01       	movw	r30, r28
    3f50:	e9 5a       	subi	r30, 0xA9	; 169
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	80 81       	ld	r24, Z
    3f56:	91 81       	ldd	r25, Z+1	; 0x01
    3f58:	01 97       	sbiw	r24, 0x01	; 1
    3f5a:	f1 f7       	brne	.-4      	; 0x3f58 <move_bot_p2p+0x1086>
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	e9 5a       	subi	r30, 0xA9	; 169
    3f60:	ff 4f       	sbci	r31, 0xFF	; 255
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f66:	de 01       	movw	r26, r28
    3f68:	a7 5a       	subi	r26, 0xA7	; 167
    3f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6c:	fe 01       	movw	r30, r28
    3f6e:	e7 5a       	subi	r30, 0xA7	; 167
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	01 97       	sbiw	r24, 0x01	; 1
    3f78:	11 96       	adiw	r26, 0x01	; 1
    3f7a:	9c 93       	st	X, r25
    3f7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e7 5a       	subi	r30, 0xA7	; 167
    3f82:	ff 4f       	sbci	r31, 0xFF	; 255
    3f84:	80 81       	ld	r24, Z
    3f86:	91 81       	ldd	r25, Z+1	; 0x01
    3f88:	00 97       	sbiw	r24, 0x00	; 0
    3f8a:	d1 f6       	brne	.-76     	; 0x3f40 <move_bot_p2p+0x106e>
    3f8c:	27 c0       	rjmp	.+78     	; 0x3fdc <move_bot_p2p+0x110a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f8e:	8e 01       	movw	r16, r28
    3f90:	07 5a       	subi	r16, 0xA7	; 167
    3f92:	1f 4f       	sbci	r17, 0xFF	; 255
    3f94:	fe 01       	movw	r30, r28
    3f96:	e5 5a       	subi	r30, 0xA5	; 165
    3f98:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9a:	60 81       	ld	r22, Z
    3f9c:	71 81       	ldd	r23, Z+1	; 0x01
    3f9e:	82 81       	ldd	r24, Z+2	; 0x02
    3fa0:	93 81       	ldd	r25, Z+3	; 0x03
    3fa2:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	f8 01       	movw	r30, r16
    3fac:	91 83       	std	Z+1, r25	; 0x01
    3fae:	80 83       	st	Z, r24
    3fb0:	de 01       	movw	r26, r28
    3fb2:	ab 5a       	subi	r26, 0xAB	; 171
    3fb4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	e7 5a       	subi	r30, 0xA7	; 167
    3fba:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbc:	80 81       	ld	r24, Z
    3fbe:	91 81       	ldd	r25, Z+1	; 0x01
    3fc0:	8d 93       	st	X+, r24
    3fc2:	9c 93       	st	X, r25
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	eb 5a       	subi	r30, 0xAB	; 171
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	80 81       	ld	r24, Z
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	f1 f7       	brne	.-4      	; 0x3fce <move_bot_p2p+0x10fc>
    3fd2:	fe 01       	movw	r30, r28
    3fd4:	eb 5a       	subi	r30, 0xAB	; 171
    3fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	80 83       	st	Z, r24
			_delay_ms(550);
			move_dir(col2-col1,1);   // Now covers the columns
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e9 51       	subi	r30, 0x19	; 25
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	de 01       	movw	r26, r28
    3fe4:	ad 51       	subi	r26, 0x1D	; 29
    3fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe8:	20 81       	ld	r18, Z
    3fea:	31 81       	ldd	r19, Z+1	; 0x01
    3fec:	8d 91       	ld	r24, X+
    3fee:	9c 91       	ld	r25, X
    3ff0:	a9 01       	movw	r20, r18
    3ff2:	48 1b       	sub	r20, r24
    3ff4:	59 0b       	sbc	r21, r25
    3ff6:	ca 01       	movw	r24, r20
    3ff8:	61 e0       	ldi	r22, 0x01	; 1
    3ffa:	70 e0       	ldi	r23, 0x00	; 0
    3ffc:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    4000:	fe 01       	movw	r30, r28
    4002:	ef 5a       	subi	r30, 0xAF	; 175
    4004:	ff 4f       	sbci	r31, 0xFF	; 255
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	a1 ee       	ldi	r26, 0xE1	; 225
    400c:	b3 e4       	ldi	r27, 0x43	; 67
    400e:	80 83       	st	Z, r24
    4010:	91 83       	std	Z+1, r25	; 0x01
    4012:	a2 83       	std	Z+2, r26	; 0x02
    4014:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4016:	8e 01       	movw	r16, r28
    4018:	03 5b       	subi	r16, 0xB3	; 179
    401a:	1f 4f       	sbci	r17, 0xFF	; 255
    401c:	fe 01       	movw	r30, r28
    401e:	ef 5a       	subi	r30, 0xAF	; 175
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	60 81       	ld	r22, Z
    4024:	71 81       	ldd	r23, Z+1	; 0x01
    4026:	82 81       	ldd	r24, Z+2	; 0x02
    4028:	93 81       	ldd	r25, Z+3	; 0x03
    402a:	26 e6       	ldi	r18, 0x66	; 102
    402c:	36 e6       	ldi	r19, 0x66	; 102
    402e:	46 e6       	ldi	r20, 0x66	; 102
    4030:	55 e4       	ldi	r21, 0x45	; 69
    4032:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    4036:	dc 01       	movw	r26, r24
    4038:	cb 01       	movw	r24, r22
    403a:	f8 01       	movw	r30, r16
    403c:	80 83       	st	Z, r24
    403e:	91 83       	std	Z+1, r25	; 0x01
    4040:	a2 83       	std	Z+2, r26	; 0x02
    4042:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4044:	fe 01       	movw	r30, r28
    4046:	e3 5b       	subi	r30, 0xB3	; 179
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	40 e8       	ldi	r20, 0x80	; 128
    4058:	5f e3       	ldi	r21, 0x3F	; 63
    405a:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    405e:	88 23       	and	r24, r24
    4060:	44 f4       	brge	.+16     	; 0x4072 <move_bot_p2p+0x11a0>
		__ticks = 1;
    4062:	fe 01       	movw	r30, r28
    4064:	e5 5b       	subi	r30, 0xB5	; 181
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	91 83       	std	Z+1, r25	; 0x01
    406e:	80 83       	st	Z, r24
    4070:	64 c0       	rjmp	.+200    	; 0x413a <move_bot_p2p+0x1268>
	else if (__tmp > 65535)
    4072:	fe 01       	movw	r30, r28
    4074:	e3 5b       	subi	r30, 0xB3	; 179
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	60 81       	ld	r22, Z
    407a:	71 81       	ldd	r23, Z+1	; 0x01
    407c:	82 81       	ldd	r24, Z+2	; 0x02
    407e:	93 81       	ldd	r25, Z+3	; 0x03
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	3f ef       	ldi	r19, 0xFF	; 255
    4084:	4f e7       	ldi	r20, 0x7F	; 127
    4086:	57 e4       	ldi	r21, 0x47	; 71
    4088:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    408c:	18 16       	cp	r1, r24
    408e:	0c f0       	brlt	.+2      	; 0x4092 <move_bot_p2p+0x11c0>
    4090:	43 c0       	rjmp	.+134    	; 0x4118 <move_bot_p2p+0x1246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4092:	fe 01       	movw	r30, r28
    4094:	ef 5a       	subi	r30, 0xAF	; 175
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	60 81       	ld	r22, Z
    409a:	71 81       	ldd	r23, Z+1	; 0x01
    409c:	82 81       	ldd	r24, Z+2	; 0x02
    409e:	93 81       	ldd	r25, Z+3	; 0x03
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	40 e2       	ldi	r20, 0x20	; 32
    40a6:	51 e4       	ldi	r21, 0x41	; 65
    40a8:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	8e 01       	movw	r16, r28
    40b2:	05 5b       	subi	r16, 0xB5	; 181
    40b4:	1f 4f       	sbci	r17, 0xFF	; 255
    40b6:	bc 01       	movw	r22, r24
    40b8:	cd 01       	movw	r24, r26
    40ba:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	f8 01       	movw	r30, r16
    40c4:	91 83       	std	Z+1, r25	; 0x01
    40c6:	80 83       	st	Z, r24
    40c8:	1f c0       	rjmp	.+62     	; 0x4108 <move_bot_p2p+0x1236>
    40ca:	fe 01       	movw	r30, r28
    40cc:	e7 5b       	subi	r30, 0xB7	; 183
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 e7       	ldi	r24, 0x70	; 112
    40d2:	91 e0       	ldi	r25, 0x01	; 1
    40d4:	91 83       	std	Z+1, r25	; 0x01
    40d6:	80 83       	st	Z, r24
    40d8:	fe 01       	movw	r30, r28
    40da:	e7 5b       	subi	r30, 0xB7	; 183
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	80 81       	ld	r24, Z
    40e0:	91 81       	ldd	r25, Z+1	; 0x01
    40e2:	01 97       	sbiw	r24, 0x01	; 1
    40e4:	f1 f7       	brne	.-4      	; 0x40e2 <move_bot_p2p+0x1210>
    40e6:	fe 01       	movw	r30, r28
    40e8:	e7 5b       	subi	r30, 0xB7	; 183
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	91 83       	std	Z+1, r25	; 0x01
    40ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f0:	de 01       	movw	r26, r28
    40f2:	a5 5b       	subi	r26, 0xB5	; 181
    40f4:	bf 4f       	sbci	r27, 0xFF	; 255
    40f6:	fe 01       	movw	r30, r28
    40f8:	e5 5b       	subi	r30, 0xB5	; 181
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	80 81       	ld	r24, Z
    40fe:	91 81       	ldd	r25, Z+1	; 0x01
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	11 96       	adiw	r26, 0x01	; 1
    4104:	9c 93       	st	X, r25
    4106:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4108:	fe 01       	movw	r30, r28
    410a:	e5 5b       	subi	r30, 0xB5	; 181
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	00 97       	sbiw	r24, 0x00	; 0
    4114:	d1 f6       	brne	.-76     	; 0x40ca <move_bot_p2p+0x11f8>
    4116:	27 c0       	rjmp	.+78     	; 0x4166 <move_bot_p2p+0x1294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4118:	8e 01       	movw	r16, r28
    411a:	05 5b       	subi	r16, 0xB5	; 181
    411c:	1f 4f       	sbci	r17, 0xFF	; 255
    411e:	fe 01       	movw	r30, r28
    4120:	e3 5b       	subi	r30, 0xB3	; 179
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	60 81       	ld	r22, Z
    4126:	71 81       	ldd	r23, Z+1	; 0x01
    4128:	82 81       	ldd	r24, Z+2	; 0x02
    412a:	93 81       	ldd	r25, Z+3	; 0x03
    412c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	f8 01       	movw	r30, r16
    4136:	91 83       	std	Z+1, r25	; 0x01
    4138:	80 83       	st	Z, r24
    413a:	de 01       	movw	r26, r28
    413c:	a9 5b       	subi	r26, 0xB9	; 185
    413e:	bf 4f       	sbci	r27, 0xFF	; 255
    4140:	fe 01       	movw	r30, r28
    4142:	e5 5b       	subi	r30, 0xB5	; 181
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	80 81       	ld	r24, Z
    4148:	91 81       	ldd	r25, Z+1	; 0x01
    414a:	8d 93       	st	X+, r24
    414c:	9c 93       	st	X, r25
    414e:	fe 01       	movw	r30, r28
    4150:	e9 5b       	subi	r30, 0xB9	; 185
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	80 81       	ld	r24, Z
    4156:	91 81       	ldd	r25, Z+1	; 0x01
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	f1 f7       	brne	.-4      	; 0x4158 <move_bot_p2p+0x1286>
    415c:	fe 01       	movw	r30, r28
    415e:	e9 5b       	subi	r30, 0xB9	; 185
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	91 83       	std	Z+1, r25	; 0x01
    4164:	80 83       	st	Z, r24
			_delay_ms(450);
			velocity(250,250);
    4166:	8a ef       	ldi	r24, 0xFA	; 250
    4168:	6a ef       	ldi	r22, 0xFA	; 250
    416a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			right();				// takes right turn
    416e:	0e 94 b5 14 	call	0x296a	; 0x296a <right>
    4172:	fe 01       	movw	r30, r28
    4174:	ed 5b       	subi	r30, 0xBD	; 189
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	90 e8       	ldi	r25, 0x80	; 128
    417c:	a9 e0       	ldi	r26, 0x09	; 9
    417e:	b4 e4       	ldi	r27, 0x44	; 68
    4180:	80 83       	st	Z, r24
    4182:	91 83       	std	Z+1, r25	; 0x01
    4184:	a2 83       	std	Z+2, r26	; 0x02
    4186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4188:	8e 01       	movw	r16, r28
    418a:	01 5c       	subi	r16, 0xC1	; 193
    418c:	1f 4f       	sbci	r17, 0xFF	; 255
    418e:	fe 01       	movw	r30, r28
    4190:	ed 5b       	subi	r30, 0xBD	; 189
    4192:	ff 4f       	sbci	r31, 0xFF	; 255
    4194:	60 81       	ld	r22, Z
    4196:	71 81       	ldd	r23, Z+1	; 0x01
    4198:	82 81       	ldd	r24, Z+2	; 0x02
    419a:	93 81       	ldd	r25, Z+3	; 0x03
    419c:	26 e6       	ldi	r18, 0x66	; 102
    419e:	36 e6       	ldi	r19, 0x66	; 102
    41a0:	46 e6       	ldi	r20, 0x66	; 102
    41a2:	55 e4       	ldi	r21, 0x45	; 69
    41a4:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
    41ac:	f8 01       	movw	r30, r16
    41ae:	80 83       	st	Z, r24
    41b0:	91 83       	std	Z+1, r25	; 0x01
    41b2:	a2 83       	std	Z+2, r26	; 0x02
    41b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41b6:	fe 01       	movw	r30, r28
    41b8:	ff 96       	adiw	r30, 0x3f	; 63
    41ba:	60 81       	ld	r22, Z
    41bc:	71 81       	ldd	r23, Z+1	; 0x01
    41be:	82 81       	ldd	r24, Z+2	; 0x02
    41c0:	93 81       	ldd	r25, Z+3	; 0x03
    41c2:	20 e0       	ldi	r18, 0x00	; 0
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	40 e8       	ldi	r20, 0x80	; 128
    41c8:	5f e3       	ldi	r21, 0x3F	; 63
    41ca:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    41ce:	88 23       	and	r24, r24
    41d0:	2c f4       	brge	.+10     	; 0x41dc <move_bot_p2p+0x130a>
		__ticks = 1;
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	9e af       	std	Y+62, r25	; 0x3e
    41d8:	8d af       	std	Y+61, r24	; 0x3d
    41da:	46 c0       	rjmp	.+140    	; 0x4268 <move_bot_p2p+0x1396>
	else if (__tmp > 65535)
    41dc:	fe 01       	movw	r30, r28
    41de:	ff 96       	adiw	r30, 0x3f	; 63
    41e0:	60 81       	ld	r22, Z
    41e2:	71 81       	ldd	r23, Z+1	; 0x01
    41e4:	82 81       	ldd	r24, Z+2	; 0x02
    41e6:	93 81       	ldd	r25, Z+3	; 0x03
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	3f ef       	ldi	r19, 0xFF	; 255
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	57 e4       	ldi	r21, 0x47	; 71
    41f0:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    41f4:	18 16       	cp	r1, r24
    41f6:	64 f5       	brge	.+88     	; 0x4250 <move_bot_p2p+0x137e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	fe 01       	movw	r30, r28
    41fa:	ed 5b       	subi	r30, 0xBD	; 189
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	60 81       	ld	r22, Z
    4200:	71 81       	ldd	r23, Z+1	; 0x01
    4202:	82 81       	ldd	r24, Z+2	; 0x02
    4204:	93 81       	ldd	r25, Z+3	; 0x03
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e2       	ldi	r20, 0x20	; 32
    420c:	51 e4       	ldi	r21, 0x41	; 65
    420e:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	bc 01       	movw	r22, r24
    4218:	cd 01       	movw	r24, r26
    421a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	9e af       	std	Y+62, r25	; 0x3e
    4224:	8d af       	std	Y+61, r24	; 0x3d
    4226:	0f c0       	rjmp	.+30     	; 0x4246 <move_bot_p2p+0x1374>
    4228:	80 e7       	ldi	r24, 0x70	; 112
    422a:	91 e0       	ldi	r25, 0x01	; 1
    422c:	9c af       	std	Y+60, r25	; 0x3c
    422e:	8b af       	std	Y+59, r24	; 0x3b
    4230:	8b ad       	ldd	r24, Y+59	; 0x3b
    4232:	9c ad       	ldd	r25, Y+60	; 0x3c
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <move_bot_p2p+0x1362>
    4238:	9c af       	std	Y+60, r25	; 0x3c
    423a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423c:	8d ad       	ldd	r24, Y+61	; 0x3d
    423e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	9e af       	std	Y+62, r25	; 0x3e
    4244:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4246:	8d ad       	ldd	r24, Y+61	; 0x3d
    4248:	9e ad       	ldd	r25, Y+62	; 0x3e
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	69 f7       	brne	.-38     	; 0x4228 <move_bot_p2p+0x1356>
    424e:	16 c0       	rjmp	.+44     	; 0x427c <move_bot_p2p+0x13aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4250:	fe 01       	movw	r30, r28
    4252:	ff 96       	adiw	r30, 0x3f	; 63
    4254:	60 81       	ld	r22, Z
    4256:	71 81       	ldd	r23, Z+1	; 0x01
    4258:	82 81       	ldd	r24, Z+2	; 0x02
    425a:	93 81       	ldd	r25, Z+3	; 0x03
    425c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	9e af       	std	Y+62, r25	; 0x3e
    4266:	8d af       	std	Y+61, r24	; 0x3d
    4268:	8d ad       	ldd	r24, Y+61	; 0x3d
    426a:	9e ad       	ldd	r25, Y+62	; 0x3e
    426c:	9a af       	std	Y+58, r25	; 0x3a
    426e:	89 af       	std	Y+57, r24	; 0x39
    4270:	89 ad       	ldd	r24, Y+57	; 0x39
    4272:	9a ad       	ldd	r25, Y+58	; 0x3a
    4274:	01 97       	sbiw	r24, 0x01	; 1
    4276:	f1 f7       	brne	.-4      	; 0x4274 <move_bot_p2p+0x13a2>
    4278:	9a af       	std	Y+58, r25	; 0x3a
    427a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(550);
			move_dir(1,1);			// takes the last step for rows
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	61 e0       	ldi	r22, 0x01	; 1
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    4288:	0f c2       	rjmp	.+1054   	; 0x46a8 <move_bot_p2p+0x17d6>
		}
		else
		{
			if(row1-1>row2)
    428a:	fe 01       	movw	r30, r28
    428c:	ef 51       	subi	r30, 0x1F	; 31
    428e:	ff 4f       	sbci	r31, 0xFF	; 255
    4290:	80 81       	ld	r24, Z
    4292:	91 81       	ldd	r25, Z+1	; 0x01
    4294:	9c 01       	movw	r18, r24
    4296:	21 50       	subi	r18, 0x01	; 1
    4298:	30 40       	sbci	r19, 0x00	; 0
    429a:	fe 01       	movw	r30, r28
    429c:	eb 51       	subi	r30, 0x1B	; 27
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	80 81       	ld	r24, Z
    42a2:	91 81       	ldd	r25, Z+1	; 0x01
    42a4:	82 17       	cp	r24, r18
    42a6:	93 07       	cpc	r25, r19
    42a8:	98 f4       	brcc	.+38     	; 0x42d0 <move_bot_p2p+0x13fe>
				move_dir(row1-row2-1,0);  // moves rows minus 1 steps 
    42aa:	fe 01       	movw	r30, r28
    42ac:	ef 51       	subi	r30, 0x1F	; 31
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	de 01       	movw	r26, r28
    42b2:	ab 51       	subi	r26, 0x1B	; 27
    42b4:	bf 4f       	sbci	r27, 0xFF	; 255
    42b6:	20 81       	ld	r18, Z
    42b8:	31 81       	ldd	r19, Z+1	; 0x01
    42ba:	8d 91       	ld	r24, X+
    42bc:	9c 91       	ld	r25, X
    42be:	a9 01       	movw	r20, r18
    42c0:	48 1b       	sub	r20, r24
    42c2:	59 0b       	sbc	r21, r25
    42c4:	ca 01       	movw	r24, r20
    42c6:	01 97       	sbiw	r24, 0x01	; 1
    42c8:	60 e0       	ldi	r22, 0x00	; 0
    42ca:	70 e0       	ldi	r23, 0x00	; 0
    42cc:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	a1 ee       	ldi	r26, 0xE1	; 225
    42d6:	b3 e4       	ldi	r27, 0x43	; 67
    42d8:	8d ab       	std	Y+53, r24	; 0x35
    42da:	9e ab       	std	Y+54, r25	; 0x36
    42dc:	af ab       	std	Y+55, r26	; 0x37
    42de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e0:	6d a9       	ldd	r22, Y+53	; 0x35
    42e2:	7e a9       	ldd	r23, Y+54	; 0x36
    42e4:	8f a9       	ldd	r24, Y+55	; 0x37
    42e6:	98 ad       	ldd	r25, Y+56	; 0x38
    42e8:	26 e6       	ldi	r18, 0x66	; 102
    42ea:	36 e6       	ldi	r19, 0x66	; 102
    42ec:	46 e6       	ldi	r20, 0x66	; 102
    42ee:	55 e4       	ldi	r21, 0x45	; 69
    42f0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	89 ab       	std	Y+49, r24	; 0x31
    42fa:	9a ab       	std	Y+50, r25	; 0x32
    42fc:	ab ab       	std	Y+51, r26	; 0x33
    42fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4300:	69 a9       	ldd	r22, Y+49	; 0x31
    4302:	7a a9       	ldd	r23, Y+50	; 0x32
    4304:	8b a9       	ldd	r24, Y+51	; 0x33
    4306:	9c a9       	ldd	r25, Y+52	; 0x34
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	40 e8       	ldi	r20, 0x80	; 128
    430e:	5f e3       	ldi	r21, 0x3F	; 63
    4310:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    4314:	88 23       	and	r24, r24
    4316:	2c f4       	brge	.+10     	; 0x4322 <move_bot_p2p+0x1450>
		__ticks = 1;
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	98 ab       	std	Y+48, r25	; 0x30
    431e:	8f a7       	std	Y+47, r24	; 0x2f
    4320:	3f c0       	rjmp	.+126    	; 0x43a0 <move_bot_p2p+0x14ce>
	else if (__tmp > 65535)
    4322:	69 a9       	ldd	r22, Y+49	; 0x31
    4324:	7a a9       	ldd	r23, Y+50	; 0x32
    4326:	8b a9       	ldd	r24, Y+51	; 0x33
    4328:	9c a9       	ldd	r25, Y+52	; 0x34
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	3f ef       	ldi	r19, 0xFF	; 255
    432e:	4f e7       	ldi	r20, 0x7F	; 127
    4330:	57 e4       	ldi	r21, 0x47	; 71
    4332:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    4336:	18 16       	cp	r1, r24
    4338:	4c f5       	brge	.+82     	; 0x438c <move_bot_p2p+0x14ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433a:	6d a9       	ldd	r22, Y+53	; 0x35
    433c:	7e a9       	ldd	r23, Y+54	; 0x36
    433e:	8f a9       	ldd	r24, Y+55	; 0x37
    4340:	98 ad       	ldd	r25, Y+56	; 0x38
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e2       	ldi	r20, 0x20	; 32
    4348:	51 e4       	ldi	r21, 0x41	; 65
    434a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	bc 01       	movw	r22, r24
    4354:	cd 01       	movw	r24, r26
    4356:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    435a:	dc 01       	movw	r26, r24
    435c:	cb 01       	movw	r24, r22
    435e:	98 ab       	std	Y+48, r25	; 0x30
    4360:	8f a7       	std	Y+47, r24	; 0x2f
    4362:	0f c0       	rjmp	.+30     	; 0x4382 <move_bot_p2p+0x14b0>
    4364:	80 e7       	ldi	r24, 0x70	; 112
    4366:	91 e0       	ldi	r25, 0x01	; 1
    4368:	9e a7       	std	Y+46, r25	; 0x2e
    436a:	8d a7       	std	Y+45, r24	; 0x2d
    436c:	8d a5       	ldd	r24, Y+45	; 0x2d
    436e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	f1 f7       	brne	.-4      	; 0x4370 <move_bot_p2p+0x149e>
    4374:	9e a7       	std	Y+46, r25	; 0x2e
    4376:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4378:	8f a5       	ldd	r24, Y+47	; 0x2f
    437a:	98 a9       	ldd	r25, Y+48	; 0x30
    437c:	01 97       	sbiw	r24, 0x01	; 1
    437e:	98 ab       	std	Y+48, r25	; 0x30
    4380:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4382:	8f a5       	ldd	r24, Y+47	; 0x2f
    4384:	98 a9       	ldd	r25, Y+48	; 0x30
    4386:	00 97       	sbiw	r24, 0x00	; 0
    4388:	69 f7       	brne	.-38     	; 0x4364 <move_bot_p2p+0x1492>
    438a:	14 c0       	rjmp	.+40     	; 0x43b4 <move_bot_p2p+0x14e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438c:	69 a9       	ldd	r22, Y+49	; 0x31
    438e:	7a a9       	ldd	r23, Y+50	; 0x32
    4390:	8b a9       	ldd	r24, Y+51	; 0x33
    4392:	9c a9       	ldd	r25, Y+52	; 0x34
    4394:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	98 ab       	std	Y+48, r25	; 0x30
    439e:	8f a7       	std	Y+47, r24	; 0x2f
    43a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    43a2:	98 a9       	ldd	r25, Y+48	; 0x30
    43a4:	9c a7       	std	Y+44, r25	; 0x2c
    43a6:	8b a7       	std	Y+43, r24	; 0x2b
    43a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    43aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	f1 f7       	brne	.-4      	; 0x43ac <move_bot_p2p+0x14da>
    43b0:	9c a7       	std	Y+44, r25	; 0x2c
    43b2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(450);
			velocity(250,250);
    43b4:	8a ef       	ldi	r24, 0xFA	; 250
    43b6:	6a ef       	ldi	r22, 0xFA	; 250
    43b8:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			left();                 // takes left turn
    43bc:	0e 94 ab 14 	call	0x2956	; 0x2956 <left>
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	90 e8       	ldi	r25, 0x80	; 128
    43c4:	a9 e0       	ldi	r26, 0x09	; 9
    43c6:	b4 e4       	ldi	r27, 0x44	; 68
    43c8:	8f a3       	std	Y+39, r24	; 0x27
    43ca:	98 a7       	std	Y+40, r25	; 0x28
    43cc:	a9 a7       	std	Y+41, r26	; 0x29
    43ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43d0:	6f a1       	ldd	r22, Y+39	; 0x27
    43d2:	78 a5       	ldd	r23, Y+40	; 0x28
    43d4:	89 a5       	ldd	r24, Y+41	; 0x29
    43d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    43d8:	26 e6       	ldi	r18, 0x66	; 102
    43da:	36 e6       	ldi	r19, 0x66	; 102
    43dc:	46 e6       	ldi	r20, 0x66	; 102
    43de:	55 e4       	ldi	r21, 0x45	; 69
    43e0:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	8b a3       	std	Y+35, r24	; 0x23
    43ea:	9c a3       	std	Y+36, r25	; 0x24
    43ec:	ad a3       	std	Y+37, r26	; 0x25
    43ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43f0:	6b a1       	ldd	r22, Y+35	; 0x23
    43f2:	7c a1       	ldd	r23, Y+36	; 0x24
    43f4:	8d a1       	ldd	r24, Y+37	; 0x25
    43f6:	9e a1       	ldd	r25, Y+38	; 0x26
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	40 e8       	ldi	r20, 0x80	; 128
    43fe:	5f e3       	ldi	r21, 0x3F	; 63
    4400:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    4404:	88 23       	and	r24, r24
    4406:	2c f4       	brge	.+10     	; 0x4412 <move_bot_p2p+0x1540>
		__ticks = 1;
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	9a a3       	std	Y+34, r25	; 0x22
    440e:	89 a3       	std	Y+33, r24	; 0x21
    4410:	3f c0       	rjmp	.+126    	; 0x4490 <move_bot_p2p+0x15be>
	else if (__tmp > 65535)
    4412:	6b a1       	ldd	r22, Y+35	; 0x23
    4414:	7c a1       	ldd	r23, Y+36	; 0x24
    4416:	8d a1       	ldd	r24, Y+37	; 0x25
    4418:	9e a1       	ldd	r25, Y+38	; 0x26
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	3f ef       	ldi	r19, 0xFF	; 255
    441e:	4f e7       	ldi	r20, 0x7F	; 127
    4420:	57 e4       	ldi	r21, 0x47	; 71
    4422:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    4426:	18 16       	cp	r1, r24
    4428:	4c f5       	brge	.+82     	; 0x447c <move_bot_p2p+0x15aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    442a:	6f a1       	ldd	r22, Y+39	; 0x27
    442c:	78 a5       	ldd	r23, Y+40	; 0x28
    442e:	89 a5       	ldd	r24, Y+41	; 0x29
    4430:	9a a5       	ldd	r25, Y+42	; 0x2a
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	40 e2       	ldi	r20, 0x20	; 32
    4438:	51 e4       	ldi	r21, 0x41	; 65
    443a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	bc 01       	movw	r22, r24
    4444:	cd 01       	movw	r24, r26
    4446:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    444a:	dc 01       	movw	r26, r24
    444c:	cb 01       	movw	r24, r22
    444e:	9a a3       	std	Y+34, r25	; 0x22
    4450:	89 a3       	std	Y+33, r24	; 0x21
    4452:	0f c0       	rjmp	.+30     	; 0x4472 <move_bot_p2p+0x15a0>
    4454:	80 e7       	ldi	r24, 0x70	; 112
    4456:	91 e0       	ldi	r25, 0x01	; 1
    4458:	98 a3       	std	Y+32, r25	; 0x20
    445a:	8f 8f       	std	Y+31, r24	; 0x1f
    445c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    445e:	98 a1       	ldd	r25, Y+32	; 0x20
    4460:	01 97       	sbiw	r24, 0x01	; 1
    4462:	f1 f7       	brne	.-4      	; 0x4460 <move_bot_p2p+0x158e>
    4464:	98 a3       	std	Y+32, r25	; 0x20
    4466:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4468:	89 a1       	ldd	r24, Y+33	; 0x21
    446a:	9a a1       	ldd	r25, Y+34	; 0x22
    446c:	01 97       	sbiw	r24, 0x01	; 1
    446e:	9a a3       	std	Y+34, r25	; 0x22
    4470:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4472:	89 a1       	ldd	r24, Y+33	; 0x21
    4474:	9a a1       	ldd	r25, Y+34	; 0x22
    4476:	00 97       	sbiw	r24, 0x00	; 0
    4478:	69 f7       	brne	.-38     	; 0x4454 <move_bot_p2p+0x1582>
    447a:	14 c0       	rjmp	.+40     	; 0x44a4 <move_bot_p2p+0x15d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    447c:	6b a1       	ldd	r22, Y+35	; 0x23
    447e:	7c a1       	ldd	r23, Y+36	; 0x24
    4480:	8d a1       	ldd	r24, Y+37	; 0x25
    4482:	9e a1       	ldd	r25, Y+38	; 0x26
    4484:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4488:	dc 01       	movw	r26, r24
    448a:	cb 01       	movw	r24, r22
    448c:	9a a3       	std	Y+34, r25	; 0x22
    448e:	89 a3       	std	Y+33, r24	; 0x21
    4490:	89 a1       	ldd	r24, Y+33	; 0x21
    4492:	9a a1       	ldd	r25, Y+34	; 0x22
    4494:	9e 8f       	std	Y+30, r25	; 0x1e
    4496:	8d 8f       	std	Y+29, r24	; 0x1d
    4498:	8d 8d       	ldd	r24, Y+29	; 0x1d
    449a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	f1 f7       	brne	.-4      	; 0x449c <move_bot_p2p+0x15ca>
    44a0:	9e 8f       	std	Y+30, r25	; 0x1e
    44a2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(550);
			move_dir(col2-col1,1);    // covers columns
    44a4:	fe 01       	movw	r30, r28
    44a6:	e9 51       	subi	r30, 0x19	; 25
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	de 01       	movw	r26, r28
    44ac:	ad 51       	subi	r26, 0x1D	; 29
    44ae:	bf 4f       	sbci	r27, 0xFF	; 255
    44b0:	20 81       	ld	r18, Z
    44b2:	31 81       	ldd	r19, Z+1	; 0x01
    44b4:	8d 91       	ld	r24, X+
    44b6:	9c 91       	ld	r25, X
    44b8:	f9 01       	movw	r30, r18
    44ba:	e8 1b       	sub	r30, r24
    44bc:	f9 0b       	sbc	r31, r25
    44be:	cf 01       	movw	r24, r30
    44c0:	61 e0       	ldi	r22, 0x01	; 1
    44c2:	70 e0       	ldi	r23, 0x00	; 0
    44c4:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	a1 ee       	ldi	r26, 0xE1	; 225
    44ce:	b3 e4       	ldi	r27, 0x43	; 67
    44d0:	89 8f       	std	Y+25, r24	; 0x19
    44d2:	9a 8f       	std	Y+26, r25	; 0x1a
    44d4:	ab 8f       	std	Y+27, r26	; 0x1b
    44d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d8:	69 8d       	ldd	r22, Y+25	; 0x19
    44da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44e0:	26 e6       	ldi	r18, 0x66	; 102
    44e2:	36 e6       	ldi	r19, 0x66	; 102
    44e4:	46 e6       	ldi	r20, 0x66	; 102
    44e6:	55 e4       	ldi	r21, 0x45	; 69
    44e8:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	8d 8b       	std	Y+21, r24	; 0x15
    44f2:	9e 8b       	std	Y+22, r25	; 0x16
    44f4:	af 8b       	std	Y+23, r26	; 0x17
    44f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44f8:	6d 89       	ldd	r22, Y+21	; 0x15
    44fa:	7e 89       	ldd	r23, Y+22	; 0x16
    44fc:	8f 89       	ldd	r24, Y+23	; 0x17
    44fe:	98 8d       	ldd	r25, Y+24	; 0x18
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	40 e8       	ldi	r20, 0x80	; 128
    4506:	5f e3       	ldi	r21, 0x3F	; 63
    4508:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    450c:	88 23       	and	r24, r24
    450e:	2c f4       	brge	.+10     	; 0x451a <move_bot_p2p+0x1648>
		__ticks = 1;
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	9c 8b       	std	Y+20, r25	; 0x14
    4516:	8b 8b       	std	Y+19, r24	; 0x13
    4518:	3f c0       	rjmp	.+126    	; 0x4598 <move_bot_p2p+0x16c6>
	else if (__tmp > 65535)
    451a:	6d 89       	ldd	r22, Y+21	; 0x15
    451c:	7e 89       	ldd	r23, Y+22	; 0x16
    451e:	8f 89       	ldd	r24, Y+23	; 0x17
    4520:	98 8d       	ldd	r25, Y+24	; 0x18
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	3f ef       	ldi	r19, 0xFF	; 255
    4526:	4f e7       	ldi	r20, 0x7F	; 127
    4528:	57 e4       	ldi	r21, 0x47	; 71
    452a:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    452e:	18 16       	cp	r1, r24
    4530:	4c f5       	brge	.+82     	; 0x4584 <move_bot_p2p+0x16b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4532:	69 8d       	ldd	r22, Y+25	; 0x19
    4534:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4536:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4538:	9c 8d       	ldd	r25, Y+28	; 0x1c
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	40 e2       	ldi	r20, 0x20	; 32
    4540:	51 e4       	ldi	r21, 0x41	; 65
    4542:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	bc 01       	movw	r22, r24
    454c:	cd 01       	movw	r24, r26
    454e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4552:	dc 01       	movw	r26, r24
    4554:	cb 01       	movw	r24, r22
    4556:	9c 8b       	std	Y+20, r25	; 0x14
    4558:	8b 8b       	std	Y+19, r24	; 0x13
    455a:	0f c0       	rjmp	.+30     	; 0x457a <move_bot_p2p+0x16a8>
    455c:	80 e7       	ldi	r24, 0x70	; 112
    455e:	91 e0       	ldi	r25, 0x01	; 1
    4560:	9a 8b       	std	Y+18, r25	; 0x12
    4562:	89 8b       	std	Y+17, r24	; 0x11
    4564:	89 89       	ldd	r24, Y+17	; 0x11
    4566:	9a 89       	ldd	r25, Y+18	; 0x12
    4568:	01 97       	sbiw	r24, 0x01	; 1
    456a:	f1 f7       	brne	.-4      	; 0x4568 <move_bot_p2p+0x1696>
    456c:	9a 8b       	std	Y+18, r25	; 0x12
    456e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4570:	8b 89       	ldd	r24, Y+19	; 0x13
    4572:	9c 89       	ldd	r25, Y+20	; 0x14
    4574:	01 97       	sbiw	r24, 0x01	; 1
    4576:	9c 8b       	std	Y+20, r25	; 0x14
    4578:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457a:	8b 89       	ldd	r24, Y+19	; 0x13
    457c:	9c 89       	ldd	r25, Y+20	; 0x14
    457e:	00 97       	sbiw	r24, 0x00	; 0
    4580:	69 f7       	brne	.-38     	; 0x455c <move_bot_p2p+0x168a>
    4582:	14 c0       	rjmp	.+40     	; 0x45ac <move_bot_p2p+0x16da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4584:	6d 89       	ldd	r22, Y+21	; 0x15
    4586:	7e 89       	ldd	r23, Y+22	; 0x16
    4588:	8f 89       	ldd	r24, Y+23	; 0x17
    458a:	98 8d       	ldd	r25, Y+24	; 0x18
    458c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	9c 8b       	std	Y+20, r25	; 0x14
    4596:	8b 8b       	std	Y+19, r24	; 0x13
    4598:	8b 89       	ldd	r24, Y+19	; 0x13
    459a:	9c 89       	ldd	r25, Y+20	; 0x14
    459c:	98 8b       	std	Y+16, r25	; 0x10
    459e:	8f 87       	std	Y+15, r24	; 0x0f
    45a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    45a2:	98 89       	ldd	r25, Y+16	; 0x10
    45a4:	01 97       	sbiw	r24, 0x01	; 1
    45a6:	f1 f7       	brne	.-4      	; 0x45a4 <move_bot_p2p+0x16d2>
    45a8:	98 8b       	std	Y+16, r25	; 0x10
    45aa:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(450);
			velocity(250,250);
    45ac:	8a ef       	ldi	r24, 0xFA	; 250
    45ae:	6a ef       	ldi	r22, 0xFA	; 250
    45b0:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			left();					// takes left turn
    45b4:	0e 94 ab 14 	call	0x2956	; 0x2956 <left>
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	90 e8       	ldi	r25, 0x80	; 128
    45bc:	a9 e0       	ldi	r26, 0x09	; 9
    45be:	b4 e4       	ldi	r27, 0x44	; 68
    45c0:	8b 87       	std	Y+11, r24	; 0x0b
    45c2:	9c 87       	std	Y+12, r25	; 0x0c
    45c4:	ad 87       	std	Y+13, r26	; 0x0d
    45c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    45cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d0:	26 e6       	ldi	r18, 0x66	; 102
    45d2:	36 e6       	ldi	r19, 0x66	; 102
    45d4:	46 e6       	ldi	r20, 0x66	; 102
    45d6:	55 e4       	ldi	r21, 0x45	; 69
    45d8:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	8f 83       	std	Y+7, r24	; 0x07
    45e2:	98 87       	std	Y+8, r25	; 0x08
    45e4:	a9 87       	std	Y+9, r26	; 0x09
    45e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45e8:	6f 81       	ldd	r22, Y+7	; 0x07
    45ea:	78 85       	ldd	r23, Y+8	; 0x08
    45ec:	89 85       	ldd	r24, Y+9	; 0x09
    45ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	40 e8       	ldi	r20, 0x80	; 128
    45f6:	5f e3       	ldi	r21, 0x3F	; 63
    45f8:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    45fc:	88 23       	and	r24, r24
    45fe:	2c f4       	brge	.+10     	; 0x460a <move_bot_p2p+0x1738>
		__ticks = 1;
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	9e 83       	std	Y+6, r25	; 0x06
    4606:	8d 83       	std	Y+5, r24	; 0x05
    4608:	3f c0       	rjmp	.+126    	; 0x4688 <move_bot_p2p+0x17b6>
	else if (__tmp > 65535)
    460a:	6f 81       	ldd	r22, Y+7	; 0x07
    460c:	78 85       	ldd	r23, Y+8	; 0x08
    460e:	89 85       	ldd	r24, Y+9	; 0x09
    4610:	9a 85       	ldd	r25, Y+10	; 0x0a
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	3f ef       	ldi	r19, 0xFF	; 255
    4616:	4f e7       	ldi	r20, 0x7F	; 127
    4618:	57 e4       	ldi	r21, 0x47	; 71
    461a:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    461e:	18 16       	cp	r1, r24
    4620:	4c f5       	brge	.+82     	; 0x4674 <move_bot_p2p+0x17a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4622:	6b 85       	ldd	r22, Y+11	; 0x0b
    4624:	7c 85       	ldd	r23, Y+12	; 0x0c
    4626:	8d 85       	ldd	r24, Y+13	; 0x0d
    4628:	9e 85       	ldd	r25, Y+14	; 0x0e
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	40 e2       	ldi	r20, 0x20	; 32
    4630:	51 e4       	ldi	r21, 0x41	; 65
    4632:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	bc 01       	movw	r22, r24
    463c:	cd 01       	movw	r24, r26
    463e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	9e 83       	std	Y+6, r25	; 0x06
    4648:	8d 83       	std	Y+5, r24	; 0x05
    464a:	0f c0       	rjmp	.+30     	; 0x466a <move_bot_p2p+0x1798>
    464c:	80 e7       	ldi	r24, 0x70	; 112
    464e:	91 e0       	ldi	r25, 0x01	; 1
    4650:	9c 83       	std	Y+4, r25	; 0x04
    4652:	8b 83       	std	Y+3, r24	; 0x03
    4654:	8b 81       	ldd	r24, Y+3	; 0x03
    4656:	9c 81       	ldd	r25, Y+4	; 0x04
    4658:	01 97       	sbiw	r24, 0x01	; 1
    465a:	f1 f7       	brne	.-4      	; 0x4658 <move_bot_p2p+0x1786>
    465c:	9c 83       	std	Y+4, r25	; 0x04
    465e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4660:	8d 81       	ldd	r24, Y+5	; 0x05
    4662:	9e 81       	ldd	r25, Y+6	; 0x06
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	9e 83       	std	Y+6, r25	; 0x06
    4668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466a:	8d 81       	ldd	r24, Y+5	; 0x05
    466c:	9e 81       	ldd	r25, Y+6	; 0x06
    466e:	00 97       	sbiw	r24, 0x00	; 0
    4670:	69 f7       	brne	.-38     	; 0x464c <move_bot_p2p+0x177a>
    4672:	14 c0       	rjmp	.+40     	; 0x469c <move_bot_p2p+0x17ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4674:	6f 81       	ldd	r22, Y+7	; 0x07
    4676:	78 85       	ldd	r23, Y+8	; 0x08
    4678:	89 85       	ldd	r24, Y+9	; 0x09
    467a:	9a 85       	ldd	r25, Y+10	; 0x0a
    467c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	9e 83       	std	Y+6, r25	; 0x06
    4686:	8d 83       	std	Y+5, r24	; 0x05
    4688:	8d 81       	ldd	r24, Y+5	; 0x05
    468a:	9e 81       	ldd	r25, Y+6	; 0x06
    468c:	9a 83       	std	Y+2, r25	; 0x02
    468e:	89 83       	std	Y+1, r24	; 0x01
    4690:	89 81       	ldd	r24, Y+1	; 0x01
    4692:	9a 81       	ldd	r25, Y+2	; 0x02
    4694:	01 97       	sbiw	r24, 0x01	; 1
    4696:	f1 f7       	brne	.-4      	; 0x4694 <move_bot_p2p+0x17c2>
    4698:	9a 83       	std	Y+2, r25	; 0x02
    469a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(550);
			move_dir(1,1);			// takes the last step
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	61 e0       	ldi	r22, 0x01	; 1
    46a2:	70 e0       	ldi	r23, 0x00	; 0
    46a4:	0e 94 ce 14 	call	0x299c	; 0x299c <move_dir>
		}
	}	
}
    46a8:	c8 51       	subi	r28, 0x18	; 24
    46aa:	df 4f       	sbci	r29, 0xFF	; 255
    46ac:	0f b6       	in	r0, 0x3f	; 63
    46ae:	f8 94       	cli
    46b0:	de bf       	out	0x3e, r29	; 62
    46b2:	0f be       	out	0x3f, r0	; 63
    46b4:	cd bf       	out	0x3d, r28	; 61
    46b6:	cf 91       	pop	r28
    46b8:	df 91       	pop	r29
    46ba:	1f 91       	pop	r17
    46bc:	0f 91       	pop	r16
    46be:	08 95       	ret

000046c0 <line_follower>:



//Main Function
void line_follower()
{
    46c0:	df 93       	push	r29
    46c2:	cf 93       	push	r28
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
    46c8:	6c 97       	sbiw	r28, 0x1c	; 28
    46ca:	0f b6       	in	r0, 0x3f	; 63
    46cc:	f8 94       	cli
    46ce:	de bf       	out	0x3e, r29	; 62
    46d0:	0f be       	out	0x3f, r0	; 63
    46d2:	cd bf       	out	0x3d, r28	; 61
	
	forward();
    46d4:	0e 94 8d 14 	call	0x291a	; 0x291a <forward>
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    46d8:	83 e0       	ldi	r24, 0x03	; 3
    46da:	0e 94 01 14 	call	0x2802	; 0x2802 <ADC_Conversion>
    46de:	80 93 0e 03 	sts	0x030E, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    46e2:	82 e0       	ldi	r24, 0x02	; 2
    46e4:	0e 94 01 14 	call	0x2802	; 0x2802 <ADC_Conversion>
    46e8:	80 93 0f 03 	sts	0x030F, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	0e 94 01 14 	call	0x2802	; 0x2802 <ADC_Conversion>
    46f2:	80 93 10 03 	sts	0x0310, r24

		//flag=0;

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	61 e0       	ldi	r22, 0x01	; 1
    46fa:	43 e0       	ldi	r20, 0x03	; 3
    46fc:	0e 94 3b 14 	call	0x2876	; 0x2876 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    4700:	81 e0       	ldi	r24, 0x01	; 1
    4702:	65 e0       	ldi	r22, 0x05	; 5
    4704:	42 e0       	ldi	r20, 0x02	; 2
    4706:	0e 94 3b 14 	call	0x2876	; 0x2876 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	69 e0       	ldi	r22, 0x09	; 9
    470e:	41 e0       	ldi	r20, 0x01	; 1
    4710:	0e 94 3b 14 	call	0x2876	; 0x2876 <print_sensor>
		
		

		if(Left_white_line<0x19 && Center_white_line<0x19 && Right_white_line<0x19)  //www
    4714:	80 91 0e 03 	lds	r24, 0x030E
    4718:	89 31       	cpi	r24, 0x19	; 25
    471a:	68 f4       	brcc	.+26     	; 0x4736 <line_follower+0x76>
    471c:	80 91 0f 03 	lds	r24, 0x030F
    4720:	89 31       	cpi	r24, 0x19	; 25
    4722:	48 f4       	brcc	.+18     	; 0x4736 <line_follower+0x76>
    4724:	80 91 10 03 	lds	r24, 0x0310
    4728:	89 31       	cpi	r24, 0x19	; 25
    472a:	28 f4       	brcc	.+10     	; 0x4736 <line_follower+0x76>
		{
			velocity(150,250);       // Bot moves more left
    472c:	86 e9       	ldi	r24, 0x96	; 150
    472e:	6a ef       	ldi	r22, 0xFA	; 250
    4730:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    4734:	d1 cf       	rjmp	.-94     	; 0x46d8 <line_follower+0x18>
		}

		else if(Left_white_line<0x19 && Center_white_line<0x19 && Right_white_line>0x19)  //wwb -- left
    4736:	80 91 0e 03 	lds	r24, 0x030E
    473a:	89 31       	cpi	r24, 0x19	; 25
    473c:	68 f4       	brcc	.+26     	; 0x4758 <line_follower+0x98>
    473e:	80 91 0f 03 	lds	r24, 0x030F
    4742:	89 31       	cpi	r24, 0x19	; 25
    4744:	48 f4       	brcc	.+18     	; 0x4758 <line_follower+0x98>
    4746:	80 91 10 03 	lds	r24, 0x0310
    474a:	8a 31       	cpi	r24, 0x1A	; 26
    474c:	28 f0       	brcs	.+10     	; 0x4758 <line_follower+0x98>
		{
			velocity(250,200);      // Bot moves right
    474e:	8a ef       	ldi	r24, 0xFA	; 250
    4750:	68 ec       	ldi	r22, 0xC8	; 200
    4752:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    4756:	c0 cf       	rjmp	.-128    	; 0x46d8 <line_follower+0x18>
		}

	    else if(Left_white_line<0x19 && Center_white_line>0x19 && Right_white_line<0x19)  //wbw -- invalid
    4758:	80 91 0e 03 	lds	r24, 0x030E
    475c:	89 31       	cpi	r24, 0x19	; 25
    475e:	68 f4       	brcc	.+26     	; 0x477a <line_follower+0xba>
    4760:	80 91 0f 03 	lds	r24, 0x030F
    4764:	8a 31       	cpi	r24, 0x1A	; 26
    4766:	48 f0       	brcs	.+18     	; 0x477a <line_follower+0xba>
    4768:	80 91 10 03 	lds	r24, 0x0310
    476c:	89 31       	cpi	r24, 0x19	; 25
    476e:	28 f4       	brcc	.+10     	; 0x477a <line_follower+0xba>
		{
			velocity(250,250);     // Bot moves in the same direction
    4770:	8a ef       	ldi	r24, 0xFA	; 250
    4772:	6a ef       	ldi	r22, 0xFA	; 250
    4774:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    4778:	af cf       	rjmp	.-162    	; 0x46d8 <line_follower+0x18>
		}
		
		else if(Left_white_line<0x19 && Center_white_line>0x19 && Right_white_line>0x19)  //wbb -- more left
    477a:	80 91 0e 03 	lds	r24, 0x030E
    477e:	89 31       	cpi	r24, 0x19	; 25
    4780:	68 f4       	brcc	.+26     	; 0x479c <line_follower+0xdc>
    4782:	80 91 0f 03 	lds	r24, 0x030F
    4786:	8a 31       	cpi	r24, 0x1A	; 26
    4788:	48 f0       	brcs	.+18     	; 0x479c <line_follower+0xdc>
    478a:	80 91 10 03 	lds	r24, 0x0310
    478e:	8a 31       	cpi	r24, 0x1A	; 26
    4790:	28 f0       	brcs	.+10     	; 0x479c <line_follower+0xdc>
		{
			velocity(220,200);     // Bot moves slightly towards right
    4792:	8c ed       	ldi	r24, 0xDC	; 220
    4794:	68 ec       	ldi	r22, 0xC8	; 200
    4796:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    479a:	9e cf       	rjmp	.-196    	; 0x46d8 <line_follower+0x18>
		}

		else if(Left_white_line>0x19 && Center_white_line<0x19 && Right_white_line<0x19)  //bww -- right
    479c:	80 91 0e 03 	lds	r24, 0x030E
    47a0:	8a 31       	cpi	r24, 0x1A	; 26
    47a2:	68 f0       	brcs	.+26     	; 0x47be <line_follower+0xfe>
    47a4:	80 91 0f 03 	lds	r24, 0x030F
    47a8:	89 31       	cpi	r24, 0x19	; 25
    47aa:	48 f4       	brcc	.+18     	; 0x47be <line_follower+0xfe>
    47ac:	80 91 10 03 	lds	r24, 0x0310
    47b0:	89 31       	cpi	r24, 0x19	; 25
    47b2:	28 f4       	brcc	.+10     	; 0x47be <line_follower+0xfe>
		{
			velocity(200,250);    // Bot moves left
    47b4:	88 ec       	ldi	r24, 0xC8	; 200
    47b6:	6a ef       	ldi	r22, 0xFA	; 250
    47b8:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    47bc:	8d cf       	rjmp	.-230    	; 0x46d8 <line_follower+0x18>
		}


		else if(Left_white_line>0x19 && Center_white_line<0x19 && Right_white_line>0x19)	 //bwb -- straight
    47be:	80 91 0e 03 	lds	r24, 0x030E
    47c2:	8a 31       	cpi	r24, 0x1A	; 26
    47c4:	68 f0       	brcs	.+26     	; 0x47e0 <line_follower+0x120>
    47c6:	80 91 0f 03 	lds	r24, 0x030F
    47ca:	89 31       	cpi	r24, 0x19	; 25
    47cc:	48 f4       	brcc	.+18     	; 0x47e0 <line_follower+0x120>
    47ce:	80 91 10 03 	lds	r24, 0x0310
    47d2:	8a 31       	cpi	r24, 0x1A	; 26
    47d4:	28 f0       	brcs	.+10     	; 0x47e0 <line_follower+0x120>
		{
			velocity(250,250);    // Bot moves in the same direction
    47d6:	8a ef       	ldi	r24, 0xFA	; 250
    47d8:	6a ef       	ldi	r22, 0xFA	; 250
    47da:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    47de:	7c cf       	rjmp	.-264    	; 0x46d8 <line_follower+0x18>
		}

		else if(Left_white_line>0x19 && Center_white_line>0x19 && Right_white_line<0x19)  //bbw -- more right
    47e0:	80 91 0e 03 	lds	r24, 0x030E
    47e4:	8a 31       	cpi	r24, 0x1A	; 26
    47e6:	68 f0       	brcs	.+26     	; 0x4802 <line_follower+0x142>
    47e8:	80 91 0f 03 	lds	r24, 0x030F
    47ec:	8a 31       	cpi	r24, 0x1A	; 26
    47ee:	48 f0       	brcs	.+18     	; 0x4802 <line_follower+0x142>
    47f0:	80 91 10 03 	lds	r24, 0x0310
    47f4:	89 31       	cpi	r24, 0x19	; 25
    47f6:	28 f4       	brcc	.+10     	; 0x4802 <line_follower+0x142>
		{
			velocity(200,220);    // Bot moves slightly towards left
    47f8:	88 ec       	ldi	r24, 0xC8	; 200
    47fa:	6c ed       	ldi	r22, 0xDC	; 220
    47fc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    4800:	6b cf       	rjmp	.-298    	; 0x46d8 <line_follower+0x18>
		}

		else if(Left_white_line>0x19 && Center_white_line>0x19 && Right_white_line>0x19)  //bbb
    4802:	80 91 0e 03 	lds	r24, 0x030E
    4806:	8a 31       	cpi	r24, 0x1A	; 26
    4808:	08 f4       	brcc	.+2      	; 0x480c <line_follower+0x14c>
    480a:	66 cf       	rjmp	.-308    	; 0x46d8 <line_follower+0x18>
    480c:	80 91 0f 03 	lds	r24, 0x030F
    4810:	8a 31       	cpi	r24, 0x1A	; 26
    4812:	08 f4       	brcc	.+2      	; 0x4816 <line_follower+0x156>
    4814:	61 cf       	rjmp	.-318    	; 0x46d8 <line_follower+0x18>
    4816:	80 91 10 03 	lds	r24, 0x0310
    481a:	8a 31       	cpi	r24, 0x1A	; 26
    481c:	08 f4       	brcc	.+2      	; 0x4820 <line_follower+0x160>
    481e:	5c cf       	rjmp	.-328    	; 0x46d8 <line_follower+0x18>
		{
			//_delay_ms(450);
			//left();
			//_delay_ms(550);			

			velocity(0,0);     // Reached the checkpoint 
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	60 e0       	ldi	r22, 0x00	; 0
    4824:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
			stop();
    4828:	0e 94 a1 14 	call	0x2942	; 0x2942 <stop>
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	aa ef       	ldi	r26, 0xFA	; 250
    4832:	b3 e4       	ldi	r27, 0x43	; 67
    4834:	89 8f       	std	Y+25, r24	; 0x19
    4836:	9a 8f       	std	Y+26, r25	; 0x1a
    4838:	ab 8f       	std	Y+27, r26	; 0x1b
    483a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    483c:	69 8d       	ldd	r22, Y+25	; 0x19
    483e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4840:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4842:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4844:	26 e6       	ldi	r18, 0x66	; 102
    4846:	36 e6       	ldi	r19, 0x66	; 102
    4848:	46 e6       	ldi	r20, 0x66	; 102
    484a:	55 e4       	ldi	r21, 0x45	; 69
    484c:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	8d 8b       	std	Y+21, r24	; 0x15
    4856:	9e 8b       	std	Y+22, r25	; 0x16
    4858:	af 8b       	std	Y+23, r26	; 0x17
    485a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    485c:	6d 89       	ldd	r22, Y+21	; 0x15
    485e:	7e 89       	ldd	r23, Y+22	; 0x16
    4860:	8f 89       	ldd	r24, Y+23	; 0x17
    4862:	98 8d       	ldd	r25, Y+24	; 0x18
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	40 e8       	ldi	r20, 0x80	; 128
    486a:	5f e3       	ldi	r21, 0x3F	; 63
    486c:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    4870:	88 23       	and	r24, r24
    4872:	2c f4       	brge	.+10     	; 0x487e <line_follower+0x1be>
		__ticks = 1;
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	9c 8b       	std	Y+20, r25	; 0x14
    487a:	8b 8b       	std	Y+19, r24	; 0x13
    487c:	3f c0       	rjmp	.+126    	; 0x48fc <line_follower+0x23c>
	else if (__tmp > 65535)
    487e:	6d 89       	ldd	r22, Y+21	; 0x15
    4880:	7e 89       	ldd	r23, Y+22	; 0x16
    4882:	8f 89       	ldd	r24, Y+23	; 0x17
    4884:	98 8d       	ldd	r25, Y+24	; 0x18
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	3f ef       	ldi	r19, 0xFF	; 255
    488a:	4f e7       	ldi	r20, 0x7F	; 127
    488c:	57 e4       	ldi	r21, 0x47	; 71
    488e:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    4892:	18 16       	cp	r1, r24
    4894:	4c f5       	brge	.+82     	; 0x48e8 <line_follower+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4896:	69 8d       	ldd	r22, Y+25	; 0x19
    4898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    489a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    489c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	40 e2       	ldi	r20, 0x20	; 32
    48a4:	51 e4       	ldi	r21, 0x41	; 65
    48a6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	bc 01       	movw	r22, r24
    48b0:	cd 01       	movw	r24, r26
    48b2:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	9c 8b       	std	Y+20, r25	; 0x14
    48bc:	8b 8b       	std	Y+19, r24	; 0x13
    48be:	0f c0       	rjmp	.+30     	; 0x48de <line_follower+0x21e>
    48c0:	80 e7       	ldi	r24, 0x70	; 112
    48c2:	91 e0       	ldi	r25, 0x01	; 1
    48c4:	9a 8b       	std	Y+18, r25	; 0x12
    48c6:	89 8b       	std	Y+17, r24	; 0x11
    48c8:	89 89       	ldd	r24, Y+17	; 0x11
    48ca:	9a 89       	ldd	r25, Y+18	; 0x12
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	f1 f7       	brne	.-4      	; 0x48cc <line_follower+0x20c>
    48d0:	9a 8b       	std	Y+18, r25	; 0x12
    48d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48d4:	8b 89       	ldd	r24, Y+19	; 0x13
    48d6:	9c 89       	ldd	r25, Y+20	; 0x14
    48d8:	01 97       	sbiw	r24, 0x01	; 1
    48da:	9c 8b       	std	Y+20, r25	; 0x14
    48dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48de:	8b 89       	ldd	r24, Y+19	; 0x13
    48e0:	9c 89       	ldd	r25, Y+20	; 0x14
    48e2:	00 97       	sbiw	r24, 0x00	; 0
    48e4:	69 f7       	brne	.-38     	; 0x48c0 <line_follower+0x200>
    48e6:	14 c0       	rjmp	.+40     	; 0x4910 <line_follower+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48e8:	6d 89       	ldd	r22, Y+21	; 0x15
    48ea:	7e 89       	ldd	r23, Y+22	; 0x16
    48ec:	8f 89       	ldd	r24, Y+23	; 0x17
    48ee:	98 8d       	ldd	r25, Y+24	; 0x18
    48f0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	9c 8b       	std	Y+20, r25	; 0x14
    48fa:	8b 8b       	std	Y+19, r24	; 0x13
    48fc:	8b 89       	ldd	r24, Y+19	; 0x13
    48fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4900:	98 8b       	std	Y+16, r25	; 0x10
    4902:	8f 87       	std	Y+15, r24	; 0x0f
    4904:	8f 85       	ldd	r24, Y+15	; 0x0f
    4906:	98 89       	ldd	r25, Y+16	; 0x10
    4908:	01 97       	sbiw	r24, 0x01	; 1
    490a:	f1 f7       	brne	.-4      	; 0x4908 <line_follower+0x248>
    490c:	98 8b       	std	Y+16, r25	; 0x10
    490e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			row_found++;		// Incrementing the row number
    4910:	80 91 11 03 	lds	r24, 0x0311
    4914:	8f 5f       	subi	r24, 0xFF	; 255
    4916:	80 93 11 03 	sts	0x0311, r24

			if (row_found==MAX_ROW)
    491a:	90 91 11 03 	lds	r25, 0x0311
    491e:	80 91 04 02 	lds	r24, 0x0204
    4922:	98 17       	cp	r25, r24
    4924:	71 f4       	brne	.+28     	; 0x4942 <line_follower+0x282>
				//_delay_ms(250);
				//right();
				//_delay_ms(1350);
				//velocity(0,0);
				//move_dir(MAX_ROW-1,1);
				end_reached = 1;
    4926:	81 e0       	ldi	r24, 0x01	; 1
    4928:	80 93 14 03 	sts	0x0314, r24
				//velocity(250,250);
				//forward();
				//_delay_ms(450);
				//right();
				//_delay_ms(1350);
				velocity(0,0);
    492c:	80 e0       	ldi	r24, 0x00	; 0
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
				//right();
				//_delay_ms(550);
				row_found=0;
    4934:	10 92 11 03 	sts	0x0311, r1
				col_found++;
    4938:	80 91 12 03 	lds	r24, 0x0312
    493c:	8f 5f       	subi	r24, 0xFF	; 255
    493e:	80 93 12 03 	sts	0x0312, r24
					
				}
			}

*/
			UDR0 = 0x31;
    4942:	e6 ec       	ldi	r30, 0xC6	; 198
    4944:	f0 e0       	ldi	r31, 0x00	; 0
    4946:	81 e3       	ldi	r24, 0x31	; 49
    4948:	80 83       	st	Z, r24
    494a:	80 e0       	ldi	r24, 0x00	; 0
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	aa ef       	ldi	r26, 0xFA	; 250
    4950:	b3 e4       	ldi	r27, 0x43	; 67
    4952:	8b 87       	std	Y+11, r24	; 0x0b
    4954:	9c 87       	std	Y+12, r25	; 0x0c
    4956:	ad 87       	std	Y+13, r26	; 0x0d
    4958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    495a:	6b 85       	ldd	r22, Y+11	; 0x0b
    495c:	7c 85       	ldd	r23, Y+12	; 0x0c
    495e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4960:	9e 85       	ldd	r25, Y+14	; 0x0e
    4962:	26 e6       	ldi	r18, 0x66	; 102
    4964:	36 e6       	ldi	r19, 0x66	; 102
    4966:	46 e6       	ldi	r20, 0x66	; 102
    4968:	55 e4       	ldi	r21, 0x45	; 69
    496a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	8f 83       	std	Y+7, r24	; 0x07
    4974:	98 87       	std	Y+8, r25	; 0x08
    4976:	a9 87       	std	Y+9, r26	; 0x09
    4978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    497a:	6f 81       	ldd	r22, Y+7	; 0x07
    497c:	78 85       	ldd	r23, Y+8	; 0x08
    497e:	89 85       	ldd	r24, Y+9	; 0x09
    4980:	9a 85       	ldd	r25, Y+10	; 0x0a
    4982:	20 e0       	ldi	r18, 0x00	; 0
    4984:	30 e0       	ldi	r19, 0x00	; 0
    4986:	40 e8       	ldi	r20, 0x80	; 128
    4988:	5f e3       	ldi	r21, 0x3F	; 63
    498a:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    498e:	88 23       	and	r24, r24
    4990:	2c f4       	brge	.+10     	; 0x499c <line_follower+0x2dc>
		__ticks = 1;
    4992:	81 e0       	ldi	r24, 0x01	; 1
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	9e 83       	std	Y+6, r25	; 0x06
    4998:	8d 83       	std	Y+5, r24	; 0x05
    499a:	3f c0       	rjmp	.+126    	; 0x4a1a <line_follower+0x35a>
	else if (__tmp > 65535)
    499c:	6f 81       	ldd	r22, Y+7	; 0x07
    499e:	78 85       	ldd	r23, Y+8	; 0x08
    49a0:	89 85       	ldd	r24, Y+9	; 0x09
    49a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	3f ef       	ldi	r19, 0xFF	; 255
    49a8:	4f e7       	ldi	r20, 0x7F	; 127
    49aa:	57 e4       	ldi	r21, 0x47	; 71
    49ac:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    49b0:	18 16       	cp	r1, r24
    49b2:	4c f5       	brge	.+82     	; 0x4a06 <line_follower+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    49b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    49b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	40 e2       	ldi	r20, 0x20	; 32
    49c2:	51 e4       	ldi	r21, 0x41	; 65
    49c4:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	bc 01       	movw	r22, r24
    49ce:	cd 01       	movw	r24, r26
    49d0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    49d4:	dc 01       	movw	r26, r24
    49d6:	cb 01       	movw	r24, r22
    49d8:	9e 83       	std	Y+6, r25	; 0x06
    49da:	8d 83       	std	Y+5, r24	; 0x05
    49dc:	0f c0       	rjmp	.+30     	; 0x49fc <line_follower+0x33c>
    49de:	80 e7       	ldi	r24, 0x70	; 112
    49e0:	91 e0       	ldi	r25, 0x01	; 1
    49e2:	9c 83       	std	Y+4, r25	; 0x04
    49e4:	8b 83       	std	Y+3, r24	; 0x03
    49e6:	8b 81       	ldd	r24, Y+3	; 0x03
    49e8:	9c 81       	ldd	r25, Y+4	; 0x04
    49ea:	01 97       	sbiw	r24, 0x01	; 1
    49ec:	f1 f7       	brne	.-4      	; 0x49ea <line_follower+0x32a>
    49ee:	9c 83       	std	Y+4, r25	; 0x04
    49f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49f2:	8d 81       	ldd	r24, Y+5	; 0x05
    49f4:	9e 81       	ldd	r25, Y+6	; 0x06
    49f6:	01 97       	sbiw	r24, 0x01	; 1
    49f8:	9e 83       	std	Y+6, r25	; 0x06
    49fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49fc:	8d 81       	ldd	r24, Y+5	; 0x05
    49fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4a00:	00 97       	sbiw	r24, 0x00	; 0
    4a02:	69 f7       	brne	.-38     	; 0x49de <line_follower+0x31e>
    4a04:	14 c0       	rjmp	.+40     	; 0x4a2e <line_follower+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a06:	6f 81       	ldd	r22, Y+7	; 0x07
    4a08:	78 85       	ldd	r23, Y+8	; 0x08
    4a0a:	89 85       	ldd	r24, Y+9	; 0x09
    4a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a0e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    4a12:	dc 01       	movw	r26, r24
    4a14:	cb 01       	movw	r24, r22
    4a16:	9e 83       	std	Y+6, r25	; 0x06
    4a18:	8d 83       	std	Y+5, r24	; 0x05
    4a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a1e:	9a 83       	std	Y+2, r25	; 0x02
    4a20:	89 83       	std	Y+1, r24	; 0x01
    4a22:	89 81       	ldd	r24, Y+1	; 0x01
    4a24:	9a 81       	ldd	r25, Y+2	; 0x02
    4a26:	01 97       	sbiw	r24, 0x01	; 1
    4a28:	f1 f7       	brne	.-4      	; 0x4a26 <line_follower+0x366>
    4a2a:	9a 83       	std	Y+2, r25	; 0x02
    4a2c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			break;
		}

		//_delay_ms(1);
	}
    4a2e:	6c 96       	adiw	r28, 0x1c	; 28
    4a30:	0f b6       	in	r0, 0x3f	; 63
    4a32:	f8 94       	cli
    4a34:	de bf       	out	0x3e, r29	; 62
    4a36:	0f be       	out	0x3f, r0	; 63
    4a38:	cd bf       	out	0x3d, r28	; 61
    4a3a:	cf 91       	pop	r28
    4a3c:	df 91       	pop	r29
    4a3e:	08 95       	ret

00004a40 <buzzer_pin_config>:
unsigned char bot_mode = 0;	//1 for monitoring mode , 2 for plucking mode
unsigned char row_read_mode = 0; //to read row for plucking mode
unsigned char col_read_mode = 0; //to read row for plucking mode

void buzzer_pin_config (void)
{
    4a40:	df 93       	push	r29
    4a42:	cf 93       	push	r28
    4a44:	cd b7       	in	r28, 0x3d	; 61
    4a46:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    4a48:	a7 e2       	ldi	r26, 0x27	; 39
    4a4a:	b0 e0       	ldi	r27, 0x00	; 0
    4a4c:	e7 e2       	ldi	r30, 0x27	; 39
    4a4e:	f0 e0       	ldi	r31, 0x00	; 0
    4a50:	80 81       	ld	r24, Z
    4a52:	88 60       	ori	r24, 0x08	; 8
    4a54:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    4a56:	a8 e2       	ldi	r26, 0x28	; 40
    4a58:	b0 e0       	ldi	r27, 0x00	; 0
    4a5a:	e8 e2       	ldi	r30, 0x28	; 40
    4a5c:	f0 e0       	ldi	r31, 0x00	; 0
    4a5e:	80 81       	ld	r24, Z
    4a60:	87 7f       	andi	r24, 0xF7	; 247
    4a62:	8c 93       	st	X, r24
}
    4a64:	cf 91       	pop	r28
    4a66:	df 91       	pop	r29
    4a68:	08 95       	ret

00004a6a <motion_pin_config>:

void motion_pin_config (void)
{
    4a6a:	df 93       	push	r29
    4a6c:	cf 93       	push	r28
    4a6e:	cd b7       	in	r28, 0x3d	; 61
    4a70:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    4a72:	a1 e2       	ldi	r26, 0x21	; 33
    4a74:	b0 e0       	ldi	r27, 0x00	; 0
    4a76:	e1 e2       	ldi	r30, 0x21	; 33
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	80 81       	ld	r24, Z
    4a7c:	8f 60       	ori	r24, 0x0F	; 15
    4a7e:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    4a80:	a2 e2       	ldi	r26, 0x22	; 34
    4a82:	b0 e0       	ldi	r27, 0x00	; 0
    4a84:	e2 e2       	ldi	r30, 0x22	; 34
    4a86:	f0 e0       	ldi	r31, 0x00	; 0
    4a88:	80 81       	ld	r24, Z
    4a8a:	80 7f       	andi	r24, 0xF0	; 240
    4a8c:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    4a8e:	aa e0       	ldi	r26, 0x0A	; 10
    4a90:	b1 e0       	ldi	r27, 0x01	; 1
    4a92:	ea e0       	ldi	r30, 0x0A	; 10
    4a94:	f1 e0       	ldi	r31, 0x01	; 1
    4a96:	80 81       	ld	r24, Z
    4a98:	88 61       	ori	r24, 0x18	; 24
    4a9a:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    4a9c:	ab e0       	ldi	r26, 0x0B	; 11
    4a9e:	b1 e0       	ldi	r27, 0x01	; 1
    4aa0:	eb e0       	ldi	r30, 0x0B	; 11
    4aa2:	f1 e0       	ldi	r31, 0x01	; 1
    4aa4:	80 81       	ld	r24, Z
    4aa6:	88 61       	ori	r24, 0x18	; 24
    4aa8:	8c 93       	st	X, r24
}
    4aaa:	cf 91       	pop	r28
    4aac:	df 91       	pop	r29
    4aae:	08 95       	ret

00004ab0 <port_init>:

//Function to initialize ports
void port_init()
{
    4ab0:	df 93       	push	r29
    4ab2:	cf 93       	push	r28
    4ab4:	cd b7       	in	r28, 0x3d	; 61
    4ab6:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
    4ab8:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <motion_pin_config>
	buzzer_pin_config();
    4abc:	0e 94 20 25 	call	0x4a40	; 0x4a40 <buzzer_pin_config>
}
    4ac0:	cf 91       	pop	r28
    4ac2:	df 91       	pop	r29
    4ac4:	08 95       	ret

00004ac6 <buzzer_on>:

void buzzer_on (void)
{
    4ac6:	df 93       	push	r29
    4ac8:	cf 93       	push	r28
    4aca:	0f 92       	push	r0
    4acc:	cd b7       	in	r28, 0x3d	; 61
    4ace:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    4ad0:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    4ad2:	e6 e2       	ldi	r30, 0x26	; 38
    4ad4:	f0 e0       	ldi	r31, 0x00	; 0
    4ad6:	80 81       	ld	r24, Z
    4ad8:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    4ada:	89 81       	ldd	r24, Y+1	; 0x01
    4adc:	88 60       	ori	r24, 0x08	; 8
    4ade:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    4ae0:	e8 e2       	ldi	r30, 0x28	; 40
    4ae2:	f0 e0       	ldi	r31, 0x00	; 0
    4ae4:	89 81       	ldd	r24, Y+1	; 0x01
    4ae6:	80 83       	st	Z, r24
}
    4ae8:	0f 90       	pop	r0
    4aea:	cf 91       	pop	r28
    4aec:	df 91       	pop	r29
    4aee:	08 95       	ret

00004af0 <buzzer_off>:

void buzzer_off (void)
{
    4af0:	df 93       	push	r29
    4af2:	cf 93       	push	r28
    4af4:	0f 92       	push	r0
    4af6:	cd b7       	in	r28, 0x3d	; 61
    4af8:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    4afa:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    4afc:	e6 e2       	ldi	r30, 0x26	; 38
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	80 81       	ld	r24, Z
    4b02:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	87 7f       	andi	r24, 0xF7	; 247
    4b08:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    4b0a:	e8 e2       	ldi	r30, 0x28	; 40
    4b0c:	f0 e0       	ldi	r31, 0x00	; 0
    4b0e:	89 81       	ldd	r24, Y+1	; 0x01
    4b10:	80 83       	st	Z, r24
}
    4b12:	0f 90       	pop	r0
    4b14:	cf 91       	pop	r28
    4b16:	df 91       	pop	r29
    4b18:	08 95       	ret

00004b1a <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    4b1a:	df 93       	push	r29
    4b1c:	cf 93       	push	r28
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    4b22:	e1 ec       	ldi	r30, 0xC1	; 193
    4b24:	f0 e0       	ldi	r31, 0x00	; 0
    4b26:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    4b28:	e0 ec       	ldi	r30, 0xC0	; 192
    4b2a:	f0 e0       	ldi	r31, 0x00	; 0
    4b2c:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    4b2e:	e2 ec       	ldi	r30, 0xC2	; 194
    4b30:	f0 e0       	ldi	r31, 0x00	; 0
    4b32:	86 e0       	ldi	r24, 0x06	; 6
    4b34:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
    4b36:	e4 ec       	ldi	r30, 0xC4	; 196
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	8f e5       	ldi	r24, 0x5F	; 95
    4b3c:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    4b3e:	e5 ec       	ldi	r30, 0xC5	; 197
    4b40:	f0 e0       	ldi	r31, 0x00	; 0
    4b42:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    4b44:	e1 ec       	ldi	r30, 0xC1	; 193
    4b46:	f0 e0       	ldi	r31, 0x00	; 0
    4b48:	88 e9       	ldi	r24, 0x98	; 152
    4b4a:	80 83       	st	Z, r24
}
    4b4c:	cf 91       	pop	r28
    4b4e:	df 91       	pop	r29
    4b50:	08 95       	ret

00004b52 <__vector_25>:

	

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    4b52:	1f 92       	push	r1
    4b54:	0f 92       	push	r0
    4b56:	0f b6       	in	r0, 0x3f	; 63
    4b58:	0f 92       	push	r0
    4b5a:	00 90 5b 00 	lds	r0, 0x005B
    4b5e:	0f 92       	push	r0
    4b60:	11 24       	eor	r1, r1
    4b62:	0f 93       	push	r16
    4b64:	1f 93       	push	r17
    4b66:	2f 93       	push	r18
    4b68:	3f 93       	push	r19
    4b6a:	4f 93       	push	r20
    4b6c:	5f 93       	push	r21
    4b6e:	6f 93       	push	r22
    4b70:	7f 93       	push	r23
    4b72:	8f 93       	push	r24
    4b74:	9f 93       	push	r25
    4b76:	af 93       	push	r26
    4b78:	bf 93       	push	r27
    4b7a:	ef 93       	push	r30
    4b7c:	ff 93       	push	r31
    4b7e:	df 93       	push	r29
    4b80:	cf 93       	push	r28
    4b82:	cd b7       	in	r28, 0x3d	; 61
    4b84:	de b7       	in	r29, 0x3e	; 62
    4b86:	c4 5b       	subi	r28, 0xB4	; 180
    4b88:	d0 40       	sbci	r29, 0x00	; 0
    4b8a:	de bf       	out	0x3e, r29	; 62
    4b8c:	cd bf       	out	0x3d, r28	; 61
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable 
    4b8e:	e6 ec       	ldi	r30, 0xC6	; 198
    4b90:	f0 e0       	ldi	r31, 0x00	; 0
    4b92:	80 81       	ld	r24, Z
    4b94:	80 93 3a 03 	sts	0x033A, r24

	//UDR0 = data; 				//echo data back to PC
	

		/*read the row from serial port and move to column read mode*/
		if (row_read_mode == 1)
    4b98:	80 91 24 03 	lds	r24, 0x0324
    4b9c:	81 30       	cpi	r24, 0x01	; 1
    4b9e:	81 f4       	brne	.+32     	; 0x4bc0 <__vector_25+0x6e>
		{
			row_no = (int)data -48; //read the row value
    4ba0:	80 91 3a 03 	lds	r24, 0x033A
    4ba4:	88 2f       	mov	r24, r24
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	c0 97       	sbiw	r24, 0x30	; 48
    4baa:	90 93 20 03 	sts	0x0320, r25
    4bae:	80 93 1f 03 	sts	0x031F, r24
			col_read_mode = 1;		//move to column read mode
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	80 93 25 03 	sts	0x0325, r24
			row_read_mode = 0;
    4bb8:	10 92 24 03 	sts	0x0324, r1
    4bbc:	0c 94 84 30 	jmp	0x6108	; 0x6108 <__vector_25+0x15b6>
		}

		else if (col_read_mode == 1)
    4bc0:	80 91 25 03 	lds	r24, 0x0325
    4bc4:	81 30       	cpi	r24, 0x01	; 1
    4bc6:	91 f5       	brne	.+100    	; 0x4c2c <__vector_25+0xda>
		{
			col_no = (int)data - 48;	//read the column value
    4bc8:	80 91 3a 03 	lds	r24, 0x033A
    4bcc:	88 2f       	mov	r24, r24
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	c0 97       	sbiw	r24, 0x30	; 48
    4bd2:	90 93 22 03 	sts	0x0322, r25
    4bd6:	80 93 21 03 	sts	0x0321, r24
			col_read_mode = 0;
    4bda:	10 92 25 03 	sts	0x0325, r1
			lcd_print(1, 1, row_no, 3);	//print row value on first line of lcd	
    4bde:	20 91 1f 03 	lds	r18, 0x031F
    4be2:	30 91 20 03 	lds	r19, 0x0320
    4be6:	81 e0       	ldi	r24, 0x01	; 1
    4be8:	61 e0       	ldi	r22, 0x01	; 1
    4bea:	a9 01       	movw	r20, r18
    4bec:	23 e0       	ldi	r18, 0x03	; 3
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	0e 94 7d 12 	call	0x24fa	; 0x24fa <lcd_print>
			lcd_print(2, 1, col_no, 3);	//print column value on second line of lcd
    4bf4:	20 91 21 03 	lds	r18, 0x0321
    4bf8:	30 91 22 03 	lds	r19, 0x0322
    4bfc:	82 e0       	ldi	r24, 0x02	; 2
    4bfe:	61 e0       	ldi	r22, 0x01	; 1
    4c00:	a9 01       	movw	r20, r18
    4c02:	23 e0       	ldi	r18, 0x03	; 3
    4c04:	30 e0       	ldi	r19, 0x00	; 0
    4c06:	0e 94 7d 12 	call	0x24fa	; 0x24fa <lcd_print>
			move_bot(row_no, col_no);	//move the bot to given row and column
    4c0a:	80 91 1f 03 	lds	r24, 0x031F
    4c0e:	90 91 20 03 	lds	r25, 0x0320
    4c12:	20 91 21 03 	lds	r18, 0x0321
    4c16:	30 91 22 03 	lds	r19, 0x0322
    4c1a:	b9 01       	movw	r22, r18
    4c1c:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <move_bot>
			UDR0 = 0x31;				//send success signal
    4c20:	e6 ec       	ldi	r30, 0xC6	; 198
    4c22:	f0 e0       	ldi	r31, 0x00	; 0
    4c24:	81 e3       	ldi	r24, 0x31	; 49
    4c26:	80 83       	st	Z, r24
    4c28:	0c 94 84 30 	jmp	0x6108	; 0x6108 <__vector_25+0x15b6>

		}
		
		/*used to read x and y values of tomato center, each 3 digit*/
		else if (num_read_mode == 1)	//to read x val
    4c2c:	80 91 17 03 	lds	r24, 0x0317
    4c30:	90 91 18 03 	lds	r25, 0x0318
    4c34:	81 30       	cpi	r24, 0x01	; 1
    4c36:	91 05       	cpc	r25, r1
    4c38:	09 f0       	breq	.+2      	; 0x4c3c <__vector_25+0xea>
    4c3a:	7a c0       	rjmp	.+244    	; 0x4d30 <__vector_25+0x1de>
		{
		 	if (count==0)
    4c3c:	80 91 19 03 	lds	r24, 0x0319
    4c40:	90 91 1a 03 	lds	r25, 0x031A
    4c44:	00 97       	sbiw	r24, 0x00	; 0
    4c46:	79 f4       	brne	.+30     	; 0x4c66 <__vector_25+0x114>
			{
				sum_x+= ((int)data-48);	//add units digit of x	
    4c48:	80 91 3a 03 	lds	r24, 0x033A
    4c4c:	28 2f       	mov	r18, r24
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	80 91 1b 03 	lds	r24, 0x031B
    4c54:	90 91 1c 03 	lds	r25, 0x031C
    4c58:	82 0f       	add	r24, r18
    4c5a:	93 1f       	adc	r25, r19
    4c5c:	c0 97       	sbiw	r24, 0x30	; 48
    4c5e:	90 93 1c 03 	sts	0x031C, r25
    4c62:	80 93 1b 03 	sts	0x031B, r24
			}
			
			if (count==1)
    4c66:	80 91 19 03 	lds	r24, 0x0319
    4c6a:	90 91 1a 03 	lds	r25, 0x031A
    4c6e:	81 30       	cpi	r24, 0x01	; 1
    4c70:	91 05       	cpc	r25, r1
    4c72:	d9 f4       	brne	.+54     	; 0x4caa <__vector_25+0x158>
			{
				sum_x+= ((int)data-48)*10;	//add tens digit of x
    4c74:	80 91 3a 03 	lds	r24, 0x033A
    4c78:	88 2f       	mov	r24, r24
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	9c 01       	movw	r18, r24
    4c7e:	22 0f       	add	r18, r18
    4c80:	33 1f       	adc	r19, r19
    4c82:	c9 01       	movw	r24, r18
    4c84:	88 0f       	add	r24, r24
    4c86:	99 1f       	adc	r25, r25
    4c88:	88 0f       	add	r24, r24
    4c8a:	99 1f       	adc	r25, r25
    4c8c:	82 0f       	add	r24, r18
    4c8e:	93 1f       	adc	r25, r19
    4c90:	9c 01       	movw	r18, r24
    4c92:	80 91 1b 03 	lds	r24, 0x031B
    4c96:	90 91 1c 03 	lds	r25, 0x031C
    4c9a:	82 0f       	add	r24, r18
    4c9c:	93 1f       	adc	r25, r19
    4c9e:	80 5e       	subi	r24, 0xE0	; 224
    4ca0:	91 40       	sbci	r25, 0x01	; 1
    4ca2:	90 93 1c 03 	sts	0x031C, r25
    4ca6:	80 93 1b 03 	sts	0x031B, r24
			}

			if (count==2)
    4caa:	80 91 19 03 	lds	r24, 0x0319
    4cae:	90 91 1a 03 	lds	r25, 0x031A
    4cb2:	82 30       	cpi	r24, 0x02	; 2
    4cb4:	91 05       	cpc	r25, r1
    4cb6:	61 f5       	brne	.+88     	; 0x4d10 <__vector_25+0x1be>
			{
				sum_x+= ((int)data-48)*100;	//add hundred's digit of x
    4cb8:	80 91 3a 03 	lds	r24, 0x033A
    4cbc:	28 2f       	mov	r18, r24
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	84 e6       	ldi	r24, 0x64	; 100
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	ac 01       	movw	r20, r24
    4cc6:	24 9f       	mul	r18, r20
    4cc8:	c0 01       	movw	r24, r0
    4cca:	25 9f       	mul	r18, r21
    4ccc:	90 0d       	add	r25, r0
    4cce:	34 9f       	mul	r19, r20
    4cd0:	90 0d       	add	r25, r0
    4cd2:	11 24       	eor	r1, r1
    4cd4:	9c 01       	movw	r18, r24
    4cd6:	80 91 1b 03 	lds	r24, 0x031B
    4cda:	90 91 1c 03 	lds	r25, 0x031C
    4cde:	82 0f       	add	r24, r18
    4ce0:	93 1f       	adc	r25, r19
    4ce2:	80 5c       	subi	r24, 0xC0	; 192
    4ce4:	92 41       	sbci	r25, 0x12	; 18
    4ce6:	90 93 1c 03 	sts	0x031C, r25
    4cea:	80 93 1b 03 	sts	0x031B, r24
				lcd_print(1, 1, sum_x, 3);	//print the x value detected
    4cee:	20 91 1b 03 	lds	r18, 0x031B
    4cf2:	30 91 1c 03 	lds	r19, 0x031C
    4cf6:	81 e0       	ldi	r24, 0x01	; 1
    4cf8:	61 e0       	ldi	r22, 0x01	; 1
    4cfa:	a9 01       	movw	r20, r18
    4cfc:	23 e0       	ldi	r18, 0x03	; 3
    4cfe:	30 e0       	ldi	r19, 0x00	; 0
    4d00:	0e 94 7d 12 	call	0x24fa	; 0x24fa <lcd_print>
				num_read_mode = 2;			//go to read y_value
    4d04:	82 e0       	ldi	r24, 0x02	; 2
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	90 93 18 03 	sts	0x0318, r25
    4d0c:	80 93 17 03 	sts	0x0317, r24
			} 

			count = (count+1)%3;
    4d10:	80 91 19 03 	lds	r24, 0x0319
    4d14:	90 91 1a 03 	lds	r25, 0x031A
    4d18:	01 96       	adiw	r24, 0x01	; 1
    4d1a:	23 e0       	ldi	r18, 0x03	; 3
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	b9 01       	movw	r22, r18
    4d20:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    4d24:	90 93 1a 03 	sts	0x031A, r25
    4d28:	80 93 19 03 	sts	0x0319, r24
    4d2c:	0c 94 84 30 	jmp	0x6108	; 0x6108 <__vector_25+0x15b6>
		}	
		

		else if (num_read_mode ==2)		//to read y value
    4d30:	80 91 17 03 	lds	r24, 0x0317
    4d34:	90 91 18 03 	lds	r25, 0x0318
    4d38:	82 30       	cpi	r24, 0x02	; 2
    4d3a:	91 05       	cpc	r25, r1
    4d3c:	09 f0       	breq	.+2      	; 0x4d40 <__vector_25+0x1ee>
    4d3e:	8e c3       	rjmp	.+1820   	; 0x545c <__vector_25+0x90a>
		{
		 	if (count==0)
    4d40:	80 91 19 03 	lds	r24, 0x0319
    4d44:	90 91 1a 03 	lds	r25, 0x031A
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	79 f4       	brne	.+30     	; 0x4d6a <__vector_25+0x218>
			{
				sum_y+= ((int)data-48);	//add units digit of y
    4d4c:	80 91 3a 03 	lds	r24, 0x033A
    4d50:	28 2f       	mov	r18, r24
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	80 91 1d 03 	lds	r24, 0x031D
    4d58:	90 91 1e 03 	lds	r25, 0x031E
    4d5c:	82 0f       	add	r24, r18
    4d5e:	93 1f       	adc	r25, r19
    4d60:	c0 97       	sbiw	r24, 0x30	; 48
    4d62:	90 93 1e 03 	sts	0x031E, r25
    4d66:	80 93 1d 03 	sts	0x031D, r24
			}
			
			if (count==1)
    4d6a:	80 91 19 03 	lds	r24, 0x0319
    4d6e:	90 91 1a 03 	lds	r25, 0x031A
    4d72:	81 30       	cpi	r24, 0x01	; 1
    4d74:	91 05       	cpc	r25, r1
    4d76:	d9 f4       	brne	.+54     	; 0x4dae <__vector_25+0x25c>
			{
				sum_y+= ((int)data-48)*10;	//add tens digit of x
    4d78:	80 91 3a 03 	lds	r24, 0x033A
    4d7c:	88 2f       	mov	r24, r24
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	9c 01       	movw	r18, r24
    4d82:	22 0f       	add	r18, r18
    4d84:	33 1f       	adc	r19, r19
    4d86:	c9 01       	movw	r24, r18
    4d88:	88 0f       	add	r24, r24
    4d8a:	99 1f       	adc	r25, r25
    4d8c:	88 0f       	add	r24, r24
    4d8e:	99 1f       	adc	r25, r25
    4d90:	82 0f       	add	r24, r18
    4d92:	93 1f       	adc	r25, r19
    4d94:	9c 01       	movw	r18, r24
    4d96:	80 91 1d 03 	lds	r24, 0x031D
    4d9a:	90 91 1e 03 	lds	r25, 0x031E
    4d9e:	82 0f       	add	r24, r18
    4da0:	93 1f       	adc	r25, r19
    4da2:	80 5e       	subi	r24, 0xE0	; 224
    4da4:	91 40       	sbci	r25, 0x01	; 1
    4da6:	90 93 1e 03 	sts	0x031E, r25
    4daa:	80 93 1d 03 	sts	0x031D, r24
			}

			if (count==2)
    4dae:	80 91 19 03 	lds	r24, 0x0319
    4db2:	90 91 1a 03 	lds	r25, 0x031A
    4db6:	82 30       	cpi	r24, 0x02	; 2
    4db8:	91 05       	cpc	r25, r1
    4dba:	09 f0       	breq	.+2      	; 0x4dbe <__vector_25+0x26c>
    4dbc:	40 c3       	rjmp	.+1664   	; 0x543e <__vector_25+0x8ec>
			{
				sum_y+= ((int)data-48)*100;	//add tens digit of x
    4dbe:	80 91 3a 03 	lds	r24, 0x033A
    4dc2:	28 2f       	mov	r18, r24
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	84 e6       	ldi	r24, 0x64	; 100
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	fc 01       	movw	r30, r24
    4dcc:	2e 9f       	mul	r18, r30
    4dce:	c0 01       	movw	r24, r0
    4dd0:	2f 9f       	mul	r18, r31
    4dd2:	90 0d       	add	r25, r0
    4dd4:	3e 9f       	mul	r19, r30
    4dd6:	90 0d       	add	r25, r0
    4dd8:	11 24       	eor	r1, r1
    4dda:	9c 01       	movw	r18, r24
    4ddc:	80 91 1d 03 	lds	r24, 0x031D
    4de0:	90 91 1e 03 	lds	r25, 0x031E
    4de4:	82 0f       	add	r24, r18
    4de6:	93 1f       	adc	r25, r19
    4de8:	80 5c       	subi	r24, 0xC0	; 192
    4dea:	92 41       	sbci	r25, 0x12	; 18
    4dec:	90 93 1e 03 	sts	0x031E, r25
    4df0:	80 93 1d 03 	sts	0x031D, r24
				lcd_print(2, 1, sum_y, 3);	//print detected y value
    4df4:	20 91 1d 03 	lds	r18, 0x031D
    4df8:	30 91 1e 03 	lds	r19, 0x031E
    4dfc:	82 e0       	ldi	r24, 0x02	; 2
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	a9 01       	movw	r20, r18
    4e02:	23 e0       	ldi	r18, 0x03	; 3
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	0e 94 7d 12 	call	0x24fa	; 0x24fa <lcd_print>

				//checks if tomato center is in center of window, within certain range
				if (sum_x<=MAX_X/2+75 && sum_x>=MAX_X/2-75 && sum_y<=MAX_Y/2+75 && sum_y>=MAX_Y/2-75)
    4e0a:	80 91 00 02 	lds	r24, 0x0200
    4e0e:	90 91 01 02 	lds	r25, 0x0201
    4e12:	c3 55       	subi	r28, 0x53	; 83
    4e14:	df 4f       	sbci	r29, 0xFF	; 255
    4e16:	99 83       	std	Y+1, r25	; 0x01
    4e18:	88 83       	st	Y, r24
    4e1a:	cd 5a       	subi	r28, 0xAD	; 173
    4e1c:	d0 40       	sbci	r29, 0x00	; 0
    4e1e:	c3 55       	subi	r28, 0x53	; 83
    4e20:	df 4f       	sbci	r29, 0xFF	; 255
    4e22:	48 81       	ld	r20, Y
    4e24:	59 81       	ldd	r21, Y+1	; 0x01
    4e26:	cd 5a       	subi	r28, 0xAD	; 173
    4e28:	d0 40       	sbci	r29, 0x00	; 0
    4e2a:	55 23       	and	r21, r21
    4e2c:	6c f4       	brge	.+26     	; 0x4e48 <__vector_25+0x2f6>
    4e2e:	c3 55       	subi	r28, 0x53	; 83
    4e30:	df 4f       	sbci	r29, 0xFF	; 255
    4e32:	88 81       	ld	r24, Y
    4e34:	99 81       	ldd	r25, Y+1	; 0x01
    4e36:	cd 5a       	subi	r28, 0xAD	; 173
    4e38:	d0 40       	sbci	r29, 0x00	; 0
    4e3a:	01 96       	adiw	r24, 0x01	; 1
    4e3c:	c3 55       	subi	r28, 0x53	; 83
    4e3e:	df 4f       	sbci	r29, 0xFF	; 255
    4e40:	99 83       	std	Y+1, r25	; 0x01
    4e42:	88 83       	st	Y, r24
    4e44:	cd 5a       	subi	r28, 0xAD	; 173
    4e46:	d0 40       	sbci	r29, 0x00	; 0
    4e48:	c3 55       	subi	r28, 0x53	; 83
    4e4a:	df 4f       	sbci	r29, 0xFF	; 255
    4e4c:	88 81       	ld	r24, Y
    4e4e:	99 81       	ldd	r25, Y+1	; 0x01
    4e50:	cd 5a       	subi	r28, 0xAD	; 173
    4e52:	d0 40       	sbci	r29, 0x00	; 0
    4e54:	95 95       	asr	r25
    4e56:	87 95       	ror	r24
    4e58:	85 5b       	subi	r24, 0xB5	; 181
    4e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e5c:	9c 01       	movw	r18, r24
    4e5e:	80 91 1b 03 	lds	r24, 0x031B
    4e62:	90 91 1c 03 	lds	r25, 0x031C
    4e66:	28 17       	cp	r18, r24
    4e68:	39 07       	cpc	r19, r25
    4e6a:	08 f4       	brcc	.+2      	; 0x4e6e <__vector_25+0x31c>
    4e6c:	19 c2       	rjmp	.+1074   	; 0x52a0 <__vector_25+0x74e>
    4e6e:	80 91 00 02 	lds	r24, 0x0200
    4e72:	90 91 01 02 	lds	r25, 0x0201
    4e76:	c1 55       	subi	r28, 0x51	; 81
    4e78:	df 4f       	sbci	r29, 0xFF	; 255
    4e7a:	99 83       	std	Y+1, r25	; 0x01
    4e7c:	88 83       	st	Y, r24
    4e7e:	cf 5a       	subi	r28, 0xAF	; 175
    4e80:	d0 40       	sbci	r29, 0x00	; 0
    4e82:	c1 55       	subi	r28, 0x51	; 81
    4e84:	df 4f       	sbci	r29, 0xFF	; 255
    4e86:	e8 81       	ld	r30, Y
    4e88:	f9 81       	ldd	r31, Y+1	; 0x01
    4e8a:	cf 5a       	subi	r28, 0xAF	; 175
    4e8c:	d0 40       	sbci	r29, 0x00	; 0
    4e8e:	ff 23       	and	r31, r31
    4e90:	74 f4       	brge	.+28     	; 0x4eae <__vector_25+0x35c>
    4e92:	c1 55       	subi	r28, 0x51	; 81
    4e94:	df 4f       	sbci	r29, 0xFF	; 255
    4e96:	48 81       	ld	r20, Y
    4e98:	59 81       	ldd	r21, Y+1	; 0x01
    4e9a:	cf 5a       	subi	r28, 0xAF	; 175
    4e9c:	d0 40       	sbci	r29, 0x00	; 0
    4e9e:	4f 5f       	subi	r20, 0xFF	; 255
    4ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea2:	c1 55       	subi	r28, 0x51	; 81
    4ea4:	df 4f       	sbci	r29, 0xFF	; 255
    4ea6:	59 83       	std	Y+1, r21	; 0x01
    4ea8:	48 83       	st	Y, r20
    4eaa:	cf 5a       	subi	r28, 0xAF	; 175
    4eac:	d0 40       	sbci	r29, 0x00	; 0
    4eae:	c1 55       	subi	r28, 0x51	; 81
    4eb0:	df 4f       	sbci	r29, 0xFF	; 255
    4eb2:	88 81       	ld	r24, Y
    4eb4:	99 81       	ldd	r25, Y+1	; 0x01
    4eb6:	cf 5a       	subi	r28, 0xAF	; 175
    4eb8:	d0 40       	sbci	r29, 0x00	; 0
    4eba:	95 95       	asr	r25
    4ebc:	87 95       	ror	r24
    4ebe:	8b 54       	subi	r24, 0x4B	; 75
    4ec0:	90 40       	sbci	r25, 0x00	; 0
    4ec2:	9c 01       	movw	r18, r24
    4ec4:	80 91 1b 03 	lds	r24, 0x031B
    4ec8:	90 91 1c 03 	lds	r25, 0x031C
    4ecc:	82 17       	cp	r24, r18
    4ece:	93 07       	cpc	r25, r19
    4ed0:	08 f4       	brcc	.+2      	; 0x4ed4 <__vector_25+0x382>
    4ed2:	e6 c1       	rjmp	.+972    	; 0x52a0 <__vector_25+0x74e>
    4ed4:	80 91 02 02 	lds	r24, 0x0202
    4ed8:	90 91 03 02 	lds	r25, 0x0203
    4edc:	cf 54       	subi	r28, 0x4F	; 79
    4ede:	df 4f       	sbci	r29, 0xFF	; 255
    4ee0:	99 83       	std	Y+1, r25	; 0x01
    4ee2:	88 83       	st	Y, r24
    4ee4:	c1 5b       	subi	r28, 0xB1	; 177
    4ee6:	d0 40       	sbci	r29, 0x00	; 0
    4ee8:	cf 54       	subi	r28, 0x4F	; 79
    4eea:	df 4f       	sbci	r29, 0xFF	; 255
    4eec:	88 81       	ld	r24, Y
    4eee:	99 81       	ldd	r25, Y+1	; 0x01
    4ef0:	c1 5b       	subi	r28, 0xB1	; 177
    4ef2:	d0 40       	sbci	r29, 0x00	; 0
    4ef4:	99 23       	and	r25, r25
    4ef6:	6c f4       	brge	.+26     	; 0x4f12 <__vector_25+0x3c0>
    4ef8:	cf 54       	subi	r28, 0x4F	; 79
    4efa:	df 4f       	sbci	r29, 0xFF	; 255
    4efc:	e8 81       	ld	r30, Y
    4efe:	f9 81       	ldd	r31, Y+1	; 0x01
    4f00:	c1 5b       	subi	r28, 0xB1	; 177
    4f02:	d0 40       	sbci	r29, 0x00	; 0
    4f04:	31 96       	adiw	r30, 0x01	; 1
    4f06:	cf 54       	subi	r28, 0x4F	; 79
    4f08:	df 4f       	sbci	r29, 0xFF	; 255
    4f0a:	f9 83       	std	Y+1, r31	; 0x01
    4f0c:	e8 83       	st	Y, r30
    4f0e:	c1 5b       	subi	r28, 0xB1	; 177
    4f10:	d0 40       	sbci	r29, 0x00	; 0
    4f12:	cf 54       	subi	r28, 0x4F	; 79
    4f14:	df 4f       	sbci	r29, 0xFF	; 255
    4f16:	88 81       	ld	r24, Y
    4f18:	99 81       	ldd	r25, Y+1	; 0x01
    4f1a:	c1 5b       	subi	r28, 0xB1	; 177
    4f1c:	d0 40       	sbci	r29, 0x00	; 0
    4f1e:	95 95       	asr	r25
    4f20:	87 95       	ror	r24
    4f22:	85 5b       	subi	r24, 0xB5	; 181
    4f24:	9f 4f       	sbci	r25, 0xFF	; 255
    4f26:	9c 01       	movw	r18, r24
    4f28:	80 91 1d 03 	lds	r24, 0x031D
    4f2c:	90 91 1e 03 	lds	r25, 0x031E
    4f30:	28 17       	cp	r18, r24
    4f32:	39 07       	cpc	r19, r25
    4f34:	08 f4       	brcc	.+2      	; 0x4f38 <__vector_25+0x3e6>
    4f36:	b4 c1       	rjmp	.+872    	; 0x52a0 <__vector_25+0x74e>
    4f38:	80 91 02 02 	lds	r24, 0x0202
    4f3c:	90 91 03 02 	lds	r25, 0x0203
    4f40:	cd 54       	subi	r28, 0x4D	; 77
    4f42:	df 4f       	sbci	r29, 0xFF	; 255
    4f44:	99 83       	std	Y+1, r25	; 0x01
    4f46:	88 83       	st	Y, r24
    4f48:	c3 5b       	subi	r28, 0xB3	; 179
    4f4a:	d0 40       	sbci	r29, 0x00	; 0
    4f4c:	cd 54       	subi	r28, 0x4D	; 77
    4f4e:	df 4f       	sbci	r29, 0xFF	; 255
    4f50:	48 81       	ld	r20, Y
    4f52:	59 81       	ldd	r21, Y+1	; 0x01
    4f54:	c3 5b       	subi	r28, 0xB3	; 179
    4f56:	d0 40       	sbci	r29, 0x00	; 0
    4f58:	55 23       	and	r21, r21
    4f5a:	6c f4       	brge	.+26     	; 0x4f76 <__vector_25+0x424>
    4f5c:	cd 54       	subi	r28, 0x4D	; 77
    4f5e:	df 4f       	sbci	r29, 0xFF	; 255
    4f60:	88 81       	ld	r24, Y
    4f62:	99 81       	ldd	r25, Y+1	; 0x01
    4f64:	c3 5b       	subi	r28, 0xB3	; 179
    4f66:	d0 40       	sbci	r29, 0x00	; 0
    4f68:	01 96       	adiw	r24, 0x01	; 1
    4f6a:	cd 54       	subi	r28, 0x4D	; 77
    4f6c:	df 4f       	sbci	r29, 0xFF	; 255
    4f6e:	99 83       	std	Y+1, r25	; 0x01
    4f70:	88 83       	st	Y, r24
    4f72:	c3 5b       	subi	r28, 0xB3	; 179
    4f74:	d0 40       	sbci	r29, 0x00	; 0
    4f76:	cd 54       	subi	r28, 0x4D	; 77
    4f78:	df 4f       	sbci	r29, 0xFF	; 255
    4f7a:	88 81       	ld	r24, Y
    4f7c:	99 81       	ldd	r25, Y+1	; 0x01
    4f7e:	c3 5b       	subi	r28, 0xB3	; 179
    4f80:	d0 40       	sbci	r29, 0x00	; 0
    4f82:	95 95       	asr	r25
    4f84:	87 95       	ror	r24
    4f86:	8b 54       	subi	r24, 0x4B	; 75
    4f88:	90 40       	sbci	r25, 0x00	; 0
    4f8a:	9c 01       	movw	r18, r24
    4f8c:	80 91 1d 03 	lds	r24, 0x031D
    4f90:	90 91 1e 03 	lds	r25, 0x031E
    4f94:	82 17       	cp	r24, r18
    4f96:	93 07       	cpc	r25, r19
    4f98:	08 f4       	brcc	.+2      	; 0x4f9c <__vector_25+0x44a>
    4f9a:	82 c1       	rjmp	.+772    	; 0x52a0 <__vector_25+0x74e>
				{
					UDR0 = 0x32;	//send sucess, stop detecting
    4f9c:	e6 ec       	ldi	r30, 0xC6	; 198
    4f9e:	f0 e0       	ldi	r31, 0x00	; 0
    4fa0:	82 e3       	ldi	r24, 0x32	; 50
    4fa2:	80 83       	st	Z, r24
    4fa4:	fe 01       	movw	r30, r28
    4fa6:	eb 55       	subi	r30, 0x5B	; 91
    4fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4faa:	80 e0       	ldi	r24, 0x00	; 0
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	aa ef       	ldi	r26, 0xFA	; 250
    4fb0:	b4 e4       	ldi	r27, 0x44	; 68
    4fb2:	80 83       	st	Z, r24
    4fb4:	91 83       	std	Z+1, r25	; 0x01
    4fb6:	a2 83       	std	Z+2, r26	; 0x02
    4fb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fba:	8e 01       	movw	r16, r28
    4fbc:	0f 55       	subi	r16, 0x5F	; 95
    4fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc0:	fe 01       	movw	r30, r28
    4fc2:	eb 55       	subi	r30, 0x5B	; 91
    4fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc6:	60 81       	ld	r22, Z
    4fc8:	71 81       	ldd	r23, Z+1	; 0x01
    4fca:	82 81       	ldd	r24, Z+2	; 0x02
    4fcc:	93 81       	ldd	r25, Z+3	; 0x03
    4fce:	26 e6       	ldi	r18, 0x66	; 102
    4fd0:	36 e6       	ldi	r19, 0x66	; 102
    4fd2:	46 e6       	ldi	r20, 0x66	; 102
    4fd4:	55 e4       	ldi	r21, 0x45	; 69
    4fd6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    4fda:	dc 01       	movw	r26, r24
    4fdc:	cb 01       	movw	r24, r22
    4fde:	f8 01       	movw	r30, r16
    4fe0:	80 83       	st	Z, r24
    4fe2:	91 83       	std	Z+1, r25	; 0x01
    4fe4:	a2 83       	std	Z+2, r26	; 0x02
    4fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fe8:	fe 01       	movw	r30, r28
    4fea:	ef 55       	subi	r30, 0x5F	; 95
    4fec:	ff 4f       	sbci	r31, 0xFF	; 255
    4fee:	60 81       	ld	r22, Z
    4ff0:	71 81       	ldd	r23, Z+1	; 0x01
    4ff2:	82 81       	ldd	r24, Z+2	; 0x02
    4ff4:	93 81       	ldd	r25, Z+3	; 0x03
    4ff6:	20 e0       	ldi	r18, 0x00	; 0
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	40 e8       	ldi	r20, 0x80	; 128
    4ffc:	5f e3       	ldi	r21, 0x3F	; 63
    4ffe:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5002:	88 23       	and	r24, r24
    5004:	44 f4       	brge	.+16     	; 0x5016 <__vector_25+0x4c4>
		__ticks = 1;
    5006:	fe 01       	movw	r30, r28
    5008:	e1 56       	subi	r30, 0x61	; 97
    500a:	ff 4f       	sbci	r31, 0xFF	; 255
    500c:	81 e0       	ldi	r24, 0x01	; 1
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	91 83       	std	Z+1, r25	; 0x01
    5012:	80 83       	st	Z, r24
    5014:	64 c0       	rjmp	.+200    	; 0x50de <__vector_25+0x58c>
	else if (__tmp > 65535)
    5016:	fe 01       	movw	r30, r28
    5018:	ef 55       	subi	r30, 0x5F	; 95
    501a:	ff 4f       	sbci	r31, 0xFF	; 255
    501c:	60 81       	ld	r22, Z
    501e:	71 81       	ldd	r23, Z+1	; 0x01
    5020:	82 81       	ldd	r24, Z+2	; 0x02
    5022:	93 81       	ldd	r25, Z+3	; 0x03
    5024:	20 e0       	ldi	r18, 0x00	; 0
    5026:	3f ef       	ldi	r19, 0xFF	; 255
    5028:	4f e7       	ldi	r20, 0x7F	; 127
    502a:	57 e4       	ldi	r21, 0x47	; 71
    502c:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5030:	18 16       	cp	r1, r24
    5032:	0c f0       	brlt	.+2      	; 0x5036 <__vector_25+0x4e4>
    5034:	43 c0       	rjmp	.+134    	; 0x50bc <__vector_25+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5036:	fe 01       	movw	r30, r28
    5038:	eb 55       	subi	r30, 0x5B	; 91
    503a:	ff 4f       	sbci	r31, 0xFF	; 255
    503c:	60 81       	ld	r22, Z
    503e:	71 81       	ldd	r23, Z+1	; 0x01
    5040:	82 81       	ldd	r24, Z+2	; 0x02
    5042:	93 81       	ldd	r25, Z+3	; 0x03
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	40 e2       	ldi	r20, 0x20	; 32
    504a:	51 e4       	ldi	r21, 0x41	; 65
    504c:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5050:	dc 01       	movw	r26, r24
    5052:	cb 01       	movw	r24, r22
    5054:	8e 01       	movw	r16, r28
    5056:	01 56       	subi	r16, 0x61	; 97
    5058:	1f 4f       	sbci	r17, 0xFF	; 255
    505a:	bc 01       	movw	r22, r24
    505c:	cd 01       	movw	r24, r26
    505e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5062:	dc 01       	movw	r26, r24
    5064:	cb 01       	movw	r24, r22
    5066:	f8 01       	movw	r30, r16
    5068:	91 83       	std	Z+1, r25	; 0x01
    506a:	80 83       	st	Z, r24
    506c:	1f c0       	rjmp	.+62     	; 0x50ac <__vector_25+0x55a>
    506e:	fe 01       	movw	r30, r28
    5070:	e3 56       	subi	r30, 0x63	; 99
    5072:	ff 4f       	sbci	r31, 0xFF	; 255
    5074:	80 e7       	ldi	r24, 0x70	; 112
    5076:	91 e0       	ldi	r25, 0x01	; 1
    5078:	91 83       	std	Z+1, r25	; 0x01
    507a:	80 83       	st	Z, r24
    507c:	fe 01       	movw	r30, r28
    507e:	e3 56       	subi	r30, 0x63	; 99
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	80 81       	ld	r24, Z
    5084:	91 81       	ldd	r25, Z+1	; 0x01
    5086:	01 97       	sbiw	r24, 0x01	; 1
    5088:	f1 f7       	brne	.-4      	; 0x5086 <__vector_25+0x534>
    508a:	fe 01       	movw	r30, r28
    508c:	e3 56       	subi	r30, 0x63	; 99
    508e:	ff 4f       	sbci	r31, 0xFF	; 255
    5090:	91 83       	std	Z+1, r25	; 0x01
    5092:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5094:	de 01       	movw	r26, r28
    5096:	a1 56       	subi	r26, 0x61	; 97
    5098:	bf 4f       	sbci	r27, 0xFF	; 255
    509a:	fe 01       	movw	r30, r28
    509c:	e1 56       	subi	r30, 0x61	; 97
    509e:	ff 4f       	sbci	r31, 0xFF	; 255
    50a0:	80 81       	ld	r24, Z
    50a2:	91 81       	ldd	r25, Z+1	; 0x01
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	11 96       	adiw	r26, 0x01	; 1
    50a8:	9c 93       	st	X, r25
    50aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50ac:	fe 01       	movw	r30, r28
    50ae:	e1 56       	subi	r30, 0x61	; 97
    50b0:	ff 4f       	sbci	r31, 0xFF	; 255
    50b2:	80 81       	ld	r24, Z
    50b4:	91 81       	ldd	r25, Z+1	; 0x01
    50b6:	00 97       	sbiw	r24, 0x00	; 0
    50b8:	d1 f6       	brne	.-76     	; 0x506e <__vector_25+0x51c>
    50ba:	27 c0       	rjmp	.+78     	; 0x510a <__vector_25+0x5b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50bc:	8e 01       	movw	r16, r28
    50be:	01 56       	subi	r16, 0x61	; 97
    50c0:	1f 4f       	sbci	r17, 0xFF	; 255
    50c2:	fe 01       	movw	r30, r28
    50c4:	ef 55       	subi	r30, 0x5F	; 95
    50c6:	ff 4f       	sbci	r31, 0xFF	; 255
    50c8:	60 81       	ld	r22, Z
    50ca:	71 81       	ldd	r23, Z+1	; 0x01
    50cc:	82 81       	ldd	r24, Z+2	; 0x02
    50ce:	93 81       	ldd	r25, Z+3	; 0x03
    50d0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	f8 01       	movw	r30, r16
    50da:	91 83       	std	Z+1, r25	; 0x01
    50dc:	80 83       	st	Z, r24
    50de:	de 01       	movw	r26, r28
    50e0:	a5 56       	subi	r26, 0x65	; 101
    50e2:	bf 4f       	sbci	r27, 0xFF	; 255
    50e4:	fe 01       	movw	r30, r28
    50e6:	e1 56       	subi	r30, 0x61	; 97
    50e8:	ff 4f       	sbci	r31, 0xFF	; 255
    50ea:	80 81       	ld	r24, Z
    50ec:	91 81       	ldd	r25, Z+1	; 0x01
    50ee:	8d 93       	st	X+, r24
    50f0:	9c 93       	st	X, r25
    50f2:	fe 01       	movw	r30, r28
    50f4:	e5 56       	subi	r30, 0x65	; 101
    50f6:	ff 4f       	sbci	r31, 0xFF	; 255
    50f8:	80 81       	ld	r24, Z
    50fa:	91 81       	ldd	r25, Z+1	; 0x01
    50fc:	01 97       	sbiw	r24, 0x01	; 1
    50fe:	f1 f7       	brne	.-4      	; 0x50fc <__vector_25+0x5aa>
    5100:	fe 01       	movw	r30, r28
    5102:	e5 56       	subi	r30, 0x65	; 101
    5104:	ff 4f       	sbci	r31, 0xFF	; 255
    5106:	91 83       	std	Z+1, r25	; 0x01
    5108:	80 83       	st	Z, r24
					_delay_ms(2000);
					buzzer_on();	
    510a:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <buzzer_on>
    510e:	fe 01       	movw	r30, r28
    5110:	e9 56       	subi	r30, 0x69	; 105
    5112:	ff 4f       	sbci	r31, 0xFF	; 255
    5114:	80 e0       	ldi	r24, 0x00	; 0
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	aa ef       	ldi	r26, 0xFA	; 250
    511a:	b4 e4       	ldi	r27, 0x44	; 68
    511c:	80 83       	st	Z, r24
    511e:	91 83       	std	Z+1, r25	; 0x01
    5120:	a2 83       	std	Z+2, r26	; 0x02
    5122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5124:	8e 01       	movw	r16, r28
    5126:	0d 56       	subi	r16, 0x6D	; 109
    5128:	1f 4f       	sbci	r17, 0xFF	; 255
    512a:	fe 01       	movw	r30, r28
    512c:	e9 56       	subi	r30, 0x69	; 105
    512e:	ff 4f       	sbci	r31, 0xFF	; 255
    5130:	60 81       	ld	r22, Z
    5132:	71 81       	ldd	r23, Z+1	; 0x01
    5134:	82 81       	ldd	r24, Z+2	; 0x02
    5136:	93 81       	ldd	r25, Z+3	; 0x03
    5138:	26 e6       	ldi	r18, 0x66	; 102
    513a:	36 e6       	ldi	r19, 0x66	; 102
    513c:	46 e6       	ldi	r20, 0x66	; 102
    513e:	55 e4       	ldi	r21, 0x45	; 69
    5140:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	f8 01       	movw	r30, r16
    514a:	80 83       	st	Z, r24
    514c:	91 83       	std	Z+1, r25	; 0x01
    514e:	a2 83       	std	Z+2, r26	; 0x02
    5150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5152:	fe 01       	movw	r30, r28
    5154:	ed 56       	subi	r30, 0x6D	; 109
    5156:	ff 4f       	sbci	r31, 0xFF	; 255
    5158:	60 81       	ld	r22, Z
    515a:	71 81       	ldd	r23, Z+1	; 0x01
    515c:	82 81       	ldd	r24, Z+2	; 0x02
    515e:	93 81       	ldd	r25, Z+3	; 0x03
    5160:	20 e0       	ldi	r18, 0x00	; 0
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	40 e8       	ldi	r20, 0x80	; 128
    5166:	5f e3       	ldi	r21, 0x3F	; 63
    5168:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    516c:	88 23       	and	r24, r24
    516e:	44 f4       	brge	.+16     	; 0x5180 <__vector_25+0x62e>
		__ticks = 1;
    5170:	fe 01       	movw	r30, r28
    5172:	ef 56       	subi	r30, 0x6F	; 111
    5174:	ff 4f       	sbci	r31, 0xFF	; 255
    5176:	81 e0       	ldi	r24, 0x01	; 1
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	91 83       	std	Z+1, r25	; 0x01
    517c:	80 83       	st	Z, r24
    517e:	64 c0       	rjmp	.+200    	; 0x5248 <__vector_25+0x6f6>
	else if (__tmp > 65535)
    5180:	fe 01       	movw	r30, r28
    5182:	ed 56       	subi	r30, 0x6D	; 109
    5184:	ff 4f       	sbci	r31, 0xFF	; 255
    5186:	60 81       	ld	r22, Z
    5188:	71 81       	ldd	r23, Z+1	; 0x01
    518a:	82 81       	ldd	r24, Z+2	; 0x02
    518c:	93 81       	ldd	r25, Z+3	; 0x03
    518e:	20 e0       	ldi	r18, 0x00	; 0
    5190:	3f ef       	ldi	r19, 0xFF	; 255
    5192:	4f e7       	ldi	r20, 0x7F	; 127
    5194:	57 e4       	ldi	r21, 0x47	; 71
    5196:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    519a:	18 16       	cp	r1, r24
    519c:	0c f0       	brlt	.+2      	; 0x51a0 <__vector_25+0x64e>
    519e:	43 c0       	rjmp	.+134    	; 0x5226 <__vector_25+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51a0:	fe 01       	movw	r30, r28
    51a2:	e9 56       	subi	r30, 0x69	; 105
    51a4:	ff 4f       	sbci	r31, 0xFF	; 255
    51a6:	60 81       	ld	r22, Z
    51a8:	71 81       	ldd	r23, Z+1	; 0x01
    51aa:	82 81       	ldd	r24, Z+2	; 0x02
    51ac:	93 81       	ldd	r25, Z+3	; 0x03
    51ae:	20 e0       	ldi	r18, 0x00	; 0
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	40 e2       	ldi	r20, 0x20	; 32
    51b4:	51 e4       	ldi	r21, 0x41	; 65
    51b6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    51ba:	dc 01       	movw	r26, r24
    51bc:	cb 01       	movw	r24, r22
    51be:	8e 01       	movw	r16, r28
    51c0:	0f 56       	subi	r16, 0x6F	; 111
    51c2:	1f 4f       	sbci	r17, 0xFF	; 255
    51c4:	bc 01       	movw	r22, r24
    51c6:	cd 01       	movw	r24, r26
    51c8:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	f8 01       	movw	r30, r16
    51d2:	91 83       	std	Z+1, r25	; 0x01
    51d4:	80 83       	st	Z, r24
    51d6:	1f c0       	rjmp	.+62     	; 0x5216 <__vector_25+0x6c4>
    51d8:	fe 01       	movw	r30, r28
    51da:	e1 57       	subi	r30, 0x71	; 113
    51dc:	ff 4f       	sbci	r31, 0xFF	; 255
    51de:	80 e7       	ldi	r24, 0x70	; 112
    51e0:	91 e0       	ldi	r25, 0x01	; 1
    51e2:	91 83       	std	Z+1, r25	; 0x01
    51e4:	80 83       	st	Z, r24
    51e6:	fe 01       	movw	r30, r28
    51e8:	e1 57       	subi	r30, 0x71	; 113
    51ea:	ff 4f       	sbci	r31, 0xFF	; 255
    51ec:	80 81       	ld	r24, Z
    51ee:	91 81       	ldd	r25, Z+1	; 0x01
    51f0:	01 97       	sbiw	r24, 0x01	; 1
    51f2:	f1 f7       	brne	.-4      	; 0x51f0 <__vector_25+0x69e>
    51f4:	fe 01       	movw	r30, r28
    51f6:	e1 57       	subi	r30, 0x71	; 113
    51f8:	ff 4f       	sbci	r31, 0xFF	; 255
    51fa:	91 83       	std	Z+1, r25	; 0x01
    51fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51fe:	de 01       	movw	r26, r28
    5200:	af 56       	subi	r26, 0x6F	; 111
    5202:	bf 4f       	sbci	r27, 0xFF	; 255
    5204:	fe 01       	movw	r30, r28
    5206:	ef 56       	subi	r30, 0x6F	; 111
    5208:	ff 4f       	sbci	r31, 0xFF	; 255
    520a:	80 81       	ld	r24, Z
    520c:	91 81       	ldd	r25, Z+1	; 0x01
    520e:	01 97       	sbiw	r24, 0x01	; 1
    5210:	11 96       	adiw	r26, 0x01	; 1
    5212:	9c 93       	st	X, r25
    5214:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5216:	fe 01       	movw	r30, r28
    5218:	ef 56       	subi	r30, 0x6F	; 111
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	80 81       	ld	r24, Z
    521e:	91 81       	ldd	r25, Z+1	; 0x01
    5220:	00 97       	sbiw	r24, 0x00	; 0
    5222:	d1 f6       	brne	.-76     	; 0x51d8 <__vector_25+0x686>
    5224:	27 c0       	rjmp	.+78     	; 0x5274 <__vector_25+0x722>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5226:	8e 01       	movw	r16, r28
    5228:	0f 56       	subi	r16, 0x6F	; 111
    522a:	1f 4f       	sbci	r17, 0xFF	; 255
    522c:	fe 01       	movw	r30, r28
    522e:	ed 56       	subi	r30, 0x6D	; 109
    5230:	ff 4f       	sbci	r31, 0xFF	; 255
    5232:	60 81       	ld	r22, Z
    5234:	71 81       	ldd	r23, Z+1	; 0x01
    5236:	82 81       	ldd	r24, Z+2	; 0x02
    5238:	93 81       	ldd	r25, Z+3	; 0x03
    523a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    523e:	dc 01       	movw	r26, r24
    5240:	cb 01       	movw	r24, r22
    5242:	f8 01       	movw	r30, r16
    5244:	91 83       	std	Z+1, r25	; 0x01
    5246:	80 83       	st	Z, r24
    5248:	de 01       	movw	r26, r28
    524a:	a3 57       	subi	r26, 0x73	; 115
    524c:	bf 4f       	sbci	r27, 0xFF	; 255
    524e:	fe 01       	movw	r30, r28
    5250:	ef 56       	subi	r30, 0x6F	; 111
    5252:	ff 4f       	sbci	r31, 0xFF	; 255
    5254:	80 81       	ld	r24, Z
    5256:	91 81       	ldd	r25, Z+1	; 0x01
    5258:	8d 93       	st	X+, r24
    525a:	9c 93       	st	X, r25
    525c:	fe 01       	movw	r30, r28
    525e:	e3 57       	subi	r30, 0x73	; 115
    5260:	ff 4f       	sbci	r31, 0xFF	; 255
    5262:	80 81       	ld	r24, Z
    5264:	91 81       	ldd	r25, Z+1	; 0x01
    5266:	01 97       	sbiw	r24, 0x01	; 1
    5268:	f1 f7       	brne	.-4      	; 0x5266 <__vector_25+0x714>
    526a:	fe 01       	movw	r30, r28
    526c:	e3 57       	subi	r30, 0x73	; 115
    526e:	ff 4f       	sbci	r31, 0xFF	; 255
    5270:	91 83       	std	Z+1, r25	; 0x01
    5272:	80 83       	st	Z, r24
					_delay_ms(2000);
					buzzer_off();
    5274:	0e 94 78 25 	call	0x4af0	; 0x4af0 <buzzer_off>
					pluck_fruit();	//call the pluck fruit,which cuts
    5278:	0e 94 42 09 	call	0x1284	; 0x1284 <pluck_fruit>
    527c:	09 c0       	rjmp	.+18     	; 0x5290 <__vector_25+0x73e>
					while (initial_angle>5)
					{
						initial_angle-=5;	//pulls down
    527e:	80 91 35 03 	lds	r24, 0x0335
    5282:	85 50       	subi	r24, 0x05	; 5
    5284:	80 93 35 03 	sts	0x0335, r24
						servo_2(initial_angle);
    5288:	80 91 35 03 	lds	r24, 0x0335
    528c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
					_delay_ms(2000);
					buzzer_on();	
					_delay_ms(2000);
					buzzer_off();
					pluck_fruit();	//call the pluck fruit,which cuts
					while (initial_angle>5)
    5290:	80 91 35 03 	lds	r24, 0x0335
    5294:	86 30       	cpi	r24, 0x06	; 6
    5296:	98 f7       	brcc	.-26     	; 0x527e <__vector_25+0x72c>
					{
						initial_angle-=5;	//pulls down
						servo_2(initial_angle);
					}
					servo_3(60);	
    5298:	8c e3       	ldi	r24, 0x3C	; 60
    529a:	0e 94 c7 01 	call	0x38e	; 0x38e <servo_3>
    529e:	c3 c0       	rjmp	.+390    	; 0x5426 <__vector_25+0x8d4>
				}
				else
				{	 
					align_center(sum_x,sum_y);	//if not in center, call align center
    52a0:	80 91 1b 03 	lds	r24, 0x031B
    52a4:	90 91 1c 03 	lds	r25, 0x031C
    52a8:	20 91 1d 03 	lds	r18, 0x031D
    52ac:	30 91 1e 03 	lds	r19, 0x031E
    52b0:	b9 01       	movw	r22, r18
    52b2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <align_center>
    52b6:	fe 01       	movw	r30, r28
    52b8:	e7 57       	subi	r30, 0x77	; 119
    52ba:	ff 4f       	sbci	r31, 0xFF	; 255
    52bc:	80 e0       	ldi	r24, 0x00	; 0
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	aa ef       	ldi	r26, 0xFA	; 250
    52c2:	b4 e4       	ldi	r27, 0x44	; 68
    52c4:	80 83       	st	Z, r24
    52c6:	91 83       	std	Z+1, r25	; 0x01
    52c8:	a2 83       	std	Z+2, r26	; 0x02
    52ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52cc:	8e 01       	movw	r16, r28
    52ce:	0b 57       	subi	r16, 0x7B	; 123
    52d0:	1f 4f       	sbci	r17, 0xFF	; 255
    52d2:	fe 01       	movw	r30, r28
    52d4:	e7 57       	subi	r30, 0x77	; 119
    52d6:	ff 4f       	sbci	r31, 0xFF	; 255
    52d8:	60 81       	ld	r22, Z
    52da:	71 81       	ldd	r23, Z+1	; 0x01
    52dc:	82 81       	ldd	r24, Z+2	; 0x02
    52de:	93 81       	ldd	r25, Z+3	; 0x03
    52e0:	26 e6       	ldi	r18, 0x66	; 102
    52e2:	36 e6       	ldi	r19, 0x66	; 102
    52e4:	46 e6       	ldi	r20, 0x66	; 102
    52e6:	55 e4       	ldi	r21, 0x45	; 69
    52e8:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    52ec:	dc 01       	movw	r26, r24
    52ee:	cb 01       	movw	r24, r22
    52f0:	f8 01       	movw	r30, r16
    52f2:	80 83       	st	Z, r24
    52f4:	91 83       	std	Z+1, r25	; 0x01
    52f6:	a2 83       	std	Z+2, r26	; 0x02
    52f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52fa:	fe 01       	movw	r30, r28
    52fc:	eb 57       	subi	r30, 0x7B	; 123
    52fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5300:	60 81       	ld	r22, Z
    5302:	71 81       	ldd	r23, Z+1	; 0x01
    5304:	82 81       	ldd	r24, Z+2	; 0x02
    5306:	93 81       	ldd	r25, Z+3	; 0x03
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	30 e0       	ldi	r19, 0x00	; 0
    530c:	40 e8       	ldi	r20, 0x80	; 128
    530e:	5f e3       	ldi	r21, 0x3F	; 63
    5310:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5314:	88 23       	and	r24, r24
    5316:	44 f4       	brge	.+16     	; 0x5328 <__vector_25+0x7d6>
		__ticks = 1;
    5318:	fe 01       	movw	r30, r28
    531a:	ed 57       	subi	r30, 0x7D	; 125
    531c:	ff 4f       	sbci	r31, 0xFF	; 255
    531e:	81 e0       	ldi	r24, 0x01	; 1
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	91 83       	std	Z+1, r25	; 0x01
    5324:	80 83       	st	Z, r24
    5326:	64 c0       	rjmp	.+200    	; 0x53f0 <__vector_25+0x89e>
	else if (__tmp > 65535)
    5328:	fe 01       	movw	r30, r28
    532a:	eb 57       	subi	r30, 0x7B	; 123
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	60 81       	ld	r22, Z
    5330:	71 81       	ldd	r23, Z+1	; 0x01
    5332:	82 81       	ldd	r24, Z+2	; 0x02
    5334:	93 81       	ldd	r25, Z+3	; 0x03
    5336:	20 e0       	ldi	r18, 0x00	; 0
    5338:	3f ef       	ldi	r19, 0xFF	; 255
    533a:	4f e7       	ldi	r20, 0x7F	; 127
    533c:	57 e4       	ldi	r21, 0x47	; 71
    533e:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5342:	18 16       	cp	r1, r24
    5344:	0c f0       	brlt	.+2      	; 0x5348 <__vector_25+0x7f6>
    5346:	43 c0       	rjmp	.+134    	; 0x53ce <__vector_25+0x87c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5348:	fe 01       	movw	r30, r28
    534a:	e7 57       	subi	r30, 0x77	; 119
    534c:	ff 4f       	sbci	r31, 0xFF	; 255
    534e:	60 81       	ld	r22, Z
    5350:	71 81       	ldd	r23, Z+1	; 0x01
    5352:	82 81       	ldd	r24, Z+2	; 0x02
    5354:	93 81       	ldd	r25, Z+3	; 0x03
    5356:	20 e0       	ldi	r18, 0x00	; 0
    5358:	30 e0       	ldi	r19, 0x00	; 0
    535a:	40 e2       	ldi	r20, 0x20	; 32
    535c:	51 e4       	ldi	r21, 0x41	; 65
    535e:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5362:	dc 01       	movw	r26, r24
    5364:	cb 01       	movw	r24, r22
    5366:	8e 01       	movw	r16, r28
    5368:	0d 57       	subi	r16, 0x7D	; 125
    536a:	1f 4f       	sbci	r17, 0xFF	; 255
    536c:	bc 01       	movw	r22, r24
    536e:	cd 01       	movw	r24, r26
    5370:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5374:	dc 01       	movw	r26, r24
    5376:	cb 01       	movw	r24, r22
    5378:	f8 01       	movw	r30, r16
    537a:	91 83       	std	Z+1, r25	; 0x01
    537c:	80 83       	st	Z, r24
    537e:	1f c0       	rjmp	.+62     	; 0x53be <__vector_25+0x86c>
    5380:	fe 01       	movw	r30, r28
    5382:	ef 57       	subi	r30, 0x7F	; 127
    5384:	ff 4f       	sbci	r31, 0xFF	; 255
    5386:	80 e7       	ldi	r24, 0x70	; 112
    5388:	91 e0       	ldi	r25, 0x01	; 1
    538a:	91 83       	std	Z+1, r25	; 0x01
    538c:	80 83       	st	Z, r24
    538e:	fe 01       	movw	r30, r28
    5390:	ef 57       	subi	r30, 0x7F	; 127
    5392:	ff 4f       	sbci	r31, 0xFF	; 255
    5394:	80 81       	ld	r24, Z
    5396:	91 81       	ldd	r25, Z+1	; 0x01
    5398:	01 97       	sbiw	r24, 0x01	; 1
    539a:	f1 f7       	brne	.-4      	; 0x5398 <__vector_25+0x846>
    539c:	fe 01       	movw	r30, r28
    539e:	ef 57       	subi	r30, 0x7F	; 127
    53a0:	ff 4f       	sbci	r31, 0xFF	; 255
    53a2:	91 83       	std	Z+1, r25	; 0x01
    53a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53a6:	de 01       	movw	r26, r28
    53a8:	ad 57       	subi	r26, 0x7D	; 125
    53aa:	bf 4f       	sbci	r27, 0xFF	; 255
    53ac:	fe 01       	movw	r30, r28
    53ae:	ed 57       	subi	r30, 0x7D	; 125
    53b0:	ff 4f       	sbci	r31, 0xFF	; 255
    53b2:	80 81       	ld	r24, Z
    53b4:	91 81       	ldd	r25, Z+1	; 0x01
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	11 96       	adiw	r26, 0x01	; 1
    53ba:	9c 93       	st	X, r25
    53bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53be:	fe 01       	movw	r30, r28
    53c0:	ed 57       	subi	r30, 0x7D	; 125
    53c2:	ff 4f       	sbci	r31, 0xFF	; 255
    53c4:	80 81       	ld	r24, Z
    53c6:	91 81       	ldd	r25, Z+1	; 0x01
    53c8:	00 97       	sbiw	r24, 0x00	; 0
    53ca:	d1 f6       	brne	.-76     	; 0x5380 <__vector_25+0x82e>
    53cc:	28 c0       	rjmp	.+80     	; 0x541e <__vector_25+0x8cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53ce:	8e 01       	movw	r16, r28
    53d0:	0d 57       	subi	r16, 0x7D	; 125
    53d2:	1f 4f       	sbci	r17, 0xFF	; 255
    53d4:	fe 01       	movw	r30, r28
    53d6:	eb 57       	subi	r30, 0x7B	; 123
    53d8:	ff 4f       	sbci	r31, 0xFF	; 255
    53da:	60 81       	ld	r22, Z
    53dc:	71 81       	ldd	r23, Z+1	; 0x01
    53de:	82 81       	ldd	r24, Z+2	; 0x02
    53e0:	93 81       	ldd	r25, Z+3	; 0x03
    53e2:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    53e6:	dc 01       	movw	r26, r24
    53e8:	cb 01       	movw	r24, r22
    53ea:	f8 01       	movw	r30, r16
    53ec:	91 83       	std	Z+1, r25	; 0x01
    53ee:	80 83       	st	Z, r24
    53f0:	de 01       	movw	r26, r28
    53f2:	a1 58       	subi	r26, 0x81	; 129
    53f4:	bf 4f       	sbci	r27, 0xFF	; 255
    53f6:	fe 01       	movw	r30, r28
    53f8:	ed 57       	subi	r30, 0x7D	; 125
    53fa:	ff 4f       	sbci	r31, 0xFF	; 255
    53fc:	80 81       	ld	r24, Z
    53fe:	91 81       	ldd	r25, Z+1	; 0x01
    5400:	11 96       	adiw	r26, 0x01	; 1
    5402:	9c 93       	st	X, r25
    5404:	8e 93       	st	-X, r24
    5406:	fe 01       	movw	r30, r28
    5408:	e1 58       	subi	r30, 0x81	; 129
    540a:	ff 4f       	sbci	r31, 0xFF	; 255
    540c:	80 81       	ld	r24, Z
    540e:	91 81       	ldd	r25, Z+1	; 0x01
    5410:	01 97       	sbiw	r24, 0x01	; 1
    5412:	f1 f7       	brne	.-4      	; 0x5410 <__vector_25+0x8be>
    5414:	fe 01       	movw	r30, r28
    5416:	e1 58       	subi	r30, 0x81	; 129
    5418:	ff 4f       	sbci	r31, 0xFF	; 255
    541a:	91 83       	std	Z+1, r25	; 0x01
    541c:	80 83       	st	Z, r24
					_delay_ms(2000);
					UDR0 = 0x31;
    541e:	e6 ec       	ldi	r30, 0xC6	; 198
    5420:	f0 e0       	ldi	r31, 0x00	; 0
    5422:	81 e3       	ldi	r24, 0x31	; 49
    5424:	80 83       	st	Z, r24
				}

				sum_x = 0;	//intialize back values for next iteration
    5426:	10 92 1c 03 	sts	0x031C, r1
    542a:	10 92 1b 03 	sts	0x031B, r1
				sum_y = 0;
    542e:	10 92 1e 03 	sts	0x031E, r1
    5432:	10 92 1d 03 	sts	0x031D, r1
				num_read_mode = 0;
    5436:	10 92 18 03 	sts	0x0318, r1
    543a:	10 92 17 03 	sts	0x0317, r1
			} 

			count = (count+1)%3;
    543e:	80 91 19 03 	lds	r24, 0x0319
    5442:	90 91 1a 03 	lds	r25, 0x031A
    5446:	01 96       	adiw	r24, 0x01	; 1
    5448:	23 e0       	ldi	r18, 0x03	; 3
    544a:	30 e0       	ldi	r19, 0x00	; 0
    544c:	b9 01       	movw	r22, r18
    544e:	0e 94 96 37 	call	0x6f2c	; 0x6f2c <__udivmodhi4>
    5452:	90 93 1a 03 	sts	0x031A, r25
    5456:	80 93 19 03 	sts	0x0319, r24
    545a:	56 c6       	rjmp	.+3244   	; 0x6108 <__vector_25+0x15b6>
		}

		else if(data == 0x30) //ASCII value of 0, tomato not found
    545c:	80 91 3a 03 	lds	r24, 0x033A
    5460:	80 33       	cpi	r24, 0x30	; 48
    5462:	09 f0       	breq	.+2      	; 0x5466 <__vector_25+0x914>
    5464:	e1 c3       	rjmp	.+1986   	; 0x5c28 <__vector_25+0x10d6>
		{	
			initial_angle-=5;	//decrement angle by 5 degree, moves arm downwards
    5466:	80 91 35 03 	lds	r24, 0x0335
    546a:	85 50       	subi	r24, 0x05	; 5
    546c:	80 93 35 03 	sts	0x0335, r24
			if (initial_angle>=5)	//if not reached the bottom
    5470:	80 91 35 03 	lds	r24, 0x0335
    5474:	85 30       	cpi	r24, 0x05	; 5
    5476:	48 f0       	brcs	.+18     	; 0x548a <__vector_25+0x938>
			{
				servo_2(initial_angle);	//move to new position
    5478:	80 91 35 03 	lds	r24, 0x0335
    547c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
				UDR0 = 0x31;			//send the signal
    5480:	e6 ec       	ldi	r30, 0xC6	; 198
    5482:	f0 e0       	ldi	r31, 0x00	; 0
    5484:	81 e3       	ldi	r24, 0x31	; 49
    5486:	80 83       	st	Z, r24
    5488:	3f c6       	rjmp	.+3198   	; 0x6108 <__vector_25+0x15b6>
			}
			else if (initial_angle<5)	//if reached bottom
    548a:	80 91 35 03 	lds	r24, 0x0335
    548e:	85 30       	cpi	r24, 0x05	; 5
    5490:	08 f0       	brcs	.+2      	; 0x5494 <__vector_25+0x942>
    5492:	35 c3       	rjmp	.+1642   	; 0x5afe <__vector_25+0xfac>
			{
				initial_angle = 120;	//move to top, 120 degrees
    5494:	88 e7       	ldi	r24, 0x78	; 120
    5496:	80 93 35 03 	sts	0x0335, r24
				servo_2(initial_angle);
    549a:	80 91 35 03 	lds	r24, 0x0335
    549e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>

				if (end_reached==1)		//if end of grid reached in monitoring mode
    54a2:	80 91 14 03 	lds	r24, 0x0314
    54a6:	81 30       	cpi	r24, 0x01	; 1
    54a8:	09 f0       	breq	.+2      	; 0x54ac <__vector_25+0x95a>
    54aa:	5e c2       	rjmp	.+1212   	; 0x5968 <__vector_25+0xe16>
				{
					UDR0 = 0x34;		//send corresponding signal
    54ac:	e6 ec       	ldi	r30, 0xC6	; 198
    54ae:	f0 e0       	ldi	r31, 0x00	; 0
    54b0:	84 e3       	ldi	r24, 0x34	; 52
    54b2:	80 83       	st	Z, r24
    54b4:	fe 01       	movw	r30, r28
    54b6:	e5 58       	subi	r30, 0x85	; 133
    54b8:	ff 4f       	sbci	r31, 0xFF	; 255
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	aa e7       	ldi	r26, 0x7A	; 122
    54c0:	b4 e4       	ldi	r27, 0x44	; 68
    54c2:	80 83       	st	Z, r24
    54c4:	91 83       	std	Z+1, r25	; 0x01
    54c6:	a2 83       	std	Z+2, r26	; 0x02
    54c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54ca:	8e 01       	movw	r16, r28
    54cc:	09 58       	subi	r16, 0x89	; 137
    54ce:	1f 4f       	sbci	r17, 0xFF	; 255
    54d0:	fe 01       	movw	r30, r28
    54d2:	e5 58       	subi	r30, 0x85	; 133
    54d4:	ff 4f       	sbci	r31, 0xFF	; 255
    54d6:	60 81       	ld	r22, Z
    54d8:	71 81       	ldd	r23, Z+1	; 0x01
    54da:	82 81       	ldd	r24, Z+2	; 0x02
    54dc:	93 81       	ldd	r25, Z+3	; 0x03
    54de:	26 e6       	ldi	r18, 0x66	; 102
    54e0:	36 e6       	ldi	r19, 0x66	; 102
    54e2:	46 e6       	ldi	r20, 0x66	; 102
    54e4:	55 e4       	ldi	r21, 0x45	; 69
    54e6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    54ea:	dc 01       	movw	r26, r24
    54ec:	cb 01       	movw	r24, r22
    54ee:	f8 01       	movw	r30, r16
    54f0:	80 83       	st	Z, r24
    54f2:	91 83       	std	Z+1, r25	; 0x01
    54f4:	a2 83       	std	Z+2, r26	; 0x02
    54f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    54f8:	fe 01       	movw	r30, r28
    54fa:	e9 58       	subi	r30, 0x89	; 137
    54fc:	ff 4f       	sbci	r31, 0xFF	; 255
    54fe:	60 81       	ld	r22, Z
    5500:	71 81       	ldd	r23, Z+1	; 0x01
    5502:	82 81       	ldd	r24, Z+2	; 0x02
    5504:	93 81       	ldd	r25, Z+3	; 0x03
    5506:	20 e0       	ldi	r18, 0x00	; 0
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	40 e8       	ldi	r20, 0x80	; 128
    550c:	5f e3       	ldi	r21, 0x3F	; 63
    550e:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5512:	88 23       	and	r24, r24
    5514:	44 f4       	brge	.+16     	; 0x5526 <__vector_25+0x9d4>
		__ticks = 1;
    5516:	fe 01       	movw	r30, r28
    5518:	eb 58       	subi	r30, 0x8B	; 139
    551a:	ff 4f       	sbci	r31, 0xFF	; 255
    551c:	81 e0       	ldi	r24, 0x01	; 1
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	91 83       	std	Z+1, r25	; 0x01
    5522:	80 83       	st	Z, r24
    5524:	64 c0       	rjmp	.+200    	; 0x55ee <__vector_25+0xa9c>
	else if (__tmp > 65535)
    5526:	fe 01       	movw	r30, r28
    5528:	e9 58       	subi	r30, 0x89	; 137
    552a:	ff 4f       	sbci	r31, 0xFF	; 255
    552c:	60 81       	ld	r22, Z
    552e:	71 81       	ldd	r23, Z+1	; 0x01
    5530:	82 81       	ldd	r24, Z+2	; 0x02
    5532:	93 81       	ldd	r25, Z+3	; 0x03
    5534:	20 e0       	ldi	r18, 0x00	; 0
    5536:	3f ef       	ldi	r19, 0xFF	; 255
    5538:	4f e7       	ldi	r20, 0x7F	; 127
    553a:	57 e4       	ldi	r21, 0x47	; 71
    553c:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5540:	18 16       	cp	r1, r24
    5542:	0c f0       	brlt	.+2      	; 0x5546 <__vector_25+0x9f4>
    5544:	43 c0       	rjmp	.+134    	; 0x55cc <__vector_25+0xa7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5546:	fe 01       	movw	r30, r28
    5548:	e5 58       	subi	r30, 0x85	; 133
    554a:	ff 4f       	sbci	r31, 0xFF	; 255
    554c:	60 81       	ld	r22, Z
    554e:	71 81       	ldd	r23, Z+1	; 0x01
    5550:	82 81       	ldd	r24, Z+2	; 0x02
    5552:	93 81       	ldd	r25, Z+3	; 0x03
    5554:	20 e0       	ldi	r18, 0x00	; 0
    5556:	30 e0       	ldi	r19, 0x00	; 0
    5558:	40 e2       	ldi	r20, 0x20	; 32
    555a:	51 e4       	ldi	r21, 0x41	; 65
    555c:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5560:	dc 01       	movw	r26, r24
    5562:	cb 01       	movw	r24, r22
    5564:	8e 01       	movw	r16, r28
    5566:	0b 58       	subi	r16, 0x8B	; 139
    5568:	1f 4f       	sbci	r17, 0xFF	; 255
    556a:	bc 01       	movw	r22, r24
    556c:	cd 01       	movw	r24, r26
    556e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5572:	dc 01       	movw	r26, r24
    5574:	cb 01       	movw	r24, r22
    5576:	f8 01       	movw	r30, r16
    5578:	91 83       	std	Z+1, r25	; 0x01
    557a:	80 83       	st	Z, r24
    557c:	1f c0       	rjmp	.+62     	; 0x55bc <__vector_25+0xa6a>
    557e:	fe 01       	movw	r30, r28
    5580:	ed 58       	subi	r30, 0x8D	; 141
    5582:	ff 4f       	sbci	r31, 0xFF	; 255
    5584:	80 e7       	ldi	r24, 0x70	; 112
    5586:	91 e0       	ldi	r25, 0x01	; 1
    5588:	91 83       	std	Z+1, r25	; 0x01
    558a:	80 83       	st	Z, r24
    558c:	fe 01       	movw	r30, r28
    558e:	ed 58       	subi	r30, 0x8D	; 141
    5590:	ff 4f       	sbci	r31, 0xFF	; 255
    5592:	80 81       	ld	r24, Z
    5594:	91 81       	ldd	r25, Z+1	; 0x01
    5596:	01 97       	sbiw	r24, 0x01	; 1
    5598:	f1 f7       	brne	.-4      	; 0x5596 <__vector_25+0xa44>
    559a:	fe 01       	movw	r30, r28
    559c:	ed 58       	subi	r30, 0x8D	; 141
    559e:	ff 4f       	sbci	r31, 0xFF	; 255
    55a0:	91 83       	std	Z+1, r25	; 0x01
    55a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55a4:	de 01       	movw	r26, r28
    55a6:	ab 58       	subi	r26, 0x8B	; 139
    55a8:	bf 4f       	sbci	r27, 0xFF	; 255
    55aa:	fe 01       	movw	r30, r28
    55ac:	eb 58       	subi	r30, 0x8B	; 139
    55ae:	ff 4f       	sbci	r31, 0xFF	; 255
    55b0:	80 81       	ld	r24, Z
    55b2:	91 81       	ldd	r25, Z+1	; 0x01
    55b4:	01 97       	sbiw	r24, 0x01	; 1
    55b6:	11 96       	adiw	r26, 0x01	; 1
    55b8:	9c 93       	st	X, r25
    55ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55bc:	fe 01       	movw	r30, r28
    55be:	eb 58       	subi	r30, 0x8B	; 139
    55c0:	ff 4f       	sbci	r31, 0xFF	; 255
    55c2:	80 81       	ld	r24, Z
    55c4:	91 81       	ldd	r25, Z+1	; 0x01
    55c6:	00 97       	sbiw	r24, 0x00	; 0
    55c8:	d1 f6       	brne	.-76     	; 0x557e <__vector_25+0xa2c>
    55ca:	28 c0       	rjmp	.+80     	; 0x561c <__vector_25+0xaca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55cc:	8e 01       	movw	r16, r28
    55ce:	0b 58       	subi	r16, 0x8B	; 139
    55d0:	1f 4f       	sbci	r17, 0xFF	; 255
    55d2:	fe 01       	movw	r30, r28
    55d4:	e9 58       	subi	r30, 0x89	; 137
    55d6:	ff 4f       	sbci	r31, 0xFF	; 255
    55d8:	60 81       	ld	r22, Z
    55da:	71 81       	ldd	r23, Z+1	; 0x01
    55dc:	82 81       	ldd	r24, Z+2	; 0x02
    55de:	93 81       	ldd	r25, Z+3	; 0x03
    55e0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    55e4:	dc 01       	movw	r26, r24
    55e6:	cb 01       	movw	r24, r22
    55e8:	f8 01       	movw	r30, r16
    55ea:	91 83       	std	Z+1, r25	; 0x01
    55ec:	80 83       	st	Z, r24
    55ee:	de 01       	movw	r26, r28
    55f0:	af 58       	subi	r26, 0x8F	; 143
    55f2:	bf 4f       	sbci	r27, 0xFF	; 255
    55f4:	fe 01       	movw	r30, r28
    55f6:	eb 58       	subi	r30, 0x8B	; 139
    55f8:	ff 4f       	sbci	r31, 0xFF	; 255
    55fa:	80 81       	ld	r24, Z
    55fc:	91 81       	ldd	r25, Z+1	; 0x01
    55fe:	11 96       	adiw	r26, 0x01	; 1
    5600:	9c 93       	st	X, r25
    5602:	8e 93       	st	-X, r24
    5604:	fe 01       	movw	r30, r28
    5606:	ef 58       	subi	r30, 0x8F	; 143
    5608:	ff 4f       	sbci	r31, 0xFF	; 255
    560a:	80 81       	ld	r24, Z
    560c:	91 81       	ldd	r25, Z+1	; 0x01
    560e:	01 97       	sbiw	r24, 0x01	; 1
    5610:	f1 f7       	brne	.-4      	; 0x560e <__vector_25+0xabc>
    5612:	fe 01       	movw	r30, r28
    5614:	ef 58       	subi	r30, 0x8F	; 143
    5616:	ff 4f       	sbci	r31, 0xFF	; 255
    5618:	91 83       	std	Z+1, r25	; 0x01
    561a:	80 83       	st	Z, r24
					_delay_ms(1000);
					UDR0 = (unsigned char)((int)tom_found+48);	//send no. of tomatoes found
    561c:	e6 ec       	ldi	r30, 0xC6	; 198
    561e:	f0 e0       	ldi	r31, 0x00	; 0
    5620:	80 91 13 03 	lds	r24, 0x0313
    5624:	80 5d       	subi	r24, 0xD0	; 208
    5626:	80 83       	st	Z, r24
					
					//send row and column no's where tomaotes are found
					for (int iter=0;iter<tom_found;iter++)
    5628:	fe 01       	movw	r30, r28
    562a:	e5 55       	subi	r30, 0x55	; 85
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	11 82       	std	Z+1, r1	; 0x01
    5630:	10 82       	st	Z, r1
    5632:	8c c1       	rjmp	.+792    	; 0x594c <__vector_25+0xdfa>
    5634:	fe 01       	movw	r30, r28
    5636:	e3 59       	subi	r30, 0x93	; 147
    5638:	ff 4f       	sbci	r31, 0xFF	; 255
    563a:	80 e0       	ldi	r24, 0x00	; 0
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	aa e7       	ldi	r26, 0x7A	; 122
    5640:	b4 e4       	ldi	r27, 0x44	; 68
    5642:	80 83       	st	Z, r24
    5644:	91 83       	std	Z+1, r25	; 0x01
    5646:	a2 83       	std	Z+2, r26	; 0x02
    5648:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    564a:	8e 01       	movw	r16, r28
    564c:	07 59       	subi	r16, 0x97	; 151
    564e:	1f 4f       	sbci	r17, 0xFF	; 255
    5650:	fe 01       	movw	r30, r28
    5652:	e3 59       	subi	r30, 0x93	; 147
    5654:	ff 4f       	sbci	r31, 0xFF	; 255
    5656:	60 81       	ld	r22, Z
    5658:	71 81       	ldd	r23, Z+1	; 0x01
    565a:	82 81       	ldd	r24, Z+2	; 0x02
    565c:	93 81       	ldd	r25, Z+3	; 0x03
    565e:	26 e6       	ldi	r18, 0x66	; 102
    5660:	36 e6       	ldi	r19, 0x66	; 102
    5662:	46 e6       	ldi	r20, 0x66	; 102
    5664:	55 e4       	ldi	r21, 0x45	; 69
    5666:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    566a:	dc 01       	movw	r26, r24
    566c:	cb 01       	movw	r24, r22
    566e:	f8 01       	movw	r30, r16
    5670:	80 83       	st	Z, r24
    5672:	91 83       	std	Z+1, r25	; 0x01
    5674:	a2 83       	std	Z+2, r26	; 0x02
    5676:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5678:	fe 01       	movw	r30, r28
    567a:	e7 59       	subi	r30, 0x97	; 151
    567c:	ff 4f       	sbci	r31, 0xFF	; 255
    567e:	60 81       	ld	r22, Z
    5680:	71 81       	ldd	r23, Z+1	; 0x01
    5682:	82 81       	ldd	r24, Z+2	; 0x02
    5684:	93 81       	ldd	r25, Z+3	; 0x03
    5686:	20 e0       	ldi	r18, 0x00	; 0
    5688:	30 e0       	ldi	r19, 0x00	; 0
    568a:	40 e8       	ldi	r20, 0x80	; 128
    568c:	5f e3       	ldi	r21, 0x3F	; 63
    568e:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5692:	88 23       	and	r24, r24
    5694:	44 f4       	brge	.+16     	; 0x56a6 <__vector_25+0xb54>
		__ticks = 1;
    5696:	fe 01       	movw	r30, r28
    5698:	e9 59       	subi	r30, 0x99	; 153
    569a:	ff 4f       	sbci	r31, 0xFF	; 255
    569c:	81 e0       	ldi	r24, 0x01	; 1
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	91 83       	std	Z+1, r25	; 0x01
    56a2:	80 83       	st	Z, r24
    56a4:	64 c0       	rjmp	.+200    	; 0x576e <__vector_25+0xc1c>
	else if (__tmp > 65535)
    56a6:	fe 01       	movw	r30, r28
    56a8:	e7 59       	subi	r30, 0x97	; 151
    56aa:	ff 4f       	sbci	r31, 0xFF	; 255
    56ac:	60 81       	ld	r22, Z
    56ae:	71 81       	ldd	r23, Z+1	; 0x01
    56b0:	82 81       	ldd	r24, Z+2	; 0x02
    56b2:	93 81       	ldd	r25, Z+3	; 0x03
    56b4:	20 e0       	ldi	r18, 0x00	; 0
    56b6:	3f ef       	ldi	r19, 0xFF	; 255
    56b8:	4f e7       	ldi	r20, 0x7F	; 127
    56ba:	57 e4       	ldi	r21, 0x47	; 71
    56bc:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    56c0:	18 16       	cp	r1, r24
    56c2:	0c f0       	brlt	.+2      	; 0x56c6 <__vector_25+0xb74>
    56c4:	43 c0       	rjmp	.+134    	; 0x574c <__vector_25+0xbfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56c6:	fe 01       	movw	r30, r28
    56c8:	e3 59       	subi	r30, 0x93	; 147
    56ca:	ff 4f       	sbci	r31, 0xFF	; 255
    56cc:	60 81       	ld	r22, Z
    56ce:	71 81       	ldd	r23, Z+1	; 0x01
    56d0:	82 81       	ldd	r24, Z+2	; 0x02
    56d2:	93 81       	ldd	r25, Z+3	; 0x03
    56d4:	20 e0       	ldi	r18, 0x00	; 0
    56d6:	30 e0       	ldi	r19, 0x00	; 0
    56d8:	40 e2       	ldi	r20, 0x20	; 32
    56da:	51 e4       	ldi	r21, 0x41	; 65
    56dc:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    56e0:	dc 01       	movw	r26, r24
    56e2:	cb 01       	movw	r24, r22
    56e4:	8e 01       	movw	r16, r28
    56e6:	09 59       	subi	r16, 0x99	; 153
    56e8:	1f 4f       	sbci	r17, 0xFF	; 255
    56ea:	bc 01       	movw	r22, r24
    56ec:	cd 01       	movw	r24, r26
    56ee:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    56f2:	dc 01       	movw	r26, r24
    56f4:	cb 01       	movw	r24, r22
    56f6:	f8 01       	movw	r30, r16
    56f8:	91 83       	std	Z+1, r25	; 0x01
    56fa:	80 83       	st	Z, r24
    56fc:	1f c0       	rjmp	.+62     	; 0x573c <__vector_25+0xbea>
    56fe:	fe 01       	movw	r30, r28
    5700:	eb 59       	subi	r30, 0x9B	; 155
    5702:	ff 4f       	sbci	r31, 0xFF	; 255
    5704:	80 e7       	ldi	r24, 0x70	; 112
    5706:	91 e0       	ldi	r25, 0x01	; 1
    5708:	91 83       	std	Z+1, r25	; 0x01
    570a:	80 83       	st	Z, r24
    570c:	fe 01       	movw	r30, r28
    570e:	eb 59       	subi	r30, 0x9B	; 155
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	80 81       	ld	r24, Z
    5714:	91 81       	ldd	r25, Z+1	; 0x01
    5716:	01 97       	sbiw	r24, 0x01	; 1
    5718:	f1 f7       	brne	.-4      	; 0x5716 <__vector_25+0xbc4>
    571a:	fe 01       	movw	r30, r28
    571c:	eb 59       	subi	r30, 0x9B	; 155
    571e:	ff 4f       	sbci	r31, 0xFF	; 255
    5720:	91 83       	std	Z+1, r25	; 0x01
    5722:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5724:	de 01       	movw	r26, r28
    5726:	a9 59       	subi	r26, 0x99	; 153
    5728:	bf 4f       	sbci	r27, 0xFF	; 255
    572a:	fe 01       	movw	r30, r28
    572c:	e9 59       	subi	r30, 0x99	; 153
    572e:	ff 4f       	sbci	r31, 0xFF	; 255
    5730:	80 81       	ld	r24, Z
    5732:	91 81       	ldd	r25, Z+1	; 0x01
    5734:	01 97       	sbiw	r24, 0x01	; 1
    5736:	11 96       	adiw	r26, 0x01	; 1
    5738:	9c 93       	st	X, r25
    573a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    573c:	fe 01       	movw	r30, r28
    573e:	e9 59       	subi	r30, 0x99	; 153
    5740:	ff 4f       	sbci	r31, 0xFF	; 255
    5742:	80 81       	ld	r24, Z
    5744:	91 81       	ldd	r25, Z+1	; 0x01
    5746:	00 97       	sbiw	r24, 0x00	; 0
    5748:	d1 f6       	brne	.-76     	; 0x56fe <__vector_25+0xbac>
    574a:	27 c0       	rjmp	.+78     	; 0x579a <__vector_25+0xc48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    574c:	8e 01       	movw	r16, r28
    574e:	09 59       	subi	r16, 0x99	; 153
    5750:	1f 4f       	sbci	r17, 0xFF	; 255
    5752:	fe 01       	movw	r30, r28
    5754:	e7 59       	subi	r30, 0x97	; 151
    5756:	ff 4f       	sbci	r31, 0xFF	; 255
    5758:	60 81       	ld	r22, Z
    575a:	71 81       	ldd	r23, Z+1	; 0x01
    575c:	82 81       	ldd	r24, Z+2	; 0x02
    575e:	93 81       	ldd	r25, Z+3	; 0x03
    5760:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5764:	dc 01       	movw	r26, r24
    5766:	cb 01       	movw	r24, r22
    5768:	f8 01       	movw	r30, r16
    576a:	91 83       	std	Z+1, r25	; 0x01
    576c:	80 83       	st	Z, r24
    576e:	de 01       	movw	r26, r28
    5770:	ad 59       	subi	r26, 0x9D	; 157
    5772:	bf 4f       	sbci	r27, 0xFF	; 255
    5774:	fe 01       	movw	r30, r28
    5776:	e9 59       	subi	r30, 0x99	; 153
    5778:	ff 4f       	sbci	r31, 0xFF	; 255
    577a:	80 81       	ld	r24, Z
    577c:	91 81       	ldd	r25, Z+1	; 0x01
    577e:	8d 93       	st	X+, r24
    5780:	9c 93       	st	X, r25
    5782:	fe 01       	movw	r30, r28
    5784:	ed 59       	subi	r30, 0x9D	; 157
    5786:	ff 4f       	sbci	r31, 0xFF	; 255
    5788:	80 81       	ld	r24, Z
    578a:	91 81       	ldd	r25, Z+1	; 0x01
    578c:	01 97       	sbiw	r24, 0x01	; 1
    578e:	f1 f7       	brne	.-4      	; 0x578c <__vector_25+0xc3a>
    5790:	fe 01       	movw	r30, r28
    5792:	ed 59       	subi	r30, 0x9D	; 157
    5794:	ff 4f       	sbci	r31, 0xFF	; 255
    5796:	91 83       	std	Z+1, r25	; 0x01
    5798:	80 83       	st	Z, r24
					{
						_delay_ms(1000);
						UDR0 = (unsigned char)((int)row_found_arr[iter]+48);
    579a:	a6 ec       	ldi	r26, 0xC6	; 198
    579c:	b0 e0       	ldi	r27, 0x00	; 0
    579e:	fe 01       	movw	r30, r28
    57a0:	e5 55       	subi	r30, 0x55	; 85
    57a2:	ff 4f       	sbci	r31, 0xFF	; 255
    57a4:	80 81       	ld	r24, Z
    57a6:	91 81       	ldd	r25, Z+1	; 0x01
    57a8:	fc 01       	movw	r30, r24
    57aa:	ea 5d       	subi	r30, 0xDA	; 218
    57ac:	fc 4f       	sbci	r31, 0xFC	; 252
    57ae:	80 81       	ld	r24, Z
    57b0:	80 5d       	subi	r24, 0xD0	; 208
    57b2:	8c 93       	st	X, r24
    57b4:	fe 01       	movw	r30, r28
    57b6:	e1 5a       	subi	r30, 0xA1	; 161
    57b8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ba:	80 e0       	ldi	r24, 0x00	; 0
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	aa e7       	ldi	r26, 0x7A	; 122
    57c0:	b4 e4       	ldi	r27, 0x44	; 68
    57c2:	80 83       	st	Z, r24
    57c4:	91 83       	std	Z+1, r25	; 0x01
    57c6:	a2 83       	std	Z+2, r26	; 0x02
    57c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57ca:	8e 01       	movw	r16, r28
    57cc:	05 5a       	subi	r16, 0xA5	; 165
    57ce:	1f 4f       	sbci	r17, 0xFF	; 255
    57d0:	fe 01       	movw	r30, r28
    57d2:	e1 5a       	subi	r30, 0xA1	; 161
    57d4:	ff 4f       	sbci	r31, 0xFF	; 255
    57d6:	60 81       	ld	r22, Z
    57d8:	71 81       	ldd	r23, Z+1	; 0x01
    57da:	82 81       	ldd	r24, Z+2	; 0x02
    57dc:	93 81       	ldd	r25, Z+3	; 0x03
    57de:	26 e6       	ldi	r18, 0x66	; 102
    57e0:	36 e6       	ldi	r19, 0x66	; 102
    57e2:	46 e6       	ldi	r20, 0x66	; 102
    57e4:	55 e4       	ldi	r21, 0x45	; 69
    57e6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    57ea:	dc 01       	movw	r26, r24
    57ec:	cb 01       	movw	r24, r22
    57ee:	f8 01       	movw	r30, r16
    57f0:	80 83       	st	Z, r24
    57f2:	91 83       	std	Z+1, r25	; 0x01
    57f4:	a2 83       	std	Z+2, r26	; 0x02
    57f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57f8:	fe 01       	movw	r30, r28
    57fa:	e5 5a       	subi	r30, 0xA5	; 165
    57fc:	ff 4f       	sbci	r31, 0xFF	; 255
    57fe:	60 81       	ld	r22, Z
    5800:	71 81       	ldd	r23, Z+1	; 0x01
    5802:	82 81       	ldd	r24, Z+2	; 0x02
    5804:	93 81       	ldd	r25, Z+3	; 0x03
    5806:	20 e0       	ldi	r18, 0x00	; 0
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	40 e8       	ldi	r20, 0x80	; 128
    580c:	5f e3       	ldi	r21, 0x3F	; 63
    580e:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5812:	88 23       	and	r24, r24
    5814:	44 f4       	brge	.+16     	; 0x5826 <__vector_25+0xcd4>
		__ticks = 1;
    5816:	fe 01       	movw	r30, r28
    5818:	e7 5a       	subi	r30, 0xA7	; 167
    581a:	ff 4f       	sbci	r31, 0xFF	; 255
    581c:	81 e0       	ldi	r24, 0x01	; 1
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	91 83       	std	Z+1, r25	; 0x01
    5822:	80 83       	st	Z, r24
    5824:	64 c0       	rjmp	.+200    	; 0x58ee <__vector_25+0xd9c>
	else if (__tmp > 65535)
    5826:	fe 01       	movw	r30, r28
    5828:	e5 5a       	subi	r30, 0xA5	; 165
    582a:	ff 4f       	sbci	r31, 0xFF	; 255
    582c:	60 81       	ld	r22, Z
    582e:	71 81       	ldd	r23, Z+1	; 0x01
    5830:	82 81       	ldd	r24, Z+2	; 0x02
    5832:	93 81       	ldd	r25, Z+3	; 0x03
    5834:	20 e0       	ldi	r18, 0x00	; 0
    5836:	3f ef       	ldi	r19, 0xFF	; 255
    5838:	4f e7       	ldi	r20, 0x7F	; 127
    583a:	57 e4       	ldi	r21, 0x47	; 71
    583c:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5840:	18 16       	cp	r1, r24
    5842:	0c f0       	brlt	.+2      	; 0x5846 <__vector_25+0xcf4>
    5844:	43 c0       	rjmp	.+134    	; 0x58cc <__vector_25+0xd7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5846:	fe 01       	movw	r30, r28
    5848:	e1 5a       	subi	r30, 0xA1	; 161
    584a:	ff 4f       	sbci	r31, 0xFF	; 255
    584c:	60 81       	ld	r22, Z
    584e:	71 81       	ldd	r23, Z+1	; 0x01
    5850:	82 81       	ldd	r24, Z+2	; 0x02
    5852:	93 81       	ldd	r25, Z+3	; 0x03
    5854:	20 e0       	ldi	r18, 0x00	; 0
    5856:	30 e0       	ldi	r19, 0x00	; 0
    5858:	40 e2       	ldi	r20, 0x20	; 32
    585a:	51 e4       	ldi	r21, 0x41	; 65
    585c:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5860:	dc 01       	movw	r26, r24
    5862:	cb 01       	movw	r24, r22
    5864:	8e 01       	movw	r16, r28
    5866:	07 5a       	subi	r16, 0xA7	; 167
    5868:	1f 4f       	sbci	r17, 0xFF	; 255
    586a:	bc 01       	movw	r22, r24
    586c:	cd 01       	movw	r24, r26
    586e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5872:	dc 01       	movw	r26, r24
    5874:	cb 01       	movw	r24, r22
    5876:	f8 01       	movw	r30, r16
    5878:	91 83       	std	Z+1, r25	; 0x01
    587a:	80 83       	st	Z, r24
    587c:	1f c0       	rjmp	.+62     	; 0x58bc <__vector_25+0xd6a>
    587e:	fe 01       	movw	r30, r28
    5880:	e9 5a       	subi	r30, 0xA9	; 169
    5882:	ff 4f       	sbci	r31, 0xFF	; 255
    5884:	80 e7       	ldi	r24, 0x70	; 112
    5886:	91 e0       	ldi	r25, 0x01	; 1
    5888:	91 83       	std	Z+1, r25	; 0x01
    588a:	80 83       	st	Z, r24
    588c:	fe 01       	movw	r30, r28
    588e:	e9 5a       	subi	r30, 0xA9	; 169
    5890:	ff 4f       	sbci	r31, 0xFF	; 255
    5892:	80 81       	ld	r24, Z
    5894:	91 81       	ldd	r25, Z+1	; 0x01
    5896:	01 97       	sbiw	r24, 0x01	; 1
    5898:	f1 f7       	brne	.-4      	; 0x5896 <__vector_25+0xd44>
    589a:	fe 01       	movw	r30, r28
    589c:	e9 5a       	subi	r30, 0xA9	; 169
    589e:	ff 4f       	sbci	r31, 0xFF	; 255
    58a0:	91 83       	std	Z+1, r25	; 0x01
    58a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58a4:	de 01       	movw	r26, r28
    58a6:	a7 5a       	subi	r26, 0xA7	; 167
    58a8:	bf 4f       	sbci	r27, 0xFF	; 255
    58aa:	fe 01       	movw	r30, r28
    58ac:	e7 5a       	subi	r30, 0xA7	; 167
    58ae:	ff 4f       	sbci	r31, 0xFF	; 255
    58b0:	80 81       	ld	r24, Z
    58b2:	91 81       	ldd	r25, Z+1	; 0x01
    58b4:	01 97       	sbiw	r24, 0x01	; 1
    58b6:	11 96       	adiw	r26, 0x01	; 1
    58b8:	9c 93       	st	X, r25
    58ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58bc:	fe 01       	movw	r30, r28
    58be:	e7 5a       	subi	r30, 0xA7	; 167
    58c0:	ff 4f       	sbci	r31, 0xFF	; 255
    58c2:	80 81       	ld	r24, Z
    58c4:	91 81       	ldd	r25, Z+1	; 0x01
    58c6:	00 97       	sbiw	r24, 0x00	; 0
    58c8:	d1 f6       	brne	.-76     	; 0x587e <__vector_25+0xd2c>
    58ca:	27 c0       	rjmp	.+78     	; 0x591a <__vector_25+0xdc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58cc:	8e 01       	movw	r16, r28
    58ce:	07 5a       	subi	r16, 0xA7	; 167
    58d0:	1f 4f       	sbci	r17, 0xFF	; 255
    58d2:	fe 01       	movw	r30, r28
    58d4:	e5 5a       	subi	r30, 0xA5	; 165
    58d6:	ff 4f       	sbci	r31, 0xFF	; 255
    58d8:	60 81       	ld	r22, Z
    58da:	71 81       	ldd	r23, Z+1	; 0x01
    58dc:	82 81       	ldd	r24, Z+2	; 0x02
    58de:	93 81       	ldd	r25, Z+3	; 0x03
    58e0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    58e4:	dc 01       	movw	r26, r24
    58e6:	cb 01       	movw	r24, r22
    58e8:	f8 01       	movw	r30, r16
    58ea:	91 83       	std	Z+1, r25	; 0x01
    58ec:	80 83       	st	Z, r24
    58ee:	de 01       	movw	r26, r28
    58f0:	ab 5a       	subi	r26, 0xAB	; 171
    58f2:	bf 4f       	sbci	r27, 0xFF	; 255
    58f4:	fe 01       	movw	r30, r28
    58f6:	e7 5a       	subi	r30, 0xA7	; 167
    58f8:	ff 4f       	sbci	r31, 0xFF	; 255
    58fa:	80 81       	ld	r24, Z
    58fc:	91 81       	ldd	r25, Z+1	; 0x01
    58fe:	8d 93       	st	X+, r24
    5900:	9c 93       	st	X, r25
    5902:	fe 01       	movw	r30, r28
    5904:	eb 5a       	subi	r30, 0xAB	; 171
    5906:	ff 4f       	sbci	r31, 0xFF	; 255
    5908:	80 81       	ld	r24, Z
    590a:	91 81       	ldd	r25, Z+1	; 0x01
    590c:	01 97       	sbiw	r24, 0x01	; 1
    590e:	f1 f7       	brne	.-4      	; 0x590c <__vector_25+0xdba>
    5910:	fe 01       	movw	r30, r28
    5912:	eb 5a       	subi	r30, 0xAB	; 171
    5914:	ff 4f       	sbci	r31, 0xFF	; 255
    5916:	91 83       	std	Z+1, r25	; 0x01
    5918:	80 83       	st	Z, r24
						_delay_ms(1000);
						UDR0 = (unsigned char)((int)col_found_arr[iter]+48);
    591a:	a6 ec       	ldi	r26, 0xC6	; 198
    591c:	b0 e0       	ldi	r27, 0x00	; 0
    591e:	fe 01       	movw	r30, r28
    5920:	e5 55       	subi	r30, 0x55	; 85
    5922:	ff 4f       	sbci	r31, 0xFF	; 255
    5924:	80 81       	ld	r24, Z
    5926:	91 81       	ldd	r25, Z+1	; 0x01
    5928:	fc 01       	movw	r30, r24
    592a:	ef 5b       	subi	r30, 0xBF	; 191
    592c:	fc 4f       	sbci	r31, 0xFC	; 252
    592e:	80 81       	ld	r24, Z
    5930:	80 5d       	subi	r24, 0xD0	; 208
    5932:	8c 93       	st	X, r24
					UDR0 = 0x34;		//send corresponding signal
					_delay_ms(1000);
					UDR0 = (unsigned char)((int)tom_found+48);	//send no. of tomatoes found
					
					//send row and column no's where tomaotes are found
					for (int iter=0;iter<tom_found;iter++)
    5934:	de 01       	movw	r26, r28
    5936:	a5 55       	subi	r26, 0x55	; 85
    5938:	bf 4f       	sbci	r27, 0xFF	; 255
    593a:	fe 01       	movw	r30, r28
    593c:	e5 55       	subi	r30, 0x55	; 85
    593e:	ff 4f       	sbci	r31, 0xFF	; 255
    5940:	80 81       	ld	r24, Z
    5942:	91 81       	ldd	r25, Z+1	; 0x01
    5944:	01 96       	adiw	r24, 0x01	; 1
    5946:	11 96       	adiw	r26, 0x01	; 1
    5948:	9c 93       	st	X, r25
    594a:	8e 93       	st	-X, r24
    594c:	80 91 13 03 	lds	r24, 0x0313
    5950:	28 2f       	mov	r18, r24
    5952:	30 e0       	ldi	r19, 0x00	; 0
    5954:	fe 01       	movw	r30, r28
    5956:	e5 55       	subi	r30, 0x55	; 85
    5958:	ff 4f       	sbci	r31, 0xFF	; 255
    595a:	80 81       	ld	r24, Z
    595c:	91 81       	ldd	r25, Z+1	; 0x01
    595e:	82 17       	cp	r24, r18
    5960:	93 07       	cpc	r25, r19
    5962:	0c f4       	brge	.+2      	; 0x5966 <__vector_25+0xe14>
    5964:	67 ce       	rjmp	.-818    	; 0x5634 <__vector_25+0xae2>
    5966:	d0 c3       	rjmp	.+1952   	; 0x6108 <__vector_25+0x15b6>
					}
				}				
				//if not reached the end, 
				else
				{
					if (bot_mode==1)
    5968:	80 91 23 03 	lds	r24, 0x0323
    596c:	81 30       	cpi	r24, 0x01	; 1
    596e:	09 f0       	breq	.+2      	; 0x5972 <__vector_25+0xe20>
    5970:	c1 c0       	rjmp	.+386    	; 0x5af4 <__vector_25+0xfa2>
				    {
						PORTA=0x06;			//move forward and do line following in monitoring mode
    5972:	e2 e2       	ldi	r30, 0x22	; 34
    5974:	f0 e0       	ldi	r31, 0x00	; 0
    5976:	86 e0       	ldi	r24, 0x06	; 6
    5978:	80 83       	st	Z, r24
						velocity(250,250);
    597a:	8a ef       	ldi	r24, 0xFA	; 250
    597c:	6a ef       	ldi	r22, 0xFA	; 250
    597e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    5982:	fe 01       	movw	r30, r28
    5984:	ef 5a       	subi	r30, 0xAF	; 175
    5986:	ff 4f       	sbci	r31, 0xFF	; 255
    5988:	80 e0       	ldi	r24, 0x00	; 0
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	a8 e4       	ldi	r26, 0x48	; 72
    598e:	b3 e4       	ldi	r27, 0x43	; 67
    5990:	80 83       	st	Z, r24
    5992:	91 83       	std	Z+1, r25	; 0x01
    5994:	a2 83       	std	Z+2, r26	; 0x02
    5996:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5998:	8e 01       	movw	r16, r28
    599a:	03 5b       	subi	r16, 0xB3	; 179
    599c:	1f 4f       	sbci	r17, 0xFF	; 255
    599e:	fe 01       	movw	r30, r28
    59a0:	ef 5a       	subi	r30, 0xAF	; 175
    59a2:	ff 4f       	sbci	r31, 0xFF	; 255
    59a4:	60 81       	ld	r22, Z
    59a6:	71 81       	ldd	r23, Z+1	; 0x01
    59a8:	82 81       	ldd	r24, Z+2	; 0x02
    59aa:	93 81       	ldd	r25, Z+3	; 0x03
    59ac:	26 e6       	ldi	r18, 0x66	; 102
    59ae:	36 e6       	ldi	r19, 0x66	; 102
    59b0:	46 e6       	ldi	r20, 0x66	; 102
    59b2:	55 e4       	ldi	r21, 0x45	; 69
    59b4:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    59b8:	dc 01       	movw	r26, r24
    59ba:	cb 01       	movw	r24, r22
    59bc:	f8 01       	movw	r30, r16
    59be:	80 83       	st	Z, r24
    59c0:	91 83       	std	Z+1, r25	; 0x01
    59c2:	a2 83       	std	Z+2, r26	; 0x02
    59c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59c6:	fe 01       	movw	r30, r28
    59c8:	e3 5b       	subi	r30, 0xB3	; 179
    59ca:	ff 4f       	sbci	r31, 0xFF	; 255
    59cc:	60 81       	ld	r22, Z
    59ce:	71 81       	ldd	r23, Z+1	; 0x01
    59d0:	82 81       	ldd	r24, Z+2	; 0x02
    59d2:	93 81       	ldd	r25, Z+3	; 0x03
    59d4:	20 e0       	ldi	r18, 0x00	; 0
    59d6:	30 e0       	ldi	r19, 0x00	; 0
    59d8:	40 e8       	ldi	r20, 0x80	; 128
    59da:	5f e3       	ldi	r21, 0x3F	; 63
    59dc:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    59e0:	88 23       	and	r24, r24
    59e2:	44 f4       	brge	.+16     	; 0x59f4 <__vector_25+0xea2>
		__ticks = 1;
    59e4:	fe 01       	movw	r30, r28
    59e6:	e5 5b       	subi	r30, 0xB5	; 181
    59e8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ea:	81 e0       	ldi	r24, 0x01	; 1
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	91 83       	std	Z+1, r25	; 0x01
    59f0:	80 83       	st	Z, r24
    59f2:	64 c0       	rjmp	.+200    	; 0x5abc <__vector_25+0xf6a>
	else if (__tmp > 65535)
    59f4:	fe 01       	movw	r30, r28
    59f6:	e3 5b       	subi	r30, 0xB3	; 179
    59f8:	ff 4f       	sbci	r31, 0xFF	; 255
    59fa:	60 81       	ld	r22, Z
    59fc:	71 81       	ldd	r23, Z+1	; 0x01
    59fe:	82 81       	ldd	r24, Z+2	; 0x02
    5a00:	93 81       	ldd	r25, Z+3	; 0x03
    5a02:	20 e0       	ldi	r18, 0x00	; 0
    5a04:	3f ef       	ldi	r19, 0xFF	; 255
    5a06:	4f e7       	ldi	r20, 0x7F	; 127
    5a08:	57 e4       	ldi	r21, 0x47	; 71
    5a0a:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5a0e:	18 16       	cp	r1, r24
    5a10:	0c f0       	brlt	.+2      	; 0x5a14 <__vector_25+0xec2>
    5a12:	43 c0       	rjmp	.+134    	; 0x5a9a <__vector_25+0xf48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a14:	fe 01       	movw	r30, r28
    5a16:	ef 5a       	subi	r30, 0xAF	; 175
    5a18:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1a:	60 81       	ld	r22, Z
    5a1c:	71 81       	ldd	r23, Z+1	; 0x01
    5a1e:	82 81       	ldd	r24, Z+2	; 0x02
    5a20:	93 81       	ldd	r25, Z+3	; 0x03
    5a22:	20 e0       	ldi	r18, 0x00	; 0
    5a24:	30 e0       	ldi	r19, 0x00	; 0
    5a26:	40 e2       	ldi	r20, 0x20	; 32
    5a28:	51 e4       	ldi	r21, 0x41	; 65
    5a2a:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5a2e:	dc 01       	movw	r26, r24
    5a30:	cb 01       	movw	r24, r22
    5a32:	8e 01       	movw	r16, r28
    5a34:	05 5b       	subi	r16, 0xB5	; 181
    5a36:	1f 4f       	sbci	r17, 0xFF	; 255
    5a38:	bc 01       	movw	r22, r24
    5a3a:	cd 01       	movw	r24, r26
    5a3c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5a40:	dc 01       	movw	r26, r24
    5a42:	cb 01       	movw	r24, r22
    5a44:	f8 01       	movw	r30, r16
    5a46:	91 83       	std	Z+1, r25	; 0x01
    5a48:	80 83       	st	Z, r24
    5a4a:	1f c0       	rjmp	.+62     	; 0x5a8a <__vector_25+0xf38>
    5a4c:	fe 01       	movw	r30, r28
    5a4e:	e7 5b       	subi	r30, 0xB7	; 183
    5a50:	ff 4f       	sbci	r31, 0xFF	; 255
    5a52:	80 e7       	ldi	r24, 0x70	; 112
    5a54:	91 e0       	ldi	r25, 0x01	; 1
    5a56:	91 83       	std	Z+1, r25	; 0x01
    5a58:	80 83       	st	Z, r24
    5a5a:	fe 01       	movw	r30, r28
    5a5c:	e7 5b       	subi	r30, 0xB7	; 183
    5a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a60:	80 81       	ld	r24, Z
    5a62:	91 81       	ldd	r25, Z+1	; 0x01
    5a64:	01 97       	sbiw	r24, 0x01	; 1
    5a66:	f1 f7       	brne	.-4      	; 0x5a64 <__vector_25+0xf12>
    5a68:	fe 01       	movw	r30, r28
    5a6a:	e7 5b       	subi	r30, 0xB7	; 183
    5a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6e:	91 83       	std	Z+1, r25	; 0x01
    5a70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a72:	de 01       	movw	r26, r28
    5a74:	a5 5b       	subi	r26, 0xB5	; 181
    5a76:	bf 4f       	sbci	r27, 0xFF	; 255
    5a78:	fe 01       	movw	r30, r28
    5a7a:	e5 5b       	subi	r30, 0xB5	; 181
    5a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7e:	80 81       	ld	r24, Z
    5a80:	91 81       	ldd	r25, Z+1	; 0x01
    5a82:	01 97       	sbiw	r24, 0x01	; 1
    5a84:	11 96       	adiw	r26, 0x01	; 1
    5a86:	9c 93       	st	X, r25
    5a88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a8a:	fe 01       	movw	r30, r28
    5a8c:	e5 5b       	subi	r30, 0xB5	; 181
    5a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a90:	80 81       	ld	r24, Z
    5a92:	91 81       	ldd	r25, Z+1	; 0x01
    5a94:	00 97       	sbiw	r24, 0x00	; 0
    5a96:	d1 f6       	brne	.-76     	; 0x5a4c <__vector_25+0xefa>
    5a98:	27 c0       	rjmp	.+78     	; 0x5ae8 <__vector_25+0xf96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a9a:	8e 01       	movw	r16, r28
    5a9c:	05 5b       	subi	r16, 0xB5	; 181
    5a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5aa0:	fe 01       	movw	r30, r28
    5aa2:	e3 5b       	subi	r30, 0xB3	; 179
    5aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa6:	60 81       	ld	r22, Z
    5aa8:	71 81       	ldd	r23, Z+1	; 0x01
    5aaa:	82 81       	ldd	r24, Z+2	; 0x02
    5aac:	93 81       	ldd	r25, Z+3	; 0x03
    5aae:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5ab2:	dc 01       	movw	r26, r24
    5ab4:	cb 01       	movw	r24, r22
    5ab6:	f8 01       	movw	r30, r16
    5ab8:	91 83       	std	Z+1, r25	; 0x01
    5aba:	80 83       	st	Z, r24
    5abc:	de 01       	movw	r26, r28
    5abe:	a9 5b       	subi	r26, 0xB9	; 185
    5ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ac2:	fe 01       	movw	r30, r28
    5ac4:	e5 5b       	subi	r30, 0xB5	; 181
    5ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac8:	80 81       	ld	r24, Z
    5aca:	91 81       	ldd	r25, Z+1	; 0x01
    5acc:	8d 93       	st	X+, r24
    5ace:	9c 93       	st	X, r25
    5ad0:	fe 01       	movw	r30, r28
    5ad2:	e9 5b       	subi	r30, 0xB9	; 185
    5ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad6:	80 81       	ld	r24, Z
    5ad8:	91 81       	ldd	r25, Z+1	; 0x01
    5ada:	01 97       	sbiw	r24, 0x01	; 1
    5adc:	f1 f7       	brne	.-4      	; 0x5ada <__vector_25+0xf88>
    5ade:	fe 01       	movw	r30, r28
    5ae0:	e9 5b       	subi	r30, 0xB9	; 185
    5ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae4:	91 83       	std	Z+1, r25	; 0x01
    5ae6:	80 83       	st	Z, r24
						_delay_ms(200);
						PORTA=0x00;
    5ae8:	e2 e2       	ldi	r30, 0x22	; 34
    5aea:	f0 e0       	ldi	r31, 0x00	; 0
    5aec:	10 82       	st	Z, r1
						line_follower();
    5aee:	0e 94 60 23 	call	0x46c0	; 0x46c0 <line_follower>
    5af2:	0a c3       	rjmp	.+1556   	; 0x6108 <__vector_25+0x15b6>
						//UDR0 = 0x31;
					}
					else
						UDR0 = 0x31;		//don't move forward, repeat there itself
    5af4:	e6 ec       	ldi	r30, 0xC6	; 198
    5af6:	f0 e0       	ldi	r31, 0x00	; 0
    5af8:	81 e3       	ldi	r24, 0x31	; 49
    5afa:	80 83       	st	Z, r24
    5afc:	05 c3       	rjmp	.+1546   	; 0x6108 <__vector_25+0x15b6>
				}		
				
			}
			else
			{
				UDR0 = 0x30;
    5afe:	e6 ec       	ldi	r30, 0xC6	; 198
    5b00:	f0 e0       	ldi	r31, 0x00	; 0
    5b02:	80 e3       	ldi	r24, 0x30	; 48
    5b04:	80 83       	st	Z, r24
    5b06:	fe 01       	movw	r30, r28
    5b08:	ed 5b       	subi	r30, 0xBD	; 189
    5b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0c:	80 e0       	ldi	r24, 0x00	; 0
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	aa ef       	ldi	r26, 0xFA	; 250
    5b12:	b4 e4       	ldi	r27, 0x44	; 68
    5b14:	80 83       	st	Z, r24
    5b16:	91 83       	std	Z+1, r25	; 0x01
    5b18:	a2 83       	std	Z+2, r26	; 0x02
    5b1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b1c:	8e 01       	movw	r16, r28
    5b1e:	01 5c       	subi	r16, 0xC1	; 193
    5b20:	1f 4f       	sbci	r17, 0xFF	; 255
    5b22:	fe 01       	movw	r30, r28
    5b24:	ed 5b       	subi	r30, 0xBD	; 189
    5b26:	ff 4f       	sbci	r31, 0xFF	; 255
    5b28:	60 81       	ld	r22, Z
    5b2a:	71 81       	ldd	r23, Z+1	; 0x01
    5b2c:	82 81       	ldd	r24, Z+2	; 0x02
    5b2e:	93 81       	ldd	r25, Z+3	; 0x03
    5b30:	26 e6       	ldi	r18, 0x66	; 102
    5b32:	36 e6       	ldi	r19, 0x66	; 102
    5b34:	46 e6       	ldi	r20, 0x66	; 102
    5b36:	55 e4       	ldi	r21, 0x45	; 69
    5b38:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5b3c:	dc 01       	movw	r26, r24
    5b3e:	cb 01       	movw	r24, r22
    5b40:	f8 01       	movw	r30, r16
    5b42:	80 83       	st	Z, r24
    5b44:	91 83       	std	Z+1, r25	; 0x01
    5b46:	a2 83       	std	Z+2, r26	; 0x02
    5b48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b4a:	fe 01       	movw	r30, r28
    5b4c:	ff 96       	adiw	r30, 0x3f	; 63
    5b4e:	60 81       	ld	r22, Z
    5b50:	71 81       	ldd	r23, Z+1	; 0x01
    5b52:	82 81       	ldd	r24, Z+2	; 0x02
    5b54:	93 81       	ldd	r25, Z+3	; 0x03
    5b56:	20 e0       	ldi	r18, 0x00	; 0
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	40 e8       	ldi	r20, 0x80	; 128
    5b5c:	5f e3       	ldi	r21, 0x3F	; 63
    5b5e:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5b62:	88 23       	and	r24, r24
    5b64:	2c f4       	brge	.+10     	; 0x5b70 <__vector_25+0x101e>
		__ticks = 1;
    5b66:	81 e0       	ldi	r24, 0x01	; 1
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	9e af       	std	Y+62, r25	; 0x3e
    5b6c:	8d af       	std	Y+61, r24	; 0x3d
    5b6e:	46 c0       	rjmp	.+140    	; 0x5bfc <__vector_25+0x10aa>
	else if (__tmp > 65535)
    5b70:	fe 01       	movw	r30, r28
    5b72:	ff 96       	adiw	r30, 0x3f	; 63
    5b74:	60 81       	ld	r22, Z
    5b76:	71 81       	ldd	r23, Z+1	; 0x01
    5b78:	82 81       	ldd	r24, Z+2	; 0x02
    5b7a:	93 81       	ldd	r25, Z+3	; 0x03
    5b7c:	20 e0       	ldi	r18, 0x00	; 0
    5b7e:	3f ef       	ldi	r19, 0xFF	; 255
    5b80:	4f e7       	ldi	r20, 0x7F	; 127
    5b82:	57 e4       	ldi	r21, 0x47	; 71
    5b84:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5b88:	18 16       	cp	r1, r24
    5b8a:	64 f5       	brge	.+88     	; 0x5be4 <__vector_25+0x1092>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b8c:	fe 01       	movw	r30, r28
    5b8e:	ed 5b       	subi	r30, 0xBD	; 189
    5b90:	ff 4f       	sbci	r31, 0xFF	; 255
    5b92:	60 81       	ld	r22, Z
    5b94:	71 81       	ldd	r23, Z+1	; 0x01
    5b96:	82 81       	ldd	r24, Z+2	; 0x02
    5b98:	93 81       	ldd	r25, Z+3	; 0x03
    5b9a:	20 e0       	ldi	r18, 0x00	; 0
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	40 e2       	ldi	r20, 0x20	; 32
    5ba0:	51 e4       	ldi	r21, 0x41	; 65
    5ba2:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5ba6:	dc 01       	movw	r26, r24
    5ba8:	cb 01       	movw	r24, r22
    5baa:	bc 01       	movw	r22, r24
    5bac:	cd 01       	movw	r24, r26
    5bae:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	9e af       	std	Y+62, r25	; 0x3e
    5bb8:	8d af       	std	Y+61, r24	; 0x3d
    5bba:	0f c0       	rjmp	.+30     	; 0x5bda <__vector_25+0x1088>
    5bbc:	80 e7       	ldi	r24, 0x70	; 112
    5bbe:	91 e0       	ldi	r25, 0x01	; 1
    5bc0:	9c af       	std	Y+60, r25	; 0x3c
    5bc2:	8b af       	std	Y+59, r24	; 0x3b
    5bc4:	8b ad       	ldd	r24, Y+59	; 0x3b
    5bc6:	9c ad       	ldd	r25, Y+60	; 0x3c
    5bc8:	01 97       	sbiw	r24, 0x01	; 1
    5bca:	f1 f7       	brne	.-4      	; 0x5bc8 <__vector_25+0x1076>
    5bcc:	9c af       	std	Y+60, r25	; 0x3c
    5bce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    5bd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    5bd4:	01 97       	sbiw	r24, 0x01	; 1
    5bd6:	9e af       	std	Y+62, r25	; 0x3e
    5bd8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bda:	8d ad       	ldd	r24, Y+61	; 0x3d
    5bdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    5bde:	00 97       	sbiw	r24, 0x00	; 0
    5be0:	69 f7       	brne	.-38     	; 0x5bbc <__vector_25+0x106a>
    5be2:	16 c0       	rjmp	.+44     	; 0x5c10 <__vector_25+0x10be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5be4:	fe 01       	movw	r30, r28
    5be6:	ff 96       	adiw	r30, 0x3f	; 63
    5be8:	60 81       	ld	r22, Z
    5bea:	71 81       	ldd	r23, Z+1	; 0x01
    5bec:	82 81       	ldd	r24, Z+2	; 0x02
    5bee:	93 81       	ldd	r25, Z+3	; 0x03
    5bf0:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	cb 01       	movw	r24, r22
    5bf8:	9e af       	std	Y+62, r25	; 0x3e
    5bfa:	8d af       	std	Y+61, r24	; 0x3d
    5bfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    5bfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    5c00:	9a af       	std	Y+58, r25	; 0x3a
    5c02:	89 af       	std	Y+57, r24	; 0x39
    5c04:	89 ad       	ldd	r24, Y+57	; 0x39
    5c06:	9a ad       	ldd	r25, Y+58	; 0x3a
    5c08:	01 97       	sbiw	r24, 0x01	; 1
    5c0a:	f1 f7       	brne	.-4      	; 0x5c08 <__vector_25+0x10b6>
    5c0c:	9a af       	std	Y+58, r25	; 0x3a
    5c0e:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(2000);
				pluck_fruit();
    5c10:	0e 94 42 09 	call	0x1284	; 0x1284 <pluck_fruit>
				initial_angle+=15;
    5c14:	80 91 35 03 	lds	r24, 0x0335
    5c18:	81 5f       	subi	r24, 0xF1	; 241
    5c1a:	80 93 35 03 	sts	0x0335, r24
				servo_2(initial_angle);
    5c1e:	80 91 35 03 	lds	r24, 0x0335
    5c22:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
    5c26:	70 c2       	rjmp	.+1248   	; 0x6108 <__vector_25+0x15b6>
			}
		}		

		
		else if(data == 0x31) //ASCII value of 1, tomato found
    5c28:	80 91 3a 03 	lds	r24, 0x033A
    5c2c:	81 33       	cpi	r24, 0x31	; 49
    5c2e:	09 f0       	breq	.+2      	; 0x5c32 <__vector_25+0x10e0>
    5c30:	53 c2       	rjmp	.+1190   	; 0x60d8 <__vector_25+0x1586>
		{
			if (bot_mode==2)	//plucking mode
    5c32:	80 91 23 03 	lds	r24, 0x0323
    5c36:	82 30       	cpi	r24, 0x02	; 2
    5c38:	39 f4       	brne	.+14     	; 0x5c48 <__vector_25+0x10f6>
				num_read_mode = 1;	//read x and y values of center to align
    5c3a:	81 e0       	ldi	r24, 0x01	; 1
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	90 93 18 03 	sts	0x0318, r25
    5c42:	80 93 17 03 	sts	0x0317, r24
    5c46:	60 c2       	rjmp	.+1216   	; 0x6108 <__vector_25+0x15b6>
			else if (bot_mode==1) 	//monitoring mode
    5c48:	80 91 23 03 	lds	r24, 0x0323
    5c4c:	81 30       	cpi	r24, 0x01	; 1
    5c4e:	09 f0       	breq	.+2      	; 0x5c52 <__vector_25+0x1100>
    5c50:	5b c2       	rjmp	.+1206   	; 0x6108 <__vector_25+0x15b6>
			{
				num_read_mode = 0;
    5c52:	10 92 18 03 	sts	0x0318, r1
    5c56:	10 92 17 03 	sts	0x0317, r1
				row_found_arr[tom_found] = row_found;	//store the row where it is found
    5c5a:	80 91 13 03 	lds	r24, 0x0313
    5c5e:	88 2f       	mov	r24, r24
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	20 91 11 03 	lds	r18, 0x0311
    5c66:	fc 01       	movw	r30, r24
    5c68:	ea 5d       	subi	r30, 0xDA	; 218
    5c6a:	fc 4f       	sbci	r31, 0xFC	; 252
    5c6c:	20 83       	st	Z, r18
				col_found_arr[tom_found] = col_found;	//store the col where it is found
    5c6e:	80 91 13 03 	lds	r24, 0x0313
    5c72:	88 2f       	mov	r24, r24
    5c74:	90 e0       	ldi	r25, 0x00	; 0
    5c76:	20 91 12 03 	lds	r18, 0x0312
    5c7a:	fc 01       	movw	r30, r24
    5c7c:	ef 5b       	subi	r30, 0xBF	; 191
    5c7e:	fc 4f       	sbci	r31, 0xFC	; 252
    5c80:	20 83       	st	Z, r18
				tom_found++;	//increase the no. of tomatoes found
    5c82:	80 91 13 03 	lds	r24, 0x0313
    5c86:	8f 5f       	subi	r24, 0xFF	; 255
    5c88:	80 93 13 03 	sts	0x0313, r24

				initial_angle = 120;	//move the hand to top
    5c8c:	88 e7       	ldi	r24, 0x78	; 120
    5c8e:	80 93 35 03 	sts	0x0335, r24
				servo_2(initial_angle);
    5c92:	80 91 35 03 	lds	r24, 0x0335
    5c96:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>

				if (end_reached==1)		//if end of grid reached
    5c9a:	80 91 14 03 	lds	r24, 0x0314
    5c9e:	81 30       	cpi	r24, 0x01	; 1
    5ca0:	09 f0       	breq	.+2      	; 0x5ca4 <__vector_25+0x1152>
    5ca2:	9a c1       	rjmp	.+820    	; 0x5fd8 <__vector_25+0x1486>
				{
					UDR0 = 0x34;	//indicate the signal
    5ca4:	e6 ec       	ldi	r30, 0xC6	; 198
    5ca6:	f0 e0       	ldi	r31, 0x00	; 0
    5ca8:	84 e3       	ldi	r24, 0x34	; 52
    5caa:	80 83       	st	Z, r24
    5cac:	80 e0       	ldi	r24, 0x00	; 0
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	aa e7       	ldi	r26, 0x7A	; 122
    5cb2:	b4 e4       	ldi	r27, 0x44	; 68
    5cb4:	8d ab       	std	Y+53, r24	; 0x35
    5cb6:	9e ab       	std	Y+54, r25	; 0x36
    5cb8:	af ab       	std	Y+55, r26	; 0x37
    5cba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cbc:	6d a9       	ldd	r22, Y+53	; 0x35
    5cbe:	7e a9       	ldd	r23, Y+54	; 0x36
    5cc0:	8f a9       	ldd	r24, Y+55	; 0x37
    5cc2:	98 ad       	ldd	r25, Y+56	; 0x38
    5cc4:	26 e6       	ldi	r18, 0x66	; 102
    5cc6:	36 e6       	ldi	r19, 0x66	; 102
    5cc8:	46 e6       	ldi	r20, 0x66	; 102
    5cca:	55 e4       	ldi	r21, 0x45	; 69
    5ccc:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5cd0:	dc 01       	movw	r26, r24
    5cd2:	cb 01       	movw	r24, r22
    5cd4:	89 ab       	std	Y+49, r24	; 0x31
    5cd6:	9a ab       	std	Y+50, r25	; 0x32
    5cd8:	ab ab       	std	Y+51, r26	; 0x33
    5cda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5cdc:	69 a9       	ldd	r22, Y+49	; 0x31
    5cde:	7a a9       	ldd	r23, Y+50	; 0x32
    5ce0:	8b a9       	ldd	r24, Y+51	; 0x33
    5ce2:	9c a9       	ldd	r25, Y+52	; 0x34
    5ce4:	20 e0       	ldi	r18, 0x00	; 0
    5ce6:	30 e0       	ldi	r19, 0x00	; 0
    5ce8:	40 e8       	ldi	r20, 0x80	; 128
    5cea:	5f e3       	ldi	r21, 0x3F	; 63
    5cec:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5cf0:	88 23       	and	r24, r24
    5cf2:	2c f4       	brge	.+10     	; 0x5cfe <__vector_25+0x11ac>
		__ticks = 1;
    5cf4:	81 e0       	ldi	r24, 0x01	; 1
    5cf6:	90 e0       	ldi	r25, 0x00	; 0
    5cf8:	98 ab       	std	Y+48, r25	; 0x30
    5cfa:	8f a7       	std	Y+47, r24	; 0x2f
    5cfc:	3f c0       	rjmp	.+126    	; 0x5d7c <__vector_25+0x122a>
	else if (__tmp > 65535)
    5cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    5d00:	7a a9       	ldd	r23, Y+50	; 0x32
    5d02:	8b a9       	ldd	r24, Y+51	; 0x33
    5d04:	9c a9       	ldd	r25, Y+52	; 0x34
    5d06:	20 e0       	ldi	r18, 0x00	; 0
    5d08:	3f ef       	ldi	r19, 0xFF	; 255
    5d0a:	4f e7       	ldi	r20, 0x7F	; 127
    5d0c:	57 e4       	ldi	r21, 0x47	; 71
    5d0e:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5d12:	18 16       	cp	r1, r24
    5d14:	4c f5       	brge	.+82     	; 0x5d68 <__vector_25+0x1216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d16:	6d a9       	ldd	r22, Y+53	; 0x35
    5d18:	7e a9       	ldd	r23, Y+54	; 0x36
    5d1a:	8f a9       	ldd	r24, Y+55	; 0x37
    5d1c:	98 ad       	ldd	r25, Y+56	; 0x38
    5d1e:	20 e0       	ldi	r18, 0x00	; 0
    5d20:	30 e0       	ldi	r19, 0x00	; 0
    5d22:	40 e2       	ldi	r20, 0x20	; 32
    5d24:	51 e4       	ldi	r21, 0x41	; 65
    5d26:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5d2a:	dc 01       	movw	r26, r24
    5d2c:	cb 01       	movw	r24, r22
    5d2e:	bc 01       	movw	r22, r24
    5d30:	cd 01       	movw	r24, r26
    5d32:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5d36:	dc 01       	movw	r26, r24
    5d38:	cb 01       	movw	r24, r22
    5d3a:	98 ab       	std	Y+48, r25	; 0x30
    5d3c:	8f a7       	std	Y+47, r24	; 0x2f
    5d3e:	0f c0       	rjmp	.+30     	; 0x5d5e <__vector_25+0x120c>
    5d40:	80 e7       	ldi	r24, 0x70	; 112
    5d42:	91 e0       	ldi	r25, 0x01	; 1
    5d44:	9e a7       	std	Y+46, r25	; 0x2e
    5d46:	8d a7       	std	Y+45, r24	; 0x2d
    5d48:	8d a5       	ldd	r24, Y+45	; 0x2d
    5d4a:	9e a5       	ldd	r25, Y+46	; 0x2e
    5d4c:	01 97       	sbiw	r24, 0x01	; 1
    5d4e:	f1 f7       	brne	.-4      	; 0x5d4c <__vector_25+0x11fa>
    5d50:	9e a7       	std	Y+46, r25	; 0x2e
    5d52:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d54:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d56:	98 a9       	ldd	r25, Y+48	; 0x30
    5d58:	01 97       	sbiw	r24, 0x01	; 1
    5d5a:	98 ab       	std	Y+48, r25	; 0x30
    5d5c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d60:	98 a9       	ldd	r25, Y+48	; 0x30
    5d62:	00 97       	sbiw	r24, 0x00	; 0
    5d64:	69 f7       	brne	.-38     	; 0x5d40 <__vector_25+0x11ee>
    5d66:	14 c0       	rjmp	.+40     	; 0x5d90 <__vector_25+0x123e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d68:	69 a9       	ldd	r22, Y+49	; 0x31
    5d6a:	7a a9       	ldd	r23, Y+50	; 0x32
    5d6c:	8b a9       	ldd	r24, Y+51	; 0x33
    5d6e:	9c a9       	ldd	r25, Y+52	; 0x34
    5d70:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5d74:	dc 01       	movw	r26, r24
    5d76:	cb 01       	movw	r24, r22
    5d78:	98 ab       	std	Y+48, r25	; 0x30
    5d7a:	8f a7       	std	Y+47, r24	; 0x2f
    5d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    5d80:	9c a7       	std	Y+44, r25	; 0x2c
    5d82:	8b a7       	std	Y+43, r24	; 0x2b
    5d84:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d86:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d88:	01 97       	sbiw	r24, 0x01	; 1
    5d8a:	f1 f7       	brne	.-4      	; 0x5d88 <__vector_25+0x1236>
    5d8c:	9c a7       	std	Y+44, r25	; 0x2c
    5d8e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					UDR0 = (unsigned char)((int)tom_found+48); //send the number of tomatoes found
    5d90:	e6 ec       	ldi	r30, 0xC6	; 198
    5d92:	f0 e0       	ldi	r31, 0x00	; 0
    5d94:	80 91 13 03 	lds	r24, 0x0313
    5d98:	80 5d       	subi	r24, 0xD0	; 208
    5d9a:	80 83       	st	Z, r24
				
					//send the row no and col no where tomatoes are found
					for (int iter=0;iter<tom_found;iter++)
    5d9c:	fe 01       	movw	r30, r28
    5d9e:	e7 55       	subi	r30, 0x57	; 87
    5da0:	ff 4f       	sbci	r31, 0xFF	; 255
    5da2:	11 82       	std	Z+1, r1	; 0x01
    5da4:	10 82       	st	Z, r1
    5da6:	0a c1       	rjmp	.+532    	; 0x5fbc <__vector_25+0x146a>
    5da8:	80 e0       	ldi	r24, 0x00	; 0
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	aa e7       	ldi	r26, 0x7A	; 122
    5dae:	b4 e4       	ldi	r27, 0x44	; 68
    5db0:	8f a3       	std	Y+39, r24	; 0x27
    5db2:	98 a7       	std	Y+40, r25	; 0x28
    5db4:	a9 a7       	std	Y+41, r26	; 0x29
    5db6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5db8:	6f a1       	ldd	r22, Y+39	; 0x27
    5dba:	78 a5       	ldd	r23, Y+40	; 0x28
    5dbc:	89 a5       	ldd	r24, Y+41	; 0x29
    5dbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    5dc0:	26 e6       	ldi	r18, 0x66	; 102
    5dc2:	36 e6       	ldi	r19, 0x66	; 102
    5dc4:	46 e6       	ldi	r20, 0x66	; 102
    5dc6:	55 e4       	ldi	r21, 0x45	; 69
    5dc8:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5dcc:	dc 01       	movw	r26, r24
    5dce:	cb 01       	movw	r24, r22
    5dd0:	8b a3       	std	Y+35, r24	; 0x23
    5dd2:	9c a3       	std	Y+36, r25	; 0x24
    5dd4:	ad a3       	std	Y+37, r26	; 0x25
    5dd6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5dd8:	6b a1       	ldd	r22, Y+35	; 0x23
    5dda:	7c a1       	ldd	r23, Y+36	; 0x24
    5ddc:	8d a1       	ldd	r24, Y+37	; 0x25
    5dde:	9e a1       	ldd	r25, Y+38	; 0x26
    5de0:	20 e0       	ldi	r18, 0x00	; 0
    5de2:	30 e0       	ldi	r19, 0x00	; 0
    5de4:	40 e8       	ldi	r20, 0x80	; 128
    5de6:	5f e3       	ldi	r21, 0x3F	; 63
    5de8:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5dec:	88 23       	and	r24, r24
    5dee:	2c f4       	brge	.+10     	; 0x5dfa <__vector_25+0x12a8>
		__ticks = 1;
    5df0:	81 e0       	ldi	r24, 0x01	; 1
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	9a a3       	std	Y+34, r25	; 0x22
    5df6:	89 a3       	std	Y+33, r24	; 0x21
    5df8:	3f c0       	rjmp	.+126    	; 0x5e78 <__vector_25+0x1326>
	else if (__tmp > 65535)
    5dfa:	6b a1       	ldd	r22, Y+35	; 0x23
    5dfc:	7c a1       	ldd	r23, Y+36	; 0x24
    5dfe:	8d a1       	ldd	r24, Y+37	; 0x25
    5e00:	9e a1       	ldd	r25, Y+38	; 0x26
    5e02:	20 e0       	ldi	r18, 0x00	; 0
    5e04:	3f ef       	ldi	r19, 0xFF	; 255
    5e06:	4f e7       	ldi	r20, 0x7F	; 127
    5e08:	57 e4       	ldi	r21, 0x47	; 71
    5e0a:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5e0e:	18 16       	cp	r1, r24
    5e10:	4c f5       	brge	.+82     	; 0x5e64 <__vector_25+0x1312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e12:	6f a1       	ldd	r22, Y+39	; 0x27
    5e14:	78 a5       	ldd	r23, Y+40	; 0x28
    5e16:	89 a5       	ldd	r24, Y+41	; 0x29
    5e18:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e1a:	20 e0       	ldi	r18, 0x00	; 0
    5e1c:	30 e0       	ldi	r19, 0x00	; 0
    5e1e:	40 e2       	ldi	r20, 0x20	; 32
    5e20:	51 e4       	ldi	r21, 0x41	; 65
    5e22:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5e26:	dc 01       	movw	r26, r24
    5e28:	cb 01       	movw	r24, r22
    5e2a:	bc 01       	movw	r22, r24
    5e2c:	cd 01       	movw	r24, r26
    5e2e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5e32:	dc 01       	movw	r26, r24
    5e34:	cb 01       	movw	r24, r22
    5e36:	9a a3       	std	Y+34, r25	; 0x22
    5e38:	89 a3       	std	Y+33, r24	; 0x21
    5e3a:	0f c0       	rjmp	.+30     	; 0x5e5a <__vector_25+0x1308>
    5e3c:	80 e7       	ldi	r24, 0x70	; 112
    5e3e:	91 e0       	ldi	r25, 0x01	; 1
    5e40:	98 a3       	std	Y+32, r25	; 0x20
    5e42:	8f 8f       	std	Y+31, r24	; 0x1f
    5e44:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5e46:	98 a1       	ldd	r25, Y+32	; 0x20
    5e48:	01 97       	sbiw	r24, 0x01	; 1
    5e4a:	f1 f7       	brne	.-4      	; 0x5e48 <__vector_25+0x12f6>
    5e4c:	98 a3       	std	Y+32, r25	; 0x20
    5e4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e50:	89 a1       	ldd	r24, Y+33	; 0x21
    5e52:	9a a1       	ldd	r25, Y+34	; 0x22
    5e54:	01 97       	sbiw	r24, 0x01	; 1
    5e56:	9a a3       	std	Y+34, r25	; 0x22
    5e58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    5e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    5e5e:	00 97       	sbiw	r24, 0x00	; 0
    5e60:	69 f7       	brne	.-38     	; 0x5e3c <__vector_25+0x12ea>
    5e62:	14 c0       	rjmp	.+40     	; 0x5e8c <__vector_25+0x133a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e64:	6b a1       	ldd	r22, Y+35	; 0x23
    5e66:	7c a1       	ldd	r23, Y+36	; 0x24
    5e68:	8d a1       	ldd	r24, Y+37	; 0x25
    5e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    5e6c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5e70:	dc 01       	movw	r26, r24
    5e72:	cb 01       	movw	r24, r22
    5e74:	9a a3       	std	Y+34, r25	; 0x22
    5e76:	89 a3       	std	Y+33, r24	; 0x21
    5e78:	89 a1       	ldd	r24, Y+33	; 0x21
    5e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    5e7c:	9e 8f       	std	Y+30, r25	; 0x1e
    5e7e:	8d 8f       	std	Y+29, r24	; 0x1d
    5e80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5e82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e84:	01 97       	sbiw	r24, 0x01	; 1
    5e86:	f1 f7       	brne	.-4      	; 0x5e84 <__vector_25+0x1332>
    5e88:	9e 8f       	std	Y+30, r25	; 0x1e
    5e8a:	8d 8f       	std	Y+29, r24	; 0x1d
					{
						_delay_ms(1000);
						UDR0 = (unsigned char)((int)row_found_arr[iter]+48);
    5e8c:	a6 ec       	ldi	r26, 0xC6	; 198
    5e8e:	b0 e0       	ldi	r27, 0x00	; 0
    5e90:	fe 01       	movw	r30, r28
    5e92:	e7 55       	subi	r30, 0x57	; 87
    5e94:	ff 4f       	sbci	r31, 0xFF	; 255
    5e96:	80 81       	ld	r24, Z
    5e98:	91 81       	ldd	r25, Z+1	; 0x01
    5e9a:	fc 01       	movw	r30, r24
    5e9c:	ea 5d       	subi	r30, 0xDA	; 218
    5e9e:	fc 4f       	sbci	r31, 0xFC	; 252
    5ea0:	80 81       	ld	r24, Z
    5ea2:	80 5d       	subi	r24, 0xD0	; 208
    5ea4:	8c 93       	st	X, r24
    5ea6:	80 e0       	ldi	r24, 0x00	; 0
    5ea8:	90 e0       	ldi	r25, 0x00	; 0
    5eaa:	aa e7       	ldi	r26, 0x7A	; 122
    5eac:	b4 e4       	ldi	r27, 0x44	; 68
    5eae:	89 8f       	std	Y+25, r24	; 0x19
    5eb0:	9a 8f       	std	Y+26, r25	; 0x1a
    5eb2:	ab 8f       	std	Y+27, r26	; 0x1b
    5eb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    5eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ebe:	26 e6       	ldi	r18, 0x66	; 102
    5ec0:	36 e6       	ldi	r19, 0x66	; 102
    5ec2:	46 e6       	ldi	r20, 0x66	; 102
    5ec4:	55 e4       	ldi	r21, 0x45	; 69
    5ec6:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5eca:	dc 01       	movw	r26, r24
    5ecc:	cb 01       	movw	r24, r22
    5ece:	8d 8b       	std	Y+21, r24	; 0x15
    5ed0:	9e 8b       	std	Y+22, r25	; 0x16
    5ed2:	af 8b       	std	Y+23, r26	; 0x17
    5ed4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ed6:	6d 89       	ldd	r22, Y+21	; 0x15
    5ed8:	7e 89       	ldd	r23, Y+22	; 0x16
    5eda:	8f 89       	ldd	r24, Y+23	; 0x17
    5edc:	98 8d       	ldd	r25, Y+24	; 0x18
    5ede:	20 e0       	ldi	r18, 0x00	; 0
    5ee0:	30 e0       	ldi	r19, 0x00	; 0
    5ee2:	40 e8       	ldi	r20, 0x80	; 128
    5ee4:	5f e3       	ldi	r21, 0x3F	; 63
    5ee6:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    5eea:	88 23       	and	r24, r24
    5eec:	2c f4       	brge	.+10     	; 0x5ef8 <__vector_25+0x13a6>
		__ticks = 1;
    5eee:	81 e0       	ldi	r24, 0x01	; 1
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	9c 8b       	std	Y+20, r25	; 0x14
    5ef4:	8b 8b       	std	Y+19, r24	; 0x13
    5ef6:	3f c0       	rjmp	.+126    	; 0x5f76 <__vector_25+0x1424>
	else if (__tmp > 65535)
    5ef8:	6d 89       	ldd	r22, Y+21	; 0x15
    5efa:	7e 89       	ldd	r23, Y+22	; 0x16
    5efc:	8f 89       	ldd	r24, Y+23	; 0x17
    5efe:	98 8d       	ldd	r25, Y+24	; 0x18
    5f00:	20 e0       	ldi	r18, 0x00	; 0
    5f02:	3f ef       	ldi	r19, 0xFF	; 255
    5f04:	4f e7       	ldi	r20, 0x7F	; 127
    5f06:	57 e4       	ldi	r21, 0x47	; 71
    5f08:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    5f0c:	18 16       	cp	r1, r24
    5f0e:	4c f5       	brge	.+82     	; 0x5f62 <__vector_25+0x1410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f10:	69 8d       	ldd	r22, Y+25	; 0x19
    5f12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f18:	20 e0       	ldi	r18, 0x00	; 0
    5f1a:	30 e0       	ldi	r19, 0x00	; 0
    5f1c:	40 e2       	ldi	r20, 0x20	; 32
    5f1e:	51 e4       	ldi	r21, 0x41	; 65
    5f20:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    5f24:	dc 01       	movw	r26, r24
    5f26:	cb 01       	movw	r24, r22
    5f28:	bc 01       	movw	r22, r24
    5f2a:	cd 01       	movw	r24, r26
    5f2c:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5f30:	dc 01       	movw	r26, r24
    5f32:	cb 01       	movw	r24, r22
    5f34:	9c 8b       	std	Y+20, r25	; 0x14
    5f36:	8b 8b       	std	Y+19, r24	; 0x13
    5f38:	0f c0       	rjmp	.+30     	; 0x5f58 <__vector_25+0x1406>
    5f3a:	80 e7       	ldi	r24, 0x70	; 112
    5f3c:	91 e0       	ldi	r25, 0x01	; 1
    5f3e:	9a 8b       	std	Y+18, r25	; 0x12
    5f40:	89 8b       	std	Y+17, r24	; 0x11
    5f42:	89 89       	ldd	r24, Y+17	; 0x11
    5f44:	9a 89       	ldd	r25, Y+18	; 0x12
    5f46:	01 97       	sbiw	r24, 0x01	; 1
    5f48:	f1 f7       	brne	.-4      	; 0x5f46 <__vector_25+0x13f4>
    5f4a:	9a 8b       	std	Y+18, r25	; 0x12
    5f4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f4e:	8b 89       	ldd	r24, Y+19	; 0x13
    5f50:	9c 89       	ldd	r25, Y+20	; 0x14
    5f52:	01 97       	sbiw	r24, 0x01	; 1
    5f54:	9c 8b       	std	Y+20, r25	; 0x14
    5f56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f58:	8b 89       	ldd	r24, Y+19	; 0x13
    5f5a:	9c 89       	ldd	r25, Y+20	; 0x14
    5f5c:	00 97       	sbiw	r24, 0x00	; 0
    5f5e:	69 f7       	brne	.-38     	; 0x5f3a <__vector_25+0x13e8>
    5f60:	14 c0       	rjmp	.+40     	; 0x5f8a <__vector_25+0x1438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f62:	6d 89       	ldd	r22, Y+21	; 0x15
    5f64:	7e 89       	ldd	r23, Y+22	; 0x16
    5f66:	8f 89       	ldd	r24, Y+23	; 0x17
    5f68:	98 8d       	ldd	r25, Y+24	; 0x18
    5f6a:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    5f6e:	dc 01       	movw	r26, r24
    5f70:	cb 01       	movw	r24, r22
    5f72:	9c 8b       	std	Y+20, r25	; 0x14
    5f74:	8b 8b       	std	Y+19, r24	; 0x13
    5f76:	8b 89       	ldd	r24, Y+19	; 0x13
    5f78:	9c 89       	ldd	r25, Y+20	; 0x14
    5f7a:	98 8b       	std	Y+16, r25	; 0x10
    5f7c:	8f 87       	std	Y+15, r24	; 0x0f
    5f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f80:	98 89       	ldd	r25, Y+16	; 0x10
    5f82:	01 97       	sbiw	r24, 0x01	; 1
    5f84:	f1 f7       	brne	.-4      	; 0x5f82 <__vector_25+0x1430>
    5f86:	98 8b       	std	Y+16, r25	; 0x10
    5f88:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						UDR0 = (unsigned char)((int)col_found_arr[iter]+48);
    5f8a:	a6 ec       	ldi	r26, 0xC6	; 198
    5f8c:	b0 e0       	ldi	r27, 0x00	; 0
    5f8e:	fe 01       	movw	r30, r28
    5f90:	e7 55       	subi	r30, 0x57	; 87
    5f92:	ff 4f       	sbci	r31, 0xFF	; 255
    5f94:	80 81       	ld	r24, Z
    5f96:	91 81       	ldd	r25, Z+1	; 0x01
    5f98:	fc 01       	movw	r30, r24
    5f9a:	ef 5b       	subi	r30, 0xBF	; 191
    5f9c:	fc 4f       	sbci	r31, 0xFC	; 252
    5f9e:	80 81       	ld	r24, Z
    5fa0:	80 5d       	subi	r24, 0xD0	; 208
    5fa2:	8c 93       	st	X, r24
					UDR0 = 0x34;	//indicate the signal
					_delay_ms(1000);
					UDR0 = (unsigned char)((int)tom_found+48); //send the number of tomatoes found
				
					//send the row no and col no where tomatoes are found
					for (int iter=0;iter<tom_found;iter++)
    5fa4:	de 01       	movw	r26, r28
    5fa6:	a7 55       	subi	r26, 0x57	; 87
    5fa8:	bf 4f       	sbci	r27, 0xFF	; 255
    5faa:	fe 01       	movw	r30, r28
    5fac:	e7 55       	subi	r30, 0x57	; 87
    5fae:	ff 4f       	sbci	r31, 0xFF	; 255
    5fb0:	80 81       	ld	r24, Z
    5fb2:	91 81       	ldd	r25, Z+1	; 0x01
    5fb4:	01 96       	adiw	r24, 0x01	; 1
    5fb6:	11 96       	adiw	r26, 0x01	; 1
    5fb8:	9c 93       	st	X, r25
    5fba:	8e 93       	st	-X, r24
    5fbc:	80 91 13 03 	lds	r24, 0x0313
    5fc0:	28 2f       	mov	r18, r24
    5fc2:	30 e0       	ldi	r19, 0x00	; 0
    5fc4:	fe 01       	movw	r30, r28
    5fc6:	e7 55       	subi	r30, 0x57	; 87
    5fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    5fca:	80 81       	ld	r24, Z
    5fcc:	91 81       	ldd	r25, Z+1	; 0x01
    5fce:	82 17       	cp	r24, r18
    5fd0:	93 07       	cpc	r25, r19
    5fd2:	0c f4       	brge	.+2      	; 0x5fd6 <__vector_25+0x1484>
    5fd4:	e9 ce       	rjmp	.-558    	; 0x5da8 <__vector_25+0x1256>
    5fd6:	98 c0       	rjmp	.+304    	; 0x6108 <__vector_25+0x15b6>
						UDR0 = (unsigned char)((int)col_found_arr[iter]+48);
					}
				}				
				else	//if end of grid not reached
				{
				    PORTA=0x06;	//move forward and do line following
    5fd8:	e2 e2       	ldi	r30, 0x22	; 34
    5fda:	f0 e0       	ldi	r31, 0x00	; 0
    5fdc:	86 e0       	ldi	r24, 0x06	; 6
    5fde:	80 83       	st	Z, r24
					velocity(250,250);
    5fe0:	8a ef       	ldi	r24, 0xFA	; 250
    5fe2:	6a ef       	ldi	r22, 0xFA	; 250
    5fe4:	0e 94 59 14 	call	0x28b2	; 0x28b2 <velocity>
    5fe8:	80 e0       	ldi	r24, 0x00	; 0
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	a8 e4       	ldi	r26, 0x48	; 72
    5fee:	b3 e4       	ldi	r27, 0x43	; 67
    5ff0:	8b 87       	std	Y+11, r24	; 0x0b
    5ff2:	9c 87       	std	Y+12, r25	; 0x0c
    5ff4:	ad 87       	std	Y+13, r26	; 0x0d
    5ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    6000:	26 e6       	ldi	r18, 0x66	; 102
    6002:	36 e6       	ldi	r19, 0x66	; 102
    6004:	46 e6       	ldi	r20, 0x66	; 102
    6006:	55 e4       	ldi	r21, 0x45	; 69
    6008:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    600c:	dc 01       	movw	r26, r24
    600e:	cb 01       	movw	r24, r22
    6010:	8f 83       	std	Y+7, r24	; 0x07
    6012:	98 87       	std	Y+8, r25	; 0x08
    6014:	a9 87       	std	Y+9, r26	; 0x09
    6016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6018:	6f 81       	ldd	r22, Y+7	; 0x07
    601a:	78 85       	ldd	r23, Y+8	; 0x08
    601c:	89 85       	ldd	r24, Y+9	; 0x09
    601e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6020:	20 e0       	ldi	r18, 0x00	; 0
    6022:	30 e0       	ldi	r19, 0x00	; 0
    6024:	40 e8       	ldi	r20, 0x80	; 128
    6026:	5f e3       	ldi	r21, 0x3F	; 63
    6028:	0e 94 a4 34 	call	0x6948	; 0x6948 <__ltsf2>
    602c:	88 23       	and	r24, r24
    602e:	2c f4       	brge	.+10     	; 0x603a <__vector_25+0x14e8>
		__ticks = 1;
    6030:	81 e0       	ldi	r24, 0x01	; 1
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	9e 83       	std	Y+6, r25	; 0x06
    6036:	8d 83       	std	Y+5, r24	; 0x05
    6038:	3f c0       	rjmp	.+126    	; 0x60b8 <__vector_25+0x1566>
	else if (__tmp > 65535)
    603a:	6f 81       	ldd	r22, Y+7	; 0x07
    603c:	78 85       	ldd	r23, Y+8	; 0x08
    603e:	89 85       	ldd	r24, Y+9	; 0x09
    6040:	9a 85       	ldd	r25, Y+10	; 0x0a
    6042:	20 e0       	ldi	r18, 0x00	; 0
    6044:	3f ef       	ldi	r19, 0xFF	; 255
    6046:	4f e7       	ldi	r20, 0x7F	; 127
    6048:	57 e4       	ldi	r21, 0x47	; 71
    604a:	0e 94 44 34 	call	0x6888	; 0x6888 <__gtsf2>
    604e:	18 16       	cp	r1, r24
    6050:	4c f5       	brge	.+82     	; 0x60a4 <__vector_25+0x1552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6052:	6b 85       	ldd	r22, Y+11	; 0x0b
    6054:	7c 85       	ldd	r23, Y+12	; 0x0c
    6056:	8d 85       	ldd	r24, Y+13	; 0x0d
    6058:	9e 85       	ldd	r25, Y+14	; 0x0e
    605a:	20 e0       	ldi	r18, 0x00	; 0
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	40 e2       	ldi	r20, 0x20	; 32
    6060:	51 e4       	ldi	r21, 0x41	; 65
    6062:	0e 94 9e 32 	call	0x653c	; 0x653c <__mulsf3>
    6066:	dc 01       	movw	r26, r24
    6068:	cb 01       	movw	r24, r22
    606a:	bc 01       	movw	r22, r24
    606c:	cd 01       	movw	r24, r26
    606e:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    6072:	dc 01       	movw	r26, r24
    6074:	cb 01       	movw	r24, r22
    6076:	9e 83       	std	Y+6, r25	; 0x06
    6078:	8d 83       	std	Y+5, r24	; 0x05
    607a:	0f c0       	rjmp	.+30     	; 0x609a <__vector_25+0x1548>
    607c:	80 e7       	ldi	r24, 0x70	; 112
    607e:	91 e0       	ldi	r25, 0x01	; 1
    6080:	9c 83       	std	Y+4, r25	; 0x04
    6082:	8b 83       	std	Y+3, r24	; 0x03
    6084:	8b 81       	ldd	r24, Y+3	; 0x03
    6086:	9c 81       	ldd	r25, Y+4	; 0x04
    6088:	01 97       	sbiw	r24, 0x01	; 1
    608a:	f1 f7       	brne	.-4      	; 0x6088 <__vector_25+0x1536>
    608c:	9c 83       	std	Y+4, r25	; 0x04
    608e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6090:	8d 81       	ldd	r24, Y+5	; 0x05
    6092:	9e 81       	ldd	r25, Y+6	; 0x06
    6094:	01 97       	sbiw	r24, 0x01	; 1
    6096:	9e 83       	std	Y+6, r25	; 0x06
    6098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    609a:	8d 81       	ldd	r24, Y+5	; 0x05
    609c:	9e 81       	ldd	r25, Y+6	; 0x06
    609e:	00 97       	sbiw	r24, 0x00	; 0
    60a0:	69 f7       	brne	.-38     	; 0x607c <__vector_25+0x152a>
    60a2:	14 c0       	rjmp	.+40     	; 0x60cc <__vector_25+0x157a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60a4:	6f 81       	ldd	r22, Y+7	; 0x07
    60a6:	78 85       	ldd	r23, Y+8	; 0x08
    60a8:	89 85       	ldd	r24, Y+9	; 0x09
    60aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    60ac:	0e 94 c8 30 	call	0x6190	; 0x6190 <__fixunssfsi>
    60b0:	dc 01       	movw	r26, r24
    60b2:	cb 01       	movw	r24, r22
    60b4:	9e 83       	std	Y+6, r25	; 0x06
    60b6:	8d 83       	std	Y+5, r24	; 0x05
    60b8:	8d 81       	ldd	r24, Y+5	; 0x05
    60ba:	9e 81       	ldd	r25, Y+6	; 0x06
    60bc:	9a 83       	std	Y+2, r25	; 0x02
    60be:	89 83       	std	Y+1, r24	; 0x01
    60c0:	89 81       	ldd	r24, Y+1	; 0x01
    60c2:	9a 81       	ldd	r25, Y+2	; 0x02
    60c4:	01 97       	sbiw	r24, 0x01	; 1
    60c6:	f1 f7       	brne	.-4      	; 0x60c4 <__vector_25+0x1572>
    60c8:	9a 83       	std	Y+2, r25	; 0x02
    60ca:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(200);
					PORTA=0x00;
    60cc:	e2 e2       	ldi	r30, 0x22	; 34
    60ce:	f0 e0       	ldi	r31, 0x00	; 0
    60d0:	10 82       	st	Z, r1
					line_follower();
    60d2:	0e 94 60 23 	call	0x46c0	; 0x46c0 <line_follower>
    60d6:	18 c0       	rjmp	.+48     	; 0x6108 <__vector_25+0x15b6>
				
			}		
			//PORTA=0x06;  //forward
		}

		else if (data == 0x32)	//ASCII value of 2, input for monitoring mode
    60d8:	80 91 3a 03 	lds	r24, 0x033A
    60dc:	82 33       	cpi	r24, 0x32	; 50
    60de:	51 f4       	brne	.+20     	; 0x60f4 <__vector_25+0x15a2>
		{
			bot_mode = 1;	//put in monitoring mode
    60e0:	81 e0       	ldi	r24, 0x01	; 1
    60e2:	80 93 23 03 	sts	0x0323, r24
			row_found = 0;
    60e6:	10 92 11 03 	sts	0x0311, r1
			col_found = 0;
    60ea:	10 92 12 03 	sts	0x0312, r1
			line_follower();	//start monitoring 
    60ee:	0e 94 60 23 	call	0x46c0	; 0x46c0 <line_follower>
    60f2:	0a c0       	rjmp	.+20     	; 0x6108 <__vector_25+0x15b6>
		}

		else if (data == 0x33)	//ASCII value of 3, input for plucking mode
    60f4:	80 91 3a 03 	lds	r24, 0x033A
    60f8:	83 33       	cpi	r24, 0x33	; 51
    60fa:	31 f4       	brne	.+12     	; 0x6108 <__vector_25+0x15b6>
		{
			bot_mode = 2;	//put in plucking mode
    60fc:	82 e0       	ldi	r24, 0x02	; 2
    60fe:	80 93 23 03 	sts	0x0323, r24
			row_read_mode = 1;	//start reading row and column no.s to pluck
    6102:	81 e0       	ldi	r24, 0x01	; 1
    6104:	80 93 24 03 	sts	0x0324, r24
		}
}
    6108:	cc 54       	subi	r28, 0x4C	; 76
    610a:	df 4f       	sbci	r29, 0xFF	; 255
    610c:	de bf       	out	0x3e, r29	; 62
    610e:	cd bf       	out	0x3d, r28	; 61
    6110:	cf 91       	pop	r28
    6112:	df 91       	pop	r29
    6114:	ff 91       	pop	r31
    6116:	ef 91       	pop	r30
    6118:	bf 91       	pop	r27
    611a:	af 91       	pop	r26
    611c:	9f 91       	pop	r25
    611e:	8f 91       	pop	r24
    6120:	7f 91       	pop	r23
    6122:	6f 91       	pop	r22
    6124:	5f 91       	pop	r21
    6126:	4f 91       	pop	r20
    6128:	3f 91       	pop	r19
    612a:	2f 91       	pop	r18
    612c:	1f 91       	pop	r17
    612e:	0f 91       	pop	r16
    6130:	0f 90       	pop	r0
    6132:	00 92 5b 00 	sts	0x005B, r0
    6136:	0f 90       	pop	r0
    6138:	0f be       	out	0x3f, r0	; 63
    613a:	0f 90       	pop	r0
    613c:	1f 90       	pop	r1
    613e:	18 95       	reti

00006140 <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
    6140:	df 93       	push	r29
    6142:	cf 93       	push	r28
    6144:	cd b7       	in	r28, 0x3d	; 61
    6146:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    6148:	f8 94       	cli
 port_init();  //Initializes all the ports
    614a:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <port_init>
 uart0_init(); //Initailize UART1 for serial communiaction
    614e:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <uart0_init>
 sei();   //Enables the global interrupts
    6152:	78 94       	sei
}
    6154:	cf 91       	pop	r28
    6156:	df 91       	pop	r29
    6158:	08 95       	ret

0000615a <main>:

//Main Function
int main(void)
{   
    615a:	df 93       	push	r29
    615c:	cf 93       	push	r28
    615e:	cd b7       	in	r28, 0x3d	; 61
    6160:	de b7       	in	r29, 0x3e	; 62
	//all initializations
    init_devices_motion();
    6162:	0e 94 1e 01 	call	0x23c	; 0x23c <init_devices_motion>
	init_devices();
    6166:	0e 94 a0 30 	call	0x6140	; 0x6140 <init_devices>
	init_devices_lf();
    616a:	0e 94 bf 14 	call	0x297e	; 0x297e <init_devices_lf>
	lcd_set_4bit();
    616e:	0e 94 cd 09 	call	0x139a	; 0x139a <lcd_set_4bit>
	lcd_init();
    6172:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <lcd_init>

	//setting gripper arm 
	initial_angle = 120;
    6176:	88 e7       	ldi	r24, 0x78	; 120
    6178:	80 93 35 03 	sts	0x0335, r24
	servo1_init();
    617c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <servo1_init>
	servo_2(initial_angle);
    6180:	80 91 35 03 	lds	r24, 0x0335
    6184:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
	servo_3(180);
    6188:	84 eb       	ldi	r24, 0xB4	; 180
    618a:	0e 94 c7 01 	call	0x38e	; 0x38e <servo_3>
    618e:	ff cf       	rjmp	.-2      	; 0x618e <main+0x34>

00006190 <__fixunssfsi>:
    6190:	ef 92       	push	r14
    6192:	ff 92       	push	r15
    6194:	0f 93       	push	r16
    6196:	1f 93       	push	r17
    6198:	7b 01       	movw	r14, r22
    619a:	8c 01       	movw	r16, r24
    619c:	20 e0       	ldi	r18, 0x00	; 0
    619e:	30 e0       	ldi	r19, 0x00	; 0
    61a0:	40 e0       	ldi	r20, 0x00	; 0
    61a2:	5f e4       	ldi	r21, 0x4F	; 79
    61a4:	0e 94 74 34 	call	0x68e8	; 0x68e8 <__gesf2>
    61a8:	88 23       	and	r24, r24
    61aa:	8c f0       	brlt	.+34     	; 0x61ce <__fixunssfsi+0x3e>
    61ac:	c8 01       	movw	r24, r16
    61ae:	b7 01       	movw	r22, r14
    61b0:	20 e0       	ldi	r18, 0x00	; 0
    61b2:	30 e0       	ldi	r19, 0x00	; 0
    61b4:	40 e0       	ldi	r20, 0x00	; 0
    61b6:	5f e4       	ldi	r21, 0x4F	; 79
    61b8:	0e 94 40 32 	call	0x6480	; 0x6480 <__subsf3>
    61bc:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <__fixsfsi>
    61c0:	9b 01       	movw	r18, r22
    61c2:	ac 01       	movw	r20, r24
    61c4:	20 50       	subi	r18, 0x00	; 0
    61c6:	30 40       	sbci	r19, 0x00	; 0
    61c8:	40 40       	sbci	r20, 0x00	; 0
    61ca:	50 48       	sbci	r21, 0x80	; 128
    61cc:	06 c0       	rjmp	.+12     	; 0x61da <__fixunssfsi+0x4a>
    61ce:	c8 01       	movw	r24, r16
    61d0:	b7 01       	movw	r22, r14
    61d2:	0e 94 d4 34 	call	0x69a8	; 0x69a8 <__fixsfsi>
    61d6:	9b 01       	movw	r18, r22
    61d8:	ac 01       	movw	r20, r24
    61da:	b9 01       	movw	r22, r18
    61dc:	ca 01       	movw	r24, r20
    61de:	1f 91       	pop	r17
    61e0:	0f 91       	pop	r16
    61e2:	ff 90       	pop	r15
    61e4:	ef 90       	pop	r14
    61e6:	08 95       	ret

000061e8 <_fpadd_parts>:
    61e8:	a0 e0       	ldi	r26, 0x00	; 0
    61ea:	b0 e0       	ldi	r27, 0x00	; 0
    61ec:	ea ef       	ldi	r30, 0xFA	; 250
    61ee:	f0 e3       	ldi	r31, 0x30	; 48
    61f0:	0c 94 aa 37 	jmp	0x6f54	; 0x6f54 <__prologue_saves__>
    61f4:	dc 01       	movw	r26, r24
    61f6:	2b 01       	movw	r4, r22
    61f8:	fa 01       	movw	r30, r20
    61fa:	9c 91       	ld	r25, X
    61fc:	92 30       	cpi	r25, 0x02	; 2
    61fe:	08 f4       	brcc	.+2      	; 0x6202 <_fpadd_parts+0x1a>
    6200:	39 c1       	rjmp	.+626    	; 0x6474 <_fpadd_parts+0x28c>
    6202:	eb 01       	movw	r28, r22
    6204:	88 81       	ld	r24, Y
    6206:	82 30       	cpi	r24, 0x02	; 2
    6208:	08 f4       	brcc	.+2      	; 0x620c <_fpadd_parts+0x24>
    620a:	33 c1       	rjmp	.+614    	; 0x6472 <_fpadd_parts+0x28a>
    620c:	94 30       	cpi	r25, 0x04	; 4
    620e:	69 f4       	brne	.+26     	; 0x622a <_fpadd_parts+0x42>
    6210:	84 30       	cpi	r24, 0x04	; 4
    6212:	09 f0       	breq	.+2      	; 0x6216 <_fpadd_parts+0x2e>
    6214:	2f c1       	rjmp	.+606    	; 0x6474 <_fpadd_parts+0x28c>
    6216:	11 96       	adiw	r26, 0x01	; 1
    6218:	9c 91       	ld	r25, X
    621a:	11 97       	sbiw	r26, 0x01	; 1
    621c:	89 81       	ldd	r24, Y+1	; 0x01
    621e:	98 17       	cp	r25, r24
    6220:	09 f4       	brne	.+2      	; 0x6224 <_fpadd_parts+0x3c>
    6222:	28 c1       	rjmp	.+592    	; 0x6474 <_fpadd_parts+0x28c>
    6224:	a6 e0       	ldi	r26, 0x06	; 6
    6226:	b2 e0       	ldi	r27, 0x02	; 2
    6228:	25 c1       	rjmp	.+586    	; 0x6474 <_fpadd_parts+0x28c>
    622a:	84 30       	cpi	r24, 0x04	; 4
    622c:	09 f4       	brne	.+2      	; 0x6230 <_fpadd_parts+0x48>
    622e:	21 c1       	rjmp	.+578    	; 0x6472 <_fpadd_parts+0x28a>
    6230:	82 30       	cpi	r24, 0x02	; 2
    6232:	a9 f4       	brne	.+42     	; 0x625e <_fpadd_parts+0x76>
    6234:	92 30       	cpi	r25, 0x02	; 2
    6236:	09 f0       	breq	.+2      	; 0x623a <_fpadd_parts+0x52>
    6238:	1d c1       	rjmp	.+570    	; 0x6474 <_fpadd_parts+0x28c>
    623a:	9a 01       	movw	r18, r20
    623c:	ad 01       	movw	r20, r26
    623e:	88 e0       	ldi	r24, 0x08	; 8
    6240:	ea 01       	movw	r28, r20
    6242:	09 90       	ld	r0, Y+
    6244:	ae 01       	movw	r20, r28
    6246:	e9 01       	movw	r28, r18
    6248:	09 92       	st	Y+, r0
    624a:	9e 01       	movw	r18, r28
    624c:	81 50       	subi	r24, 0x01	; 1
    624e:	c1 f7       	brne	.-16     	; 0x6240 <_fpadd_parts+0x58>
    6250:	e2 01       	movw	r28, r4
    6252:	89 81       	ldd	r24, Y+1	; 0x01
    6254:	11 96       	adiw	r26, 0x01	; 1
    6256:	9c 91       	ld	r25, X
    6258:	89 23       	and	r24, r25
    625a:	81 83       	std	Z+1, r24	; 0x01
    625c:	08 c1       	rjmp	.+528    	; 0x646e <_fpadd_parts+0x286>
    625e:	92 30       	cpi	r25, 0x02	; 2
    6260:	09 f4       	brne	.+2      	; 0x6264 <_fpadd_parts+0x7c>
    6262:	07 c1       	rjmp	.+526    	; 0x6472 <_fpadd_parts+0x28a>
    6264:	12 96       	adiw	r26, 0x02	; 2
    6266:	2d 90       	ld	r2, X+
    6268:	3c 90       	ld	r3, X
    626a:	13 97       	sbiw	r26, 0x03	; 3
    626c:	eb 01       	movw	r28, r22
    626e:	8a 81       	ldd	r24, Y+2	; 0x02
    6270:	9b 81       	ldd	r25, Y+3	; 0x03
    6272:	14 96       	adiw	r26, 0x04	; 4
    6274:	ad 90       	ld	r10, X+
    6276:	bd 90       	ld	r11, X+
    6278:	cd 90       	ld	r12, X+
    627a:	dc 90       	ld	r13, X
    627c:	17 97       	sbiw	r26, 0x07	; 7
    627e:	ec 80       	ldd	r14, Y+4	; 0x04
    6280:	fd 80       	ldd	r15, Y+5	; 0x05
    6282:	0e 81       	ldd	r16, Y+6	; 0x06
    6284:	1f 81       	ldd	r17, Y+7	; 0x07
    6286:	91 01       	movw	r18, r2
    6288:	28 1b       	sub	r18, r24
    628a:	39 0b       	sbc	r19, r25
    628c:	b9 01       	movw	r22, r18
    628e:	37 ff       	sbrs	r19, 7
    6290:	04 c0       	rjmp	.+8      	; 0x629a <_fpadd_parts+0xb2>
    6292:	66 27       	eor	r22, r22
    6294:	77 27       	eor	r23, r23
    6296:	62 1b       	sub	r22, r18
    6298:	73 0b       	sbc	r23, r19
    629a:	60 32       	cpi	r22, 0x20	; 32
    629c:	71 05       	cpc	r23, r1
    629e:	0c f0       	brlt	.+2      	; 0x62a2 <_fpadd_parts+0xba>
    62a0:	61 c0       	rjmp	.+194    	; 0x6364 <_fpadd_parts+0x17c>
    62a2:	12 16       	cp	r1, r18
    62a4:	13 06       	cpc	r1, r19
    62a6:	6c f5       	brge	.+90     	; 0x6302 <_fpadd_parts+0x11a>
    62a8:	37 01       	movw	r6, r14
    62aa:	48 01       	movw	r8, r16
    62ac:	06 2e       	mov	r0, r22
    62ae:	04 c0       	rjmp	.+8      	; 0x62b8 <_fpadd_parts+0xd0>
    62b0:	96 94       	lsr	r9
    62b2:	87 94       	ror	r8
    62b4:	77 94       	ror	r7
    62b6:	67 94       	ror	r6
    62b8:	0a 94       	dec	r0
    62ba:	d2 f7       	brpl	.-12     	; 0x62b0 <_fpadd_parts+0xc8>
    62bc:	21 e0       	ldi	r18, 0x01	; 1
    62be:	30 e0       	ldi	r19, 0x00	; 0
    62c0:	40 e0       	ldi	r20, 0x00	; 0
    62c2:	50 e0       	ldi	r21, 0x00	; 0
    62c4:	04 c0       	rjmp	.+8      	; 0x62ce <_fpadd_parts+0xe6>
    62c6:	22 0f       	add	r18, r18
    62c8:	33 1f       	adc	r19, r19
    62ca:	44 1f       	adc	r20, r20
    62cc:	55 1f       	adc	r21, r21
    62ce:	6a 95       	dec	r22
    62d0:	d2 f7       	brpl	.-12     	; 0x62c6 <_fpadd_parts+0xde>
    62d2:	21 50       	subi	r18, 0x01	; 1
    62d4:	30 40       	sbci	r19, 0x00	; 0
    62d6:	40 40       	sbci	r20, 0x00	; 0
    62d8:	50 40       	sbci	r21, 0x00	; 0
    62da:	2e 21       	and	r18, r14
    62dc:	3f 21       	and	r19, r15
    62de:	40 23       	and	r20, r16
    62e0:	51 23       	and	r21, r17
    62e2:	21 15       	cp	r18, r1
    62e4:	31 05       	cpc	r19, r1
    62e6:	41 05       	cpc	r20, r1
    62e8:	51 05       	cpc	r21, r1
    62ea:	21 f0       	breq	.+8      	; 0x62f4 <_fpadd_parts+0x10c>
    62ec:	21 e0       	ldi	r18, 0x01	; 1
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	40 e0       	ldi	r20, 0x00	; 0
    62f2:	50 e0       	ldi	r21, 0x00	; 0
    62f4:	79 01       	movw	r14, r18
    62f6:	8a 01       	movw	r16, r20
    62f8:	e6 28       	or	r14, r6
    62fa:	f7 28       	or	r15, r7
    62fc:	08 29       	or	r16, r8
    62fe:	19 29       	or	r17, r9
    6300:	3c c0       	rjmp	.+120    	; 0x637a <_fpadd_parts+0x192>
    6302:	23 2b       	or	r18, r19
    6304:	d1 f1       	breq	.+116    	; 0x637a <_fpadd_parts+0x192>
    6306:	26 0e       	add	r2, r22
    6308:	37 1e       	adc	r3, r23
    630a:	35 01       	movw	r6, r10
    630c:	46 01       	movw	r8, r12
    630e:	06 2e       	mov	r0, r22
    6310:	04 c0       	rjmp	.+8      	; 0x631a <_fpadd_parts+0x132>
    6312:	96 94       	lsr	r9
    6314:	87 94       	ror	r8
    6316:	77 94       	ror	r7
    6318:	67 94       	ror	r6
    631a:	0a 94       	dec	r0
    631c:	d2 f7       	brpl	.-12     	; 0x6312 <_fpadd_parts+0x12a>
    631e:	21 e0       	ldi	r18, 0x01	; 1
    6320:	30 e0       	ldi	r19, 0x00	; 0
    6322:	40 e0       	ldi	r20, 0x00	; 0
    6324:	50 e0       	ldi	r21, 0x00	; 0
    6326:	04 c0       	rjmp	.+8      	; 0x6330 <_fpadd_parts+0x148>
    6328:	22 0f       	add	r18, r18
    632a:	33 1f       	adc	r19, r19
    632c:	44 1f       	adc	r20, r20
    632e:	55 1f       	adc	r21, r21
    6330:	6a 95       	dec	r22
    6332:	d2 f7       	brpl	.-12     	; 0x6328 <_fpadd_parts+0x140>
    6334:	21 50       	subi	r18, 0x01	; 1
    6336:	30 40       	sbci	r19, 0x00	; 0
    6338:	40 40       	sbci	r20, 0x00	; 0
    633a:	50 40       	sbci	r21, 0x00	; 0
    633c:	2a 21       	and	r18, r10
    633e:	3b 21       	and	r19, r11
    6340:	4c 21       	and	r20, r12
    6342:	5d 21       	and	r21, r13
    6344:	21 15       	cp	r18, r1
    6346:	31 05       	cpc	r19, r1
    6348:	41 05       	cpc	r20, r1
    634a:	51 05       	cpc	r21, r1
    634c:	21 f0       	breq	.+8      	; 0x6356 <_fpadd_parts+0x16e>
    634e:	21 e0       	ldi	r18, 0x01	; 1
    6350:	30 e0       	ldi	r19, 0x00	; 0
    6352:	40 e0       	ldi	r20, 0x00	; 0
    6354:	50 e0       	ldi	r21, 0x00	; 0
    6356:	59 01       	movw	r10, r18
    6358:	6a 01       	movw	r12, r20
    635a:	a6 28       	or	r10, r6
    635c:	b7 28       	or	r11, r7
    635e:	c8 28       	or	r12, r8
    6360:	d9 28       	or	r13, r9
    6362:	0b c0       	rjmp	.+22     	; 0x637a <_fpadd_parts+0x192>
    6364:	82 15       	cp	r24, r2
    6366:	93 05       	cpc	r25, r3
    6368:	2c f0       	brlt	.+10     	; 0x6374 <_fpadd_parts+0x18c>
    636a:	1c 01       	movw	r2, r24
    636c:	aa 24       	eor	r10, r10
    636e:	bb 24       	eor	r11, r11
    6370:	65 01       	movw	r12, r10
    6372:	03 c0       	rjmp	.+6      	; 0x637a <_fpadd_parts+0x192>
    6374:	ee 24       	eor	r14, r14
    6376:	ff 24       	eor	r15, r15
    6378:	87 01       	movw	r16, r14
    637a:	11 96       	adiw	r26, 0x01	; 1
    637c:	9c 91       	ld	r25, X
    637e:	d2 01       	movw	r26, r4
    6380:	11 96       	adiw	r26, 0x01	; 1
    6382:	8c 91       	ld	r24, X
    6384:	98 17       	cp	r25, r24
    6386:	09 f4       	brne	.+2      	; 0x638a <_fpadd_parts+0x1a2>
    6388:	45 c0       	rjmp	.+138    	; 0x6414 <_fpadd_parts+0x22c>
    638a:	99 23       	and	r25, r25
    638c:	39 f0       	breq	.+14     	; 0x639c <_fpadd_parts+0x1b4>
    638e:	a8 01       	movw	r20, r16
    6390:	97 01       	movw	r18, r14
    6392:	2a 19       	sub	r18, r10
    6394:	3b 09       	sbc	r19, r11
    6396:	4c 09       	sbc	r20, r12
    6398:	5d 09       	sbc	r21, r13
    639a:	06 c0       	rjmp	.+12     	; 0x63a8 <_fpadd_parts+0x1c0>
    639c:	a6 01       	movw	r20, r12
    639e:	95 01       	movw	r18, r10
    63a0:	2e 19       	sub	r18, r14
    63a2:	3f 09       	sbc	r19, r15
    63a4:	40 0b       	sbc	r20, r16
    63a6:	51 0b       	sbc	r21, r17
    63a8:	57 fd       	sbrc	r21, 7
    63aa:	08 c0       	rjmp	.+16     	; 0x63bc <_fpadd_parts+0x1d4>
    63ac:	11 82       	std	Z+1, r1	; 0x01
    63ae:	33 82       	std	Z+3, r3	; 0x03
    63b0:	22 82       	std	Z+2, r2	; 0x02
    63b2:	24 83       	std	Z+4, r18	; 0x04
    63b4:	35 83       	std	Z+5, r19	; 0x05
    63b6:	46 83       	std	Z+6, r20	; 0x06
    63b8:	57 83       	std	Z+7, r21	; 0x07
    63ba:	1d c0       	rjmp	.+58     	; 0x63f6 <_fpadd_parts+0x20e>
    63bc:	81 e0       	ldi	r24, 0x01	; 1
    63be:	81 83       	std	Z+1, r24	; 0x01
    63c0:	33 82       	std	Z+3, r3	; 0x03
    63c2:	22 82       	std	Z+2, r2	; 0x02
    63c4:	88 27       	eor	r24, r24
    63c6:	99 27       	eor	r25, r25
    63c8:	dc 01       	movw	r26, r24
    63ca:	82 1b       	sub	r24, r18
    63cc:	93 0b       	sbc	r25, r19
    63ce:	a4 0b       	sbc	r26, r20
    63d0:	b5 0b       	sbc	r27, r21
    63d2:	84 83       	std	Z+4, r24	; 0x04
    63d4:	95 83       	std	Z+5, r25	; 0x05
    63d6:	a6 83       	std	Z+6, r26	; 0x06
    63d8:	b7 83       	std	Z+7, r27	; 0x07
    63da:	0d c0       	rjmp	.+26     	; 0x63f6 <_fpadd_parts+0x20e>
    63dc:	22 0f       	add	r18, r18
    63de:	33 1f       	adc	r19, r19
    63e0:	44 1f       	adc	r20, r20
    63e2:	55 1f       	adc	r21, r21
    63e4:	24 83       	std	Z+4, r18	; 0x04
    63e6:	35 83       	std	Z+5, r19	; 0x05
    63e8:	46 83       	std	Z+6, r20	; 0x06
    63ea:	57 83       	std	Z+7, r21	; 0x07
    63ec:	82 81       	ldd	r24, Z+2	; 0x02
    63ee:	93 81       	ldd	r25, Z+3	; 0x03
    63f0:	01 97       	sbiw	r24, 0x01	; 1
    63f2:	93 83       	std	Z+3, r25	; 0x03
    63f4:	82 83       	std	Z+2, r24	; 0x02
    63f6:	24 81       	ldd	r18, Z+4	; 0x04
    63f8:	35 81       	ldd	r19, Z+5	; 0x05
    63fa:	46 81       	ldd	r20, Z+6	; 0x06
    63fc:	57 81       	ldd	r21, Z+7	; 0x07
    63fe:	da 01       	movw	r26, r20
    6400:	c9 01       	movw	r24, r18
    6402:	01 97       	sbiw	r24, 0x01	; 1
    6404:	a1 09       	sbc	r26, r1
    6406:	b1 09       	sbc	r27, r1
    6408:	8f 5f       	subi	r24, 0xFF	; 255
    640a:	9f 4f       	sbci	r25, 0xFF	; 255
    640c:	af 4f       	sbci	r26, 0xFF	; 255
    640e:	bf 43       	sbci	r27, 0x3F	; 63
    6410:	28 f3       	brcs	.-54     	; 0x63dc <_fpadd_parts+0x1f4>
    6412:	0b c0       	rjmp	.+22     	; 0x642a <_fpadd_parts+0x242>
    6414:	91 83       	std	Z+1, r25	; 0x01
    6416:	33 82       	std	Z+3, r3	; 0x03
    6418:	22 82       	std	Z+2, r2	; 0x02
    641a:	ea 0c       	add	r14, r10
    641c:	fb 1c       	adc	r15, r11
    641e:	0c 1d       	adc	r16, r12
    6420:	1d 1d       	adc	r17, r13
    6422:	e4 82       	std	Z+4, r14	; 0x04
    6424:	f5 82       	std	Z+5, r15	; 0x05
    6426:	06 83       	std	Z+6, r16	; 0x06
    6428:	17 83       	std	Z+7, r17	; 0x07
    642a:	83 e0       	ldi	r24, 0x03	; 3
    642c:	80 83       	st	Z, r24
    642e:	24 81       	ldd	r18, Z+4	; 0x04
    6430:	35 81       	ldd	r19, Z+5	; 0x05
    6432:	46 81       	ldd	r20, Z+6	; 0x06
    6434:	57 81       	ldd	r21, Z+7	; 0x07
    6436:	57 ff       	sbrs	r21, 7
    6438:	1a c0       	rjmp	.+52     	; 0x646e <_fpadd_parts+0x286>
    643a:	c9 01       	movw	r24, r18
    643c:	aa 27       	eor	r26, r26
    643e:	97 fd       	sbrc	r25, 7
    6440:	a0 95       	com	r26
    6442:	ba 2f       	mov	r27, r26
    6444:	81 70       	andi	r24, 0x01	; 1
    6446:	90 70       	andi	r25, 0x00	; 0
    6448:	a0 70       	andi	r26, 0x00	; 0
    644a:	b0 70       	andi	r27, 0x00	; 0
    644c:	56 95       	lsr	r21
    644e:	47 95       	ror	r20
    6450:	37 95       	ror	r19
    6452:	27 95       	ror	r18
    6454:	82 2b       	or	r24, r18
    6456:	93 2b       	or	r25, r19
    6458:	a4 2b       	or	r26, r20
    645a:	b5 2b       	or	r27, r21
    645c:	84 83       	std	Z+4, r24	; 0x04
    645e:	95 83       	std	Z+5, r25	; 0x05
    6460:	a6 83       	std	Z+6, r26	; 0x06
    6462:	b7 83       	std	Z+7, r27	; 0x07
    6464:	82 81       	ldd	r24, Z+2	; 0x02
    6466:	93 81       	ldd	r25, Z+3	; 0x03
    6468:	01 96       	adiw	r24, 0x01	; 1
    646a:	93 83       	std	Z+3, r25	; 0x03
    646c:	82 83       	std	Z+2, r24	; 0x02
    646e:	df 01       	movw	r26, r30
    6470:	01 c0       	rjmp	.+2      	; 0x6474 <_fpadd_parts+0x28c>
    6472:	d2 01       	movw	r26, r4
    6474:	cd 01       	movw	r24, r26
    6476:	cd b7       	in	r28, 0x3d	; 61
    6478:	de b7       	in	r29, 0x3e	; 62
    647a:	e2 e1       	ldi	r30, 0x12	; 18
    647c:	0c 94 c6 37 	jmp	0x6f8c	; 0x6f8c <__epilogue_restores__>

00006480 <__subsf3>:
    6480:	a0 e2       	ldi	r26, 0x20	; 32
    6482:	b0 e0       	ldi	r27, 0x00	; 0
    6484:	e6 e4       	ldi	r30, 0x46	; 70
    6486:	f2 e3       	ldi	r31, 0x32	; 50
    6488:	0c 94 b6 37 	jmp	0x6f6c	; 0x6f6c <__prologue_saves__+0x18>
    648c:	69 83       	std	Y+1, r22	; 0x01
    648e:	7a 83       	std	Y+2, r23	; 0x02
    6490:	8b 83       	std	Y+3, r24	; 0x03
    6492:	9c 83       	std	Y+4, r25	; 0x04
    6494:	2d 83       	std	Y+5, r18	; 0x05
    6496:	3e 83       	std	Y+6, r19	; 0x06
    6498:	4f 83       	std	Y+7, r20	; 0x07
    649a:	58 87       	std	Y+8, r21	; 0x08
    649c:	e9 e0       	ldi	r30, 0x09	; 9
    649e:	ee 2e       	mov	r14, r30
    64a0:	f1 2c       	mov	r15, r1
    64a2:	ec 0e       	add	r14, r28
    64a4:	fd 1e       	adc	r15, r29
    64a6:	ce 01       	movw	r24, r28
    64a8:	01 96       	adiw	r24, 0x01	; 1
    64aa:	b7 01       	movw	r22, r14
    64ac:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    64b0:	8e 01       	movw	r16, r28
    64b2:	0f 5e       	subi	r16, 0xEF	; 239
    64b4:	1f 4f       	sbci	r17, 0xFF	; 255
    64b6:	ce 01       	movw	r24, r28
    64b8:	05 96       	adiw	r24, 0x05	; 5
    64ba:	b8 01       	movw	r22, r16
    64bc:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    64c0:	8a 89       	ldd	r24, Y+18	; 0x12
    64c2:	91 e0       	ldi	r25, 0x01	; 1
    64c4:	89 27       	eor	r24, r25
    64c6:	8a 8b       	std	Y+18, r24	; 0x12
    64c8:	c7 01       	movw	r24, r14
    64ca:	b8 01       	movw	r22, r16
    64cc:	ae 01       	movw	r20, r28
    64ce:	47 5e       	subi	r20, 0xE7	; 231
    64d0:	5f 4f       	sbci	r21, 0xFF	; 255
    64d2:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_fpadd_parts>
    64d6:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <__pack_f>
    64da:	a0 96       	adiw	r28, 0x20	; 32
    64dc:	e6 e0       	ldi	r30, 0x06	; 6
    64de:	0c 94 d2 37 	jmp	0x6fa4	; 0x6fa4 <__epilogue_restores__+0x18>

000064e2 <__addsf3>:
    64e2:	a0 e2       	ldi	r26, 0x20	; 32
    64e4:	b0 e0       	ldi	r27, 0x00	; 0
    64e6:	e7 e7       	ldi	r30, 0x77	; 119
    64e8:	f2 e3       	ldi	r31, 0x32	; 50
    64ea:	0c 94 b6 37 	jmp	0x6f6c	; 0x6f6c <__prologue_saves__+0x18>
    64ee:	69 83       	std	Y+1, r22	; 0x01
    64f0:	7a 83       	std	Y+2, r23	; 0x02
    64f2:	8b 83       	std	Y+3, r24	; 0x03
    64f4:	9c 83       	std	Y+4, r25	; 0x04
    64f6:	2d 83       	std	Y+5, r18	; 0x05
    64f8:	3e 83       	std	Y+6, r19	; 0x06
    64fa:	4f 83       	std	Y+7, r20	; 0x07
    64fc:	58 87       	std	Y+8, r21	; 0x08
    64fe:	f9 e0       	ldi	r31, 0x09	; 9
    6500:	ef 2e       	mov	r14, r31
    6502:	f1 2c       	mov	r15, r1
    6504:	ec 0e       	add	r14, r28
    6506:	fd 1e       	adc	r15, r29
    6508:	ce 01       	movw	r24, r28
    650a:	01 96       	adiw	r24, 0x01	; 1
    650c:	b7 01       	movw	r22, r14
    650e:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6512:	8e 01       	movw	r16, r28
    6514:	0f 5e       	subi	r16, 0xEF	; 239
    6516:	1f 4f       	sbci	r17, 0xFF	; 255
    6518:	ce 01       	movw	r24, r28
    651a:	05 96       	adiw	r24, 0x05	; 5
    651c:	b8 01       	movw	r22, r16
    651e:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6522:	c7 01       	movw	r24, r14
    6524:	b8 01       	movw	r22, r16
    6526:	ae 01       	movw	r20, r28
    6528:	47 5e       	subi	r20, 0xE7	; 231
    652a:	5f 4f       	sbci	r21, 0xFF	; 255
    652c:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <_fpadd_parts>
    6530:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <__pack_f>
    6534:	a0 96       	adiw	r28, 0x20	; 32
    6536:	e6 e0       	ldi	r30, 0x06	; 6
    6538:	0c 94 d2 37 	jmp	0x6fa4	; 0x6fa4 <__epilogue_restores__+0x18>

0000653c <__mulsf3>:
    653c:	a0 e2       	ldi	r26, 0x20	; 32
    653e:	b0 e0       	ldi	r27, 0x00	; 0
    6540:	e4 ea       	ldi	r30, 0xA4	; 164
    6542:	f2 e3       	ldi	r31, 0x32	; 50
    6544:	0c 94 aa 37 	jmp	0x6f54	; 0x6f54 <__prologue_saves__>
    6548:	69 83       	std	Y+1, r22	; 0x01
    654a:	7a 83       	std	Y+2, r23	; 0x02
    654c:	8b 83       	std	Y+3, r24	; 0x03
    654e:	9c 83       	std	Y+4, r25	; 0x04
    6550:	2d 83       	std	Y+5, r18	; 0x05
    6552:	3e 83       	std	Y+6, r19	; 0x06
    6554:	4f 83       	std	Y+7, r20	; 0x07
    6556:	58 87       	std	Y+8, r21	; 0x08
    6558:	ce 01       	movw	r24, r28
    655a:	01 96       	adiw	r24, 0x01	; 1
    655c:	be 01       	movw	r22, r28
    655e:	67 5f       	subi	r22, 0xF7	; 247
    6560:	7f 4f       	sbci	r23, 0xFF	; 255
    6562:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6566:	ce 01       	movw	r24, r28
    6568:	05 96       	adiw	r24, 0x05	; 5
    656a:	be 01       	movw	r22, r28
    656c:	6f 5e       	subi	r22, 0xEF	; 239
    656e:	7f 4f       	sbci	r23, 0xFF	; 255
    6570:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6574:	99 85       	ldd	r25, Y+9	; 0x09
    6576:	92 30       	cpi	r25, 0x02	; 2
    6578:	88 f0       	brcs	.+34     	; 0x659c <__mulsf3+0x60>
    657a:	89 89       	ldd	r24, Y+17	; 0x11
    657c:	82 30       	cpi	r24, 0x02	; 2
    657e:	c8 f0       	brcs	.+50     	; 0x65b2 <__mulsf3+0x76>
    6580:	94 30       	cpi	r25, 0x04	; 4
    6582:	19 f4       	brne	.+6      	; 0x658a <__mulsf3+0x4e>
    6584:	82 30       	cpi	r24, 0x02	; 2
    6586:	51 f4       	brne	.+20     	; 0x659c <__mulsf3+0x60>
    6588:	04 c0       	rjmp	.+8      	; 0x6592 <__mulsf3+0x56>
    658a:	84 30       	cpi	r24, 0x04	; 4
    658c:	29 f4       	brne	.+10     	; 0x6598 <__mulsf3+0x5c>
    658e:	92 30       	cpi	r25, 0x02	; 2
    6590:	81 f4       	brne	.+32     	; 0x65b2 <__mulsf3+0x76>
    6592:	86 e0       	ldi	r24, 0x06	; 6
    6594:	92 e0       	ldi	r25, 0x02	; 2
    6596:	c6 c0       	rjmp	.+396    	; 0x6724 <__mulsf3+0x1e8>
    6598:	92 30       	cpi	r25, 0x02	; 2
    659a:	49 f4       	brne	.+18     	; 0x65ae <__mulsf3+0x72>
    659c:	20 e0       	ldi	r18, 0x00	; 0
    659e:	9a 85       	ldd	r25, Y+10	; 0x0a
    65a0:	8a 89       	ldd	r24, Y+18	; 0x12
    65a2:	98 13       	cpse	r25, r24
    65a4:	21 e0       	ldi	r18, 0x01	; 1
    65a6:	2a 87       	std	Y+10, r18	; 0x0a
    65a8:	ce 01       	movw	r24, r28
    65aa:	09 96       	adiw	r24, 0x09	; 9
    65ac:	bb c0       	rjmp	.+374    	; 0x6724 <__mulsf3+0x1e8>
    65ae:	82 30       	cpi	r24, 0x02	; 2
    65b0:	49 f4       	brne	.+18     	; 0x65c4 <__mulsf3+0x88>
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    65b6:	8a 89       	ldd	r24, Y+18	; 0x12
    65b8:	98 13       	cpse	r25, r24
    65ba:	21 e0       	ldi	r18, 0x01	; 1
    65bc:	2a 8b       	std	Y+18, r18	; 0x12
    65be:	ce 01       	movw	r24, r28
    65c0:	41 96       	adiw	r24, 0x11	; 17
    65c2:	b0 c0       	rjmp	.+352    	; 0x6724 <__mulsf3+0x1e8>
    65c4:	2d 84       	ldd	r2, Y+13	; 0x0d
    65c6:	3e 84       	ldd	r3, Y+14	; 0x0e
    65c8:	4f 84       	ldd	r4, Y+15	; 0x0f
    65ca:	58 88       	ldd	r5, Y+16	; 0x10
    65cc:	6d 88       	ldd	r6, Y+21	; 0x15
    65ce:	7e 88       	ldd	r7, Y+22	; 0x16
    65d0:	8f 88       	ldd	r8, Y+23	; 0x17
    65d2:	98 8c       	ldd	r9, Y+24	; 0x18
    65d4:	ee 24       	eor	r14, r14
    65d6:	ff 24       	eor	r15, r15
    65d8:	87 01       	movw	r16, r14
    65da:	aa 24       	eor	r10, r10
    65dc:	bb 24       	eor	r11, r11
    65de:	65 01       	movw	r12, r10
    65e0:	40 e0       	ldi	r20, 0x00	; 0
    65e2:	50 e0       	ldi	r21, 0x00	; 0
    65e4:	60 e0       	ldi	r22, 0x00	; 0
    65e6:	70 e0       	ldi	r23, 0x00	; 0
    65e8:	e0 e0       	ldi	r30, 0x00	; 0
    65ea:	f0 e0       	ldi	r31, 0x00	; 0
    65ec:	c1 01       	movw	r24, r2
    65ee:	81 70       	andi	r24, 0x01	; 1
    65f0:	90 70       	andi	r25, 0x00	; 0
    65f2:	89 2b       	or	r24, r25
    65f4:	e9 f0       	breq	.+58     	; 0x6630 <__mulsf3+0xf4>
    65f6:	e6 0c       	add	r14, r6
    65f8:	f7 1c       	adc	r15, r7
    65fa:	08 1d       	adc	r16, r8
    65fc:	19 1d       	adc	r17, r9
    65fe:	9a 01       	movw	r18, r20
    6600:	ab 01       	movw	r20, r22
    6602:	2a 0d       	add	r18, r10
    6604:	3b 1d       	adc	r19, r11
    6606:	4c 1d       	adc	r20, r12
    6608:	5d 1d       	adc	r21, r13
    660a:	80 e0       	ldi	r24, 0x00	; 0
    660c:	90 e0       	ldi	r25, 0x00	; 0
    660e:	a0 e0       	ldi	r26, 0x00	; 0
    6610:	b0 e0       	ldi	r27, 0x00	; 0
    6612:	e6 14       	cp	r14, r6
    6614:	f7 04       	cpc	r15, r7
    6616:	08 05       	cpc	r16, r8
    6618:	19 05       	cpc	r17, r9
    661a:	20 f4       	brcc	.+8      	; 0x6624 <__mulsf3+0xe8>
    661c:	81 e0       	ldi	r24, 0x01	; 1
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	a0 e0       	ldi	r26, 0x00	; 0
    6622:	b0 e0       	ldi	r27, 0x00	; 0
    6624:	ba 01       	movw	r22, r20
    6626:	a9 01       	movw	r20, r18
    6628:	48 0f       	add	r20, r24
    662a:	59 1f       	adc	r21, r25
    662c:	6a 1f       	adc	r22, r26
    662e:	7b 1f       	adc	r23, r27
    6630:	aa 0c       	add	r10, r10
    6632:	bb 1c       	adc	r11, r11
    6634:	cc 1c       	adc	r12, r12
    6636:	dd 1c       	adc	r13, r13
    6638:	97 fe       	sbrs	r9, 7
    663a:	08 c0       	rjmp	.+16     	; 0x664c <__mulsf3+0x110>
    663c:	81 e0       	ldi	r24, 0x01	; 1
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	a0 e0       	ldi	r26, 0x00	; 0
    6642:	b0 e0       	ldi	r27, 0x00	; 0
    6644:	a8 2a       	or	r10, r24
    6646:	b9 2a       	or	r11, r25
    6648:	ca 2a       	or	r12, r26
    664a:	db 2a       	or	r13, r27
    664c:	31 96       	adiw	r30, 0x01	; 1
    664e:	e0 32       	cpi	r30, 0x20	; 32
    6650:	f1 05       	cpc	r31, r1
    6652:	49 f0       	breq	.+18     	; 0x6666 <__mulsf3+0x12a>
    6654:	66 0c       	add	r6, r6
    6656:	77 1c       	adc	r7, r7
    6658:	88 1c       	adc	r8, r8
    665a:	99 1c       	adc	r9, r9
    665c:	56 94       	lsr	r5
    665e:	47 94       	ror	r4
    6660:	37 94       	ror	r3
    6662:	27 94       	ror	r2
    6664:	c3 cf       	rjmp	.-122    	; 0x65ec <__mulsf3+0xb0>
    6666:	fa 85       	ldd	r31, Y+10	; 0x0a
    6668:	ea 89       	ldd	r30, Y+18	; 0x12
    666a:	2b 89       	ldd	r18, Y+19	; 0x13
    666c:	3c 89       	ldd	r19, Y+20	; 0x14
    666e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6670:	9c 85       	ldd	r25, Y+12	; 0x0c
    6672:	28 0f       	add	r18, r24
    6674:	39 1f       	adc	r19, r25
    6676:	2e 5f       	subi	r18, 0xFE	; 254
    6678:	3f 4f       	sbci	r19, 0xFF	; 255
    667a:	17 c0       	rjmp	.+46     	; 0x66aa <__mulsf3+0x16e>
    667c:	ca 01       	movw	r24, r20
    667e:	81 70       	andi	r24, 0x01	; 1
    6680:	90 70       	andi	r25, 0x00	; 0
    6682:	89 2b       	or	r24, r25
    6684:	61 f0       	breq	.+24     	; 0x669e <__mulsf3+0x162>
    6686:	16 95       	lsr	r17
    6688:	07 95       	ror	r16
    668a:	f7 94       	ror	r15
    668c:	e7 94       	ror	r14
    668e:	80 e0       	ldi	r24, 0x00	; 0
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	a0 e0       	ldi	r26, 0x00	; 0
    6694:	b0 e8       	ldi	r27, 0x80	; 128
    6696:	e8 2a       	or	r14, r24
    6698:	f9 2a       	or	r15, r25
    669a:	0a 2b       	or	r16, r26
    669c:	1b 2b       	or	r17, r27
    669e:	76 95       	lsr	r23
    66a0:	67 95       	ror	r22
    66a2:	57 95       	ror	r21
    66a4:	47 95       	ror	r20
    66a6:	2f 5f       	subi	r18, 0xFF	; 255
    66a8:	3f 4f       	sbci	r19, 0xFF	; 255
    66aa:	77 fd       	sbrc	r23, 7
    66ac:	e7 cf       	rjmp	.-50     	; 0x667c <__mulsf3+0x140>
    66ae:	0c c0       	rjmp	.+24     	; 0x66c8 <__mulsf3+0x18c>
    66b0:	44 0f       	add	r20, r20
    66b2:	55 1f       	adc	r21, r21
    66b4:	66 1f       	adc	r22, r22
    66b6:	77 1f       	adc	r23, r23
    66b8:	17 fd       	sbrc	r17, 7
    66ba:	41 60       	ori	r20, 0x01	; 1
    66bc:	ee 0c       	add	r14, r14
    66be:	ff 1c       	adc	r15, r15
    66c0:	00 1f       	adc	r16, r16
    66c2:	11 1f       	adc	r17, r17
    66c4:	21 50       	subi	r18, 0x01	; 1
    66c6:	30 40       	sbci	r19, 0x00	; 0
    66c8:	40 30       	cpi	r20, 0x00	; 0
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	59 07       	cpc	r21, r25
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	69 07       	cpc	r22, r25
    66d2:	90 e4       	ldi	r25, 0x40	; 64
    66d4:	79 07       	cpc	r23, r25
    66d6:	60 f3       	brcs	.-40     	; 0x66b0 <__mulsf3+0x174>
    66d8:	2b 8f       	std	Y+27, r18	; 0x1b
    66da:	3c 8f       	std	Y+28, r19	; 0x1c
    66dc:	db 01       	movw	r26, r22
    66de:	ca 01       	movw	r24, r20
    66e0:	8f 77       	andi	r24, 0x7F	; 127
    66e2:	90 70       	andi	r25, 0x00	; 0
    66e4:	a0 70       	andi	r26, 0x00	; 0
    66e6:	b0 70       	andi	r27, 0x00	; 0
    66e8:	80 34       	cpi	r24, 0x40	; 64
    66ea:	91 05       	cpc	r25, r1
    66ec:	a1 05       	cpc	r26, r1
    66ee:	b1 05       	cpc	r27, r1
    66f0:	61 f4       	brne	.+24     	; 0x670a <__mulsf3+0x1ce>
    66f2:	47 fd       	sbrc	r20, 7
    66f4:	0a c0       	rjmp	.+20     	; 0x670a <__mulsf3+0x1ce>
    66f6:	e1 14       	cp	r14, r1
    66f8:	f1 04       	cpc	r15, r1
    66fa:	01 05       	cpc	r16, r1
    66fc:	11 05       	cpc	r17, r1
    66fe:	29 f0       	breq	.+10     	; 0x670a <__mulsf3+0x1ce>
    6700:	40 5c       	subi	r20, 0xC0	; 192
    6702:	5f 4f       	sbci	r21, 0xFF	; 255
    6704:	6f 4f       	sbci	r22, 0xFF	; 255
    6706:	7f 4f       	sbci	r23, 0xFF	; 255
    6708:	40 78       	andi	r20, 0x80	; 128
    670a:	1a 8e       	std	Y+26, r1	; 0x1a
    670c:	fe 17       	cp	r31, r30
    670e:	11 f0       	breq	.+4      	; 0x6714 <__mulsf3+0x1d8>
    6710:	81 e0       	ldi	r24, 0x01	; 1
    6712:	8a 8f       	std	Y+26, r24	; 0x1a
    6714:	4d 8f       	std	Y+29, r20	; 0x1d
    6716:	5e 8f       	std	Y+30, r21	; 0x1e
    6718:	6f 8f       	std	Y+31, r22	; 0x1f
    671a:	78 a3       	std	Y+32, r23	; 0x20
    671c:	83 e0       	ldi	r24, 0x03	; 3
    671e:	89 8f       	std	Y+25, r24	; 0x19
    6720:	ce 01       	movw	r24, r28
    6722:	49 96       	adiw	r24, 0x19	; 25
    6724:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <__pack_f>
    6728:	a0 96       	adiw	r28, 0x20	; 32
    672a:	e2 e1       	ldi	r30, 0x12	; 18
    672c:	0c 94 c6 37 	jmp	0x6f8c	; 0x6f8c <__epilogue_restores__>

00006730 <__divsf3>:
    6730:	a8 e1       	ldi	r26, 0x18	; 24
    6732:	b0 e0       	ldi	r27, 0x00	; 0
    6734:	ee e9       	ldi	r30, 0x9E	; 158
    6736:	f3 e3       	ldi	r31, 0x33	; 51
    6738:	0c 94 b2 37 	jmp	0x6f64	; 0x6f64 <__prologue_saves__+0x10>
    673c:	69 83       	std	Y+1, r22	; 0x01
    673e:	7a 83       	std	Y+2, r23	; 0x02
    6740:	8b 83       	std	Y+3, r24	; 0x03
    6742:	9c 83       	std	Y+4, r25	; 0x04
    6744:	2d 83       	std	Y+5, r18	; 0x05
    6746:	3e 83       	std	Y+6, r19	; 0x06
    6748:	4f 83       	std	Y+7, r20	; 0x07
    674a:	58 87       	std	Y+8, r21	; 0x08
    674c:	b9 e0       	ldi	r27, 0x09	; 9
    674e:	eb 2e       	mov	r14, r27
    6750:	f1 2c       	mov	r15, r1
    6752:	ec 0e       	add	r14, r28
    6754:	fd 1e       	adc	r15, r29
    6756:	ce 01       	movw	r24, r28
    6758:	01 96       	adiw	r24, 0x01	; 1
    675a:	b7 01       	movw	r22, r14
    675c:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6760:	8e 01       	movw	r16, r28
    6762:	0f 5e       	subi	r16, 0xEF	; 239
    6764:	1f 4f       	sbci	r17, 0xFF	; 255
    6766:	ce 01       	movw	r24, r28
    6768:	05 96       	adiw	r24, 0x05	; 5
    676a:	b8 01       	movw	r22, r16
    676c:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6770:	29 85       	ldd	r18, Y+9	; 0x09
    6772:	22 30       	cpi	r18, 0x02	; 2
    6774:	08 f4       	brcc	.+2      	; 0x6778 <__divsf3+0x48>
    6776:	7e c0       	rjmp	.+252    	; 0x6874 <__divsf3+0x144>
    6778:	39 89       	ldd	r19, Y+17	; 0x11
    677a:	32 30       	cpi	r19, 0x02	; 2
    677c:	10 f4       	brcc	.+4      	; 0x6782 <__divsf3+0x52>
    677e:	b8 01       	movw	r22, r16
    6780:	7c c0       	rjmp	.+248    	; 0x687a <__divsf3+0x14a>
    6782:	8a 85       	ldd	r24, Y+10	; 0x0a
    6784:	9a 89       	ldd	r25, Y+18	; 0x12
    6786:	89 27       	eor	r24, r25
    6788:	8a 87       	std	Y+10, r24	; 0x0a
    678a:	24 30       	cpi	r18, 0x04	; 4
    678c:	11 f0       	breq	.+4      	; 0x6792 <__divsf3+0x62>
    678e:	22 30       	cpi	r18, 0x02	; 2
    6790:	31 f4       	brne	.+12     	; 0x679e <__divsf3+0x6e>
    6792:	23 17       	cp	r18, r19
    6794:	09 f0       	breq	.+2      	; 0x6798 <__divsf3+0x68>
    6796:	6e c0       	rjmp	.+220    	; 0x6874 <__divsf3+0x144>
    6798:	66 e0       	ldi	r22, 0x06	; 6
    679a:	72 e0       	ldi	r23, 0x02	; 2
    679c:	6e c0       	rjmp	.+220    	; 0x687a <__divsf3+0x14a>
    679e:	34 30       	cpi	r19, 0x04	; 4
    67a0:	39 f4       	brne	.+14     	; 0x67b0 <__divsf3+0x80>
    67a2:	1d 86       	std	Y+13, r1	; 0x0d
    67a4:	1e 86       	std	Y+14, r1	; 0x0e
    67a6:	1f 86       	std	Y+15, r1	; 0x0f
    67a8:	18 8a       	std	Y+16, r1	; 0x10
    67aa:	1c 86       	std	Y+12, r1	; 0x0c
    67ac:	1b 86       	std	Y+11, r1	; 0x0b
    67ae:	04 c0       	rjmp	.+8      	; 0x67b8 <__divsf3+0x88>
    67b0:	32 30       	cpi	r19, 0x02	; 2
    67b2:	21 f4       	brne	.+8      	; 0x67bc <__divsf3+0x8c>
    67b4:	84 e0       	ldi	r24, 0x04	; 4
    67b6:	89 87       	std	Y+9, r24	; 0x09
    67b8:	b7 01       	movw	r22, r14
    67ba:	5f c0       	rjmp	.+190    	; 0x687a <__divsf3+0x14a>
    67bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    67be:	3c 85       	ldd	r19, Y+12	; 0x0c
    67c0:	8b 89       	ldd	r24, Y+19	; 0x13
    67c2:	9c 89       	ldd	r25, Y+20	; 0x14
    67c4:	28 1b       	sub	r18, r24
    67c6:	39 0b       	sbc	r19, r25
    67c8:	3c 87       	std	Y+12, r19	; 0x0c
    67ca:	2b 87       	std	Y+11, r18	; 0x0b
    67cc:	ed 84       	ldd	r14, Y+13	; 0x0d
    67ce:	fe 84       	ldd	r15, Y+14	; 0x0e
    67d0:	0f 85       	ldd	r16, Y+15	; 0x0f
    67d2:	18 89       	ldd	r17, Y+16	; 0x10
    67d4:	ad 88       	ldd	r10, Y+21	; 0x15
    67d6:	be 88       	ldd	r11, Y+22	; 0x16
    67d8:	cf 88       	ldd	r12, Y+23	; 0x17
    67da:	d8 8c       	ldd	r13, Y+24	; 0x18
    67dc:	ea 14       	cp	r14, r10
    67de:	fb 04       	cpc	r15, r11
    67e0:	0c 05       	cpc	r16, r12
    67e2:	1d 05       	cpc	r17, r13
    67e4:	40 f4       	brcc	.+16     	; 0x67f6 <__divsf3+0xc6>
    67e6:	ee 0c       	add	r14, r14
    67e8:	ff 1c       	adc	r15, r15
    67ea:	00 1f       	adc	r16, r16
    67ec:	11 1f       	adc	r17, r17
    67ee:	21 50       	subi	r18, 0x01	; 1
    67f0:	30 40       	sbci	r19, 0x00	; 0
    67f2:	3c 87       	std	Y+12, r19	; 0x0c
    67f4:	2b 87       	std	Y+11, r18	; 0x0b
    67f6:	20 e0       	ldi	r18, 0x00	; 0
    67f8:	30 e0       	ldi	r19, 0x00	; 0
    67fa:	40 e0       	ldi	r20, 0x00	; 0
    67fc:	50 e0       	ldi	r21, 0x00	; 0
    67fe:	80 e0       	ldi	r24, 0x00	; 0
    6800:	90 e0       	ldi	r25, 0x00	; 0
    6802:	a0 e0       	ldi	r26, 0x00	; 0
    6804:	b0 e4       	ldi	r27, 0x40	; 64
    6806:	60 e0       	ldi	r22, 0x00	; 0
    6808:	70 e0       	ldi	r23, 0x00	; 0
    680a:	ea 14       	cp	r14, r10
    680c:	fb 04       	cpc	r15, r11
    680e:	0c 05       	cpc	r16, r12
    6810:	1d 05       	cpc	r17, r13
    6812:	40 f0       	brcs	.+16     	; 0x6824 <__divsf3+0xf4>
    6814:	28 2b       	or	r18, r24
    6816:	39 2b       	or	r19, r25
    6818:	4a 2b       	or	r20, r26
    681a:	5b 2b       	or	r21, r27
    681c:	ea 18       	sub	r14, r10
    681e:	fb 08       	sbc	r15, r11
    6820:	0c 09       	sbc	r16, r12
    6822:	1d 09       	sbc	r17, r13
    6824:	b6 95       	lsr	r27
    6826:	a7 95       	ror	r26
    6828:	97 95       	ror	r25
    682a:	87 95       	ror	r24
    682c:	ee 0c       	add	r14, r14
    682e:	ff 1c       	adc	r15, r15
    6830:	00 1f       	adc	r16, r16
    6832:	11 1f       	adc	r17, r17
    6834:	6f 5f       	subi	r22, 0xFF	; 255
    6836:	7f 4f       	sbci	r23, 0xFF	; 255
    6838:	6f 31       	cpi	r22, 0x1F	; 31
    683a:	71 05       	cpc	r23, r1
    683c:	31 f7       	brne	.-52     	; 0x680a <__divsf3+0xda>
    683e:	da 01       	movw	r26, r20
    6840:	c9 01       	movw	r24, r18
    6842:	8f 77       	andi	r24, 0x7F	; 127
    6844:	90 70       	andi	r25, 0x00	; 0
    6846:	a0 70       	andi	r26, 0x00	; 0
    6848:	b0 70       	andi	r27, 0x00	; 0
    684a:	80 34       	cpi	r24, 0x40	; 64
    684c:	91 05       	cpc	r25, r1
    684e:	a1 05       	cpc	r26, r1
    6850:	b1 05       	cpc	r27, r1
    6852:	61 f4       	brne	.+24     	; 0x686c <__divsf3+0x13c>
    6854:	27 fd       	sbrc	r18, 7
    6856:	0a c0       	rjmp	.+20     	; 0x686c <__divsf3+0x13c>
    6858:	e1 14       	cp	r14, r1
    685a:	f1 04       	cpc	r15, r1
    685c:	01 05       	cpc	r16, r1
    685e:	11 05       	cpc	r17, r1
    6860:	29 f0       	breq	.+10     	; 0x686c <__divsf3+0x13c>
    6862:	20 5c       	subi	r18, 0xC0	; 192
    6864:	3f 4f       	sbci	r19, 0xFF	; 255
    6866:	4f 4f       	sbci	r20, 0xFF	; 255
    6868:	5f 4f       	sbci	r21, 0xFF	; 255
    686a:	20 78       	andi	r18, 0x80	; 128
    686c:	2d 87       	std	Y+13, r18	; 0x0d
    686e:	3e 87       	std	Y+14, r19	; 0x0e
    6870:	4f 87       	std	Y+15, r20	; 0x0f
    6872:	58 8b       	std	Y+16, r21	; 0x10
    6874:	be 01       	movw	r22, r28
    6876:	67 5f       	subi	r22, 0xF7	; 247
    6878:	7f 4f       	sbci	r23, 0xFF	; 255
    687a:	cb 01       	movw	r24, r22
    687c:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <__pack_f>
    6880:	68 96       	adiw	r28, 0x18	; 24
    6882:	ea e0       	ldi	r30, 0x0A	; 10
    6884:	0c 94 ce 37 	jmp	0x6f9c	; 0x6f9c <__epilogue_restores__+0x10>

00006888 <__gtsf2>:
    6888:	a8 e1       	ldi	r26, 0x18	; 24
    688a:	b0 e0       	ldi	r27, 0x00	; 0
    688c:	ea e4       	ldi	r30, 0x4A	; 74
    688e:	f4 e3       	ldi	r31, 0x34	; 52
    6890:	0c 94 b6 37 	jmp	0x6f6c	; 0x6f6c <__prologue_saves__+0x18>
    6894:	69 83       	std	Y+1, r22	; 0x01
    6896:	7a 83       	std	Y+2, r23	; 0x02
    6898:	8b 83       	std	Y+3, r24	; 0x03
    689a:	9c 83       	std	Y+4, r25	; 0x04
    689c:	2d 83       	std	Y+5, r18	; 0x05
    689e:	3e 83       	std	Y+6, r19	; 0x06
    68a0:	4f 83       	std	Y+7, r20	; 0x07
    68a2:	58 87       	std	Y+8, r21	; 0x08
    68a4:	89 e0       	ldi	r24, 0x09	; 9
    68a6:	e8 2e       	mov	r14, r24
    68a8:	f1 2c       	mov	r15, r1
    68aa:	ec 0e       	add	r14, r28
    68ac:	fd 1e       	adc	r15, r29
    68ae:	ce 01       	movw	r24, r28
    68b0:	01 96       	adiw	r24, 0x01	; 1
    68b2:	b7 01       	movw	r22, r14
    68b4:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    68b8:	8e 01       	movw	r16, r28
    68ba:	0f 5e       	subi	r16, 0xEF	; 239
    68bc:	1f 4f       	sbci	r17, 0xFF	; 255
    68be:	ce 01       	movw	r24, r28
    68c0:	05 96       	adiw	r24, 0x05	; 5
    68c2:	b8 01       	movw	r22, r16
    68c4:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    68c8:	89 85       	ldd	r24, Y+9	; 0x09
    68ca:	82 30       	cpi	r24, 0x02	; 2
    68cc:	40 f0       	brcs	.+16     	; 0x68de <__gtsf2+0x56>
    68ce:	89 89       	ldd	r24, Y+17	; 0x11
    68d0:	82 30       	cpi	r24, 0x02	; 2
    68d2:	28 f0       	brcs	.+10     	; 0x68de <__gtsf2+0x56>
    68d4:	c7 01       	movw	r24, r14
    68d6:	b8 01       	movw	r22, r16
    68d8:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__fpcmp_parts_f>
    68dc:	01 c0       	rjmp	.+2      	; 0x68e0 <__gtsf2+0x58>
    68de:	8f ef       	ldi	r24, 0xFF	; 255
    68e0:	68 96       	adiw	r28, 0x18	; 24
    68e2:	e6 e0       	ldi	r30, 0x06	; 6
    68e4:	0c 94 d2 37 	jmp	0x6fa4	; 0x6fa4 <__epilogue_restores__+0x18>

000068e8 <__gesf2>:
    68e8:	a8 e1       	ldi	r26, 0x18	; 24
    68ea:	b0 e0       	ldi	r27, 0x00	; 0
    68ec:	ea e7       	ldi	r30, 0x7A	; 122
    68ee:	f4 e3       	ldi	r31, 0x34	; 52
    68f0:	0c 94 b6 37 	jmp	0x6f6c	; 0x6f6c <__prologue_saves__+0x18>
    68f4:	69 83       	std	Y+1, r22	; 0x01
    68f6:	7a 83       	std	Y+2, r23	; 0x02
    68f8:	8b 83       	std	Y+3, r24	; 0x03
    68fa:	9c 83       	std	Y+4, r25	; 0x04
    68fc:	2d 83       	std	Y+5, r18	; 0x05
    68fe:	3e 83       	std	Y+6, r19	; 0x06
    6900:	4f 83       	std	Y+7, r20	; 0x07
    6902:	58 87       	std	Y+8, r21	; 0x08
    6904:	89 e0       	ldi	r24, 0x09	; 9
    6906:	e8 2e       	mov	r14, r24
    6908:	f1 2c       	mov	r15, r1
    690a:	ec 0e       	add	r14, r28
    690c:	fd 1e       	adc	r15, r29
    690e:	ce 01       	movw	r24, r28
    6910:	01 96       	adiw	r24, 0x01	; 1
    6912:	b7 01       	movw	r22, r14
    6914:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6918:	8e 01       	movw	r16, r28
    691a:	0f 5e       	subi	r16, 0xEF	; 239
    691c:	1f 4f       	sbci	r17, 0xFF	; 255
    691e:	ce 01       	movw	r24, r28
    6920:	05 96       	adiw	r24, 0x05	; 5
    6922:	b8 01       	movw	r22, r16
    6924:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6928:	89 85       	ldd	r24, Y+9	; 0x09
    692a:	82 30       	cpi	r24, 0x02	; 2
    692c:	40 f0       	brcs	.+16     	; 0x693e <__gesf2+0x56>
    692e:	89 89       	ldd	r24, Y+17	; 0x11
    6930:	82 30       	cpi	r24, 0x02	; 2
    6932:	28 f0       	brcs	.+10     	; 0x693e <__gesf2+0x56>
    6934:	c7 01       	movw	r24, r14
    6936:	b8 01       	movw	r22, r16
    6938:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__fpcmp_parts_f>
    693c:	01 c0       	rjmp	.+2      	; 0x6940 <__gesf2+0x58>
    693e:	8f ef       	ldi	r24, 0xFF	; 255
    6940:	68 96       	adiw	r28, 0x18	; 24
    6942:	e6 e0       	ldi	r30, 0x06	; 6
    6944:	0c 94 d2 37 	jmp	0x6fa4	; 0x6fa4 <__epilogue_restores__+0x18>

00006948 <__ltsf2>:
    6948:	a8 e1       	ldi	r26, 0x18	; 24
    694a:	b0 e0       	ldi	r27, 0x00	; 0
    694c:	ea ea       	ldi	r30, 0xAA	; 170
    694e:	f4 e3       	ldi	r31, 0x34	; 52
    6950:	0c 94 b6 37 	jmp	0x6f6c	; 0x6f6c <__prologue_saves__+0x18>
    6954:	69 83       	std	Y+1, r22	; 0x01
    6956:	7a 83       	std	Y+2, r23	; 0x02
    6958:	8b 83       	std	Y+3, r24	; 0x03
    695a:	9c 83       	std	Y+4, r25	; 0x04
    695c:	2d 83       	std	Y+5, r18	; 0x05
    695e:	3e 83       	std	Y+6, r19	; 0x06
    6960:	4f 83       	std	Y+7, r20	; 0x07
    6962:	58 87       	std	Y+8, r21	; 0x08
    6964:	89 e0       	ldi	r24, 0x09	; 9
    6966:	e8 2e       	mov	r14, r24
    6968:	f1 2c       	mov	r15, r1
    696a:	ec 0e       	add	r14, r28
    696c:	fd 1e       	adc	r15, r29
    696e:	ce 01       	movw	r24, r28
    6970:	01 96       	adiw	r24, 0x01	; 1
    6972:	b7 01       	movw	r22, r14
    6974:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6978:	8e 01       	movw	r16, r28
    697a:	0f 5e       	subi	r16, 0xEF	; 239
    697c:	1f 4f       	sbci	r17, 0xFF	; 255
    697e:	ce 01       	movw	r24, r28
    6980:	05 96       	adiw	r24, 0x05	; 5
    6982:	b8 01       	movw	r22, r16
    6984:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    6988:	89 85       	ldd	r24, Y+9	; 0x09
    698a:	82 30       	cpi	r24, 0x02	; 2
    698c:	40 f0       	brcs	.+16     	; 0x699e <__ltsf2+0x56>
    698e:	89 89       	ldd	r24, Y+17	; 0x11
    6990:	82 30       	cpi	r24, 0x02	; 2
    6992:	28 f0       	brcs	.+10     	; 0x699e <__ltsf2+0x56>
    6994:	c7 01       	movw	r24, r14
    6996:	b8 01       	movw	r22, r16
    6998:	0e 94 3d 37 	call	0x6e7a	; 0x6e7a <__fpcmp_parts_f>
    699c:	01 c0       	rjmp	.+2      	; 0x69a0 <__ltsf2+0x58>
    699e:	81 e0       	ldi	r24, 0x01	; 1
    69a0:	68 96       	adiw	r28, 0x18	; 24
    69a2:	e6 e0       	ldi	r30, 0x06	; 6
    69a4:	0c 94 d2 37 	jmp	0x6fa4	; 0x6fa4 <__epilogue_restores__+0x18>

000069a8 <__fixsfsi>:
    69a8:	ac e0       	ldi	r26, 0x0C	; 12
    69aa:	b0 e0       	ldi	r27, 0x00	; 0
    69ac:	ea ed       	ldi	r30, 0xDA	; 218
    69ae:	f4 e3       	ldi	r31, 0x34	; 52
    69b0:	0c 94 ba 37 	jmp	0x6f74	; 0x6f74 <__prologue_saves__+0x20>
    69b4:	69 83       	std	Y+1, r22	; 0x01
    69b6:	7a 83       	std	Y+2, r23	; 0x02
    69b8:	8b 83       	std	Y+3, r24	; 0x03
    69ba:	9c 83       	std	Y+4, r25	; 0x04
    69bc:	ce 01       	movw	r24, r28
    69be:	01 96       	adiw	r24, 0x01	; 1
    69c0:	be 01       	movw	r22, r28
    69c2:	6b 5f       	subi	r22, 0xFB	; 251
    69c4:	7f 4f       	sbci	r23, 0xFF	; 255
    69c6:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__unpack_f>
    69ca:	8d 81       	ldd	r24, Y+5	; 0x05
    69cc:	82 30       	cpi	r24, 0x02	; 2
    69ce:	61 f1       	breq	.+88     	; 0x6a28 <__fixsfsi+0x80>
    69d0:	82 30       	cpi	r24, 0x02	; 2
    69d2:	50 f1       	brcs	.+84     	; 0x6a28 <__fixsfsi+0x80>
    69d4:	84 30       	cpi	r24, 0x04	; 4
    69d6:	21 f4       	brne	.+8      	; 0x69e0 <__fixsfsi+0x38>
    69d8:	8e 81       	ldd	r24, Y+6	; 0x06
    69da:	88 23       	and	r24, r24
    69dc:	51 f1       	breq	.+84     	; 0x6a32 <__fixsfsi+0x8a>
    69de:	2e c0       	rjmp	.+92     	; 0x6a3c <__fixsfsi+0x94>
    69e0:	2f 81       	ldd	r18, Y+7	; 0x07
    69e2:	38 85       	ldd	r19, Y+8	; 0x08
    69e4:	37 fd       	sbrc	r19, 7
    69e6:	20 c0       	rjmp	.+64     	; 0x6a28 <__fixsfsi+0x80>
    69e8:	6e 81       	ldd	r22, Y+6	; 0x06
    69ea:	2f 31       	cpi	r18, 0x1F	; 31
    69ec:	31 05       	cpc	r19, r1
    69ee:	1c f0       	brlt	.+6      	; 0x69f6 <__fixsfsi+0x4e>
    69f0:	66 23       	and	r22, r22
    69f2:	f9 f0       	breq	.+62     	; 0x6a32 <__fixsfsi+0x8a>
    69f4:	23 c0       	rjmp	.+70     	; 0x6a3c <__fixsfsi+0x94>
    69f6:	8e e1       	ldi	r24, 0x1E	; 30
    69f8:	90 e0       	ldi	r25, 0x00	; 0
    69fa:	82 1b       	sub	r24, r18
    69fc:	93 0b       	sbc	r25, r19
    69fe:	29 85       	ldd	r18, Y+9	; 0x09
    6a00:	3a 85       	ldd	r19, Y+10	; 0x0a
    6a02:	4b 85       	ldd	r20, Y+11	; 0x0b
    6a04:	5c 85       	ldd	r21, Y+12	; 0x0c
    6a06:	04 c0       	rjmp	.+8      	; 0x6a10 <__fixsfsi+0x68>
    6a08:	56 95       	lsr	r21
    6a0a:	47 95       	ror	r20
    6a0c:	37 95       	ror	r19
    6a0e:	27 95       	ror	r18
    6a10:	8a 95       	dec	r24
    6a12:	d2 f7       	brpl	.-12     	; 0x6a08 <__fixsfsi+0x60>
    6a14:	66 23       	and	r22, r22
    6a16:	b1 f0       	breq	.+44     	; 0x6a44 <__fixsfsi+0x9c>
    6a18:	50 95       	com	r21
    6a1a:	40 95       	com	r20
    6a1c:	30 95       	com	r19
    6a1e:	21 95       	neg	r18
    6a20:	3f 4f       	sbci	r19, 0xFF	; 255
    6a22:	4f 4f       	sbci	r20, 0xFF	; 255
    6a24:	5f 4f       	sbci	r21, 0xFF	; 255
    6a26:	0e c0       	rjmp	.+28     	; 0x6a44 <__fixsfsi+0x9c>
    6a28:	20 e0       	ldi	r18, 0x00	; 0
    6a2a:	30 e0       	ldi	r19, 0x00	; 0
    6a2c:	40 e0       	ldi	r20, 0x00	; 0
    6a2e:	50 e0       	ldi	r21, 0x00	; 0
    6a30:	09 c0       	rjmp	.+18     	; 0x6a44 <__fixsfsi+0x9c>
    6a32:	2f ef       	ldi	r18, 0xFF	; 255
    6a34:	3f ef       	ldi	r19, 0xFF	; 255
    6a36:	4f ef       	ldi	r20, 0xFF	; 255
    6a38:	5f e7       	ldi	r21, 0x7F	; 127
    6a3a:	04 c0       	rjmp	.+8      	; 0x6a44 <__fixsfsi+0x9c>
    6a3c:	20 e0       	ldi	r18, 0x00	; 0
    6a3e:	30 e0       	ldi	r19, 0x00	; 0
    6a40:	40 e0       	ldi	r20, 0x00	; 0
    6a42:	50 e8       	ldi	r21, 0x80	; 128
    6a44:	b9 01       	movw	r22, r18
    6a46:	ca 01       	movw	r24, r20
    6a48:	2c 96       	adiw	r28, 0x0c	; 12
    6a4a:	e2 e0       	ldi	r30, 0x02	; 2
    6a4c:	0c 94 d6 37 	jmp	0x6fac	; 0x6fac <__epilogue_restores__+0x20>

00006a50 <__floatunsisf>:
    6a50:	a8 e0       	ldi	r26, 0x08	; 8
    6a52:	b0 e0       	ldi	r27, 0x00	; 0
    6a54:	ee e2       	ldi	r30, 0x2E	; 46
    6a56:	f5 e3       	ldi	r31, 0x35	; 53
    6a58:	0c 94 b2 37 	jmp	0x6f64	; 0x6f64 <__prologue_saves__+0x10>
    6a5c:	7b 01       	movw	r14, r22
    6a5e:	8c 01       	movw	r16, r24
    6a60:	61 15       	cp	r22, r1
    6a62:	71 05       	cpc	r23, r1
    6a64:	81 05       	cpc	r24, r1
    6a66:	91 05       	cpc	r25, r1
    6a68:	19 f4       	brne	.+6      	; 0x6a70 <__floatunsisf+0x20>
    6a6a:	82 e0       	ldi	r24, 0x02	; 2
    6a6c:	89 83       	std	Y+1, r24	; 0x01
    6a6e:	60 c0       	rjmp	.+192    	; 0x6b30 <__floatunsisf+0xe0>
    6a70:	83 e0       	ldi	r24, 0x03	; 3
    6a72:	89 83       	std	Y+1, r24	; 0x01
    6a74:	8e e1       	ldi	r24, 0x1E	; 30
    6a76:	c8 2e       	mov	r12, r24
    6a78:	d1 2c       	mov	r13, r1
    6a7a:	dc 82       	std	Y+4, r13	; 0x04
    6a7c:	cb 82       	std	Y+3, r12	; 0x03
    6a7e:	ed 82       	std	Y+5, r14	; 0x05
    6a80:	fe 82       	std	Y+6, r15	; 0x06
    6a82:	0f 83       	std	Y+7, r16	; 0x07
    6a84:	18 87       	std	Y+8, r17	; 0x08
    6a86:	c8 01       	movw	r24, r16
    6a88:	b7 01       	movw	r22, r14
    6a8a:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <__clzsi2>
    6a8e:	fc 01       	movw	r30, r24
    6a90:	31 97       	sbiw	r30, 0x01	; 1
    6a92:	f7 ff       	sbrs	r31, 7
    6a94:	3b c0       	rjmp	.+118    	; 0x6b0c <__floatunsisf+0xbc>
    6a96:	22 27       	eor	r18, r18
    6a98:	33 27       	eor	r19, r19
    6a9a:	2e 1b       	sub	r18, r30
    6a9c:	3f 0b       	sbc	r19, r31
    6a9e:	57 01       	movw	r10, r14
    6aa0:	68 01       	movw	r12, r16
    6aa2:	02 2e       	mov	r0, r18
    6aa4:	04 c0       	rjmp	.+8      	; 0x6aae <__floatunsisf+0x5e>
    6aa6:	d6 94       	lsr	r13
    6aa8:	c7 94       	ror	r12
    6aaa:	b7 94       	ror	r11
    6aac:	a7 94       	ror	r10
    6aae:	0a 94       	dec	r0
    6ab0:	d2 f7       	brpl	.-12     	; 0x6aa6 <__floatunsisf+0x56>
    6ab2:	40 e0       	ldi	r20, 0x00	; 0
    6ab4:	50 e0       	ldi	r21, 0x00	; 0
    6ab6:	60 e0       	ldi	r22, 0x00	; 0
    6ab8:	70 e0       	ldi	r23, 0x00	; 0
    6aba:	81 e0       	ldi	r24, 0x01	; 1
    6abc:	90 e0       	ldi	r25, 0x00	; 0
    6abe:	a0 e0       	ldi	r26, 0x00	; 0
    6ac0:	b0 e0       	ldi	r27, 0x00	; 0
    6ac2:	04 c0       	rjmp	.+8      	; 0x6acc <__floatunsisf+0x7c>
    6ac4:	88 0f       	add	r24, r24
    6ac6:	99 1f       	adc	r25, r25
    6ac8:	aa 1f       	adc	r26, r26
    6aca:	bb 1f       	adc	r27, r27
    6acc:	2a 95       	dec	r18
    6ace:	d2 f7       	brpl	.-12     	; 0x6ac4 <__floatunsisf+0x74>
    6ad0:	01 97       	sbiw	r24, 0x01	; 1
    6ad2:	a1 09       	sbc	r26, r1
    6ad4:	b1 09       	sbc	r27, r1
    6ad6:	8e 21       	and	r24, r14
    6ad8:	9f 21       	and	r25, r15
    6ada:	a0 23       	and	r26, r16
    6adc:	b1 23       	and	r27, r17
    6ade:	00 97       	sbiw	r24, 0x00	; 0
    6ae0:	a1 05       	cpc	r26, r1
    6ae2:	b1 05       	cpc	r27, r1
    6ae4:	21 f0       	breq	.+8      	; 0x6aee <__floatunsisf+0x9e>
    6ae6:	41 e0       	ldi	r20, 0x01	; 1
    6ae8:	50 e0       	ldi	r21, 0x00	; 0
    6aea:	60 e0       	ldi	r22, 0x00	; 0
    6aec:	70 e0       	ldi	r23, 0x00	; 0
    6aee:	4a 29       	or	r20, r10
    6af0:	5b 29       	or	r21, r11
    6af2:	6c 29       	or	r22, r12
    6af4:	7d 29       	or	r23, r13
    6af6:	4d 83       	std	Y+5, r20	; 0x05
    6af8:	5e 83       	std	Y+6, r21	; 0x06
    6afa:	6f 83       	std	Y+7, r22	; 0x07
    6afc:	78 87       	std	Y+8, r23	; 0x08
    6afe:	8e e1       	ldi	r24, 0x1E	; 30
    6b00:	90 e0       	ldi	r25, 0x00	; 0
    6b02:	8e 1b       	sub	r24, r30
    6b04:	9f 0b       	sbc	r25, r31
    6b06:	9c 83       	std	Y+4, r25	; 0x04
    6b08:	8b 83       	std	Y+3, r24	; 0x03
    6b0a:	12 c0       	rjmp	.+36     	; 0x6b30 <__floatunsisf+0xe0>
    6b0c:	30 97       	sbiw	r30, 0x00	; 0
    6b0e:	81 f0       	breq	.+32     	; 0x6b30 <__floatunsisf+0xe0>
    6b10:	0e 2e       	mov	r0, r30
    6b12:	04 c0       	rjmp	.+8      	; 0x6b1c <__floatunsisf+0xcc>
    6b14:	ee 0c       	add	r14, r14
    6b16:	ff 1c       	adc	r15, r15
    6b18:	00 1f       	adc	r16, r16
    6b1a:	11 1f       	adc	r17, r17
    6b1c:	0a 94       	dec	r0
    6b1e:	d2 f7       	brpl	.-12     	; 0x6b14 <__floatunsisf+0xc4>
    6b20:	ed 82       	std	Y+5, r14	; 0x05
    6b22:	fe 82       	std	Y+6, r15	; 0x06
    6b24:	0f 83       	std	Y+7, r16	; 0x07
    6b26:	18 87       	std	Y+8, r17	; 0x08
    6b28:	ce 1a       	sub	r12, r30
    6b2a:	df 0a       	sbc	r13, r31
    6b2c:	dc 82       	std	Y+4, r13	; 0x04
    6b2e:	cb 82       	std	Y+3, r12	; 0x03
    6b30:	1a 82       	std	Y+2, r1	; 0x02
    6b32:	ce 01       	movw	r24, r28
    6b34:	01 96       	adiw	r24, 0x01	; 1
    6b36:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <__pack_f>
    6b3a:	28 96       	adiw	r28, 0x08	; 8
    6b3c:	ea e0       	ldi	r30, 0x0A	; 10
    6b3e:	0c 94 ce 37 	jmp	0x6f9c	; 0x6f9c <__epilogue_restores__+0x10>

00006b42 <__clzsi2>:
    6b42:	ef 92       	push	r14
    6b44:	ff 92       	push	r15
    6b46:	0f 93       	push	r16
    6b48:	1f 93       	push	r17
    6b4a:	7b 01       	movw	r14, r22
    6b4c:	8c 01       	movw	r16, r24
    6b4e:	80 e0       	ldi	r24, 0x00	; 0
    6b50:	e8 16       	cp	r14, r24
    6b52:	80 e0       	ldi	r24, 0x00	; 0
    6b54:	f8 06       	cpc	r15, r24
    6b56:	81 e0       	ldi	r24, 0x01	; 1
    6b58:	08 07       	cpc	r16, r24
    6b5a:	80 e0       	ldi	r24, 0x00	; 0
    6b5c:	18 07       	cpc	r17, r24
    6b5e:	88 f4       	brcc	.+34     	; 0x6b82 <__clzsi2+0x40>
    6b60:	8f ef       	ldi	r24, 0xFF	; 255
    6b62:	e8 16       	cp	r14, r24
    6b64:	f1 04       	cpc	r15, r1
    6b66:	01 05       	cpc	r16, r1
    6b68:	11 05       	cpc	r17, r1
    6b6a:	31 f0       	breq	.+12     	; 0x6b78 <__clzsi2+0x36>
    6b6c:	28 f0       	brcs	.+10     	; 0x6b78 <__clzsi2+0x36>
    6b6e:	88 e0       	ldi	r24, 0x08	; 8
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	a0 e0       	ldi	r26, 0x00	; 0
    6b74:	b0 e0       	ldi	r27, 0x00	; 0
    6b76:	17 c0       	rjmp	.+46     	; 0x6ba6 <__clzsi2+0x64>
    6b78:	80 e0       	ldi	r24, 0x00	; 0
    6b7a:	90 e0       	ldi	r25, 0x00	; 0
    6b7c:	a0 e0       	ldi	r26, 0x00	; 0
    6b7e:	b0 e0       	ldi	r27, 0x00	; 0
    6b80:	12 c0       	rjmp	.+36     	; 0x6ba6 <__clzsi2+0x64>
    6b82:	80 e0       	ldi	r24, 0x00	; 0
    6b84:	e8 16       	cp	r14, r24
    6b86:	80 e0       	ldi	r24, 0x00	; 0
    6b88:	f8 06       	cpc	r15, r24
    6b8a:	80 e0       	ldi	r24, 0x00	; 0
    6b8c:	08 07       	cpc	r16, r24
    6b8e:	81 e0       	ldi	r24, 0x01	; 1
    6b90:	18 07       	cpc	r17, r24
    6b92:	28 f0       	brcs	.+10     	; 0x6b9e <__clzsi2+0x5c>
    6b94:	88 e1       	ldi	r24, 0x18	; 24
    6b96:	90 e0       	ldi	r25, 0x00	; 0
    6b98:	a0 e0       	ldi	r26, 0x00	; 0
    6b9a:	b0 e0       	ldi	r27, 0x00	; 0
    6b9c:	04 c0       	rjmp	.+8      	; 0x6ba6 <__clzsi2+0x64>
    6b9e:	80 e1       	ldi	r24, 0x10	; 16
    6ba0:	90 e0       	ldi	r25, 0x00	; 0
    6ba2:	a0 e0       	ldi	r26, 0x00	; 0
    6ba4:	b0 e0       	ldi	r27, 0x00	; 0
    6ba6:	20 e2       	ldi	r18, 0x20	; 32
    6ba8:	30 e0       	ldi	r19, 0x00	; 0
    6baa:	40 e0       	ldi	r20, 0x00	; 0
    6bac:	50 e0       	ldi	r21, 0x00	; 0
    6bae:	28 1b       	sub	r18, r24
    6bb0:	39 0b       	sbc	r19, r25
    6bb2:	4a 0b       	sbc	r20, r26
    6bb4:	5b 0b       	sbc	r21, r27
    6bb6:	04 c0       	rjmp	.+8      	; 0x6bc0 <__clzsi2+0x7e>
    6bb8:	16 95       	lsr	r17
    6bba:	07 95       	ror	r16
    6bbc:	f7 94       	ror	r15
    6bbe:	e7 94       	ror	r14
    6bc0:	8a 95       	dec	r24
    6bc2:	d2 f7       	brpl	.-12     	; 0x6bb8 <__clzsi2+0x76>
    6bc4:	f7 01       	movw	r30, r14
    6bc6:	e2 5f       	subi	r30, 0xF2	; 242
    6bc8:	fd 4f       	sbci	r31, 0xFD	; 253
    6bca:	80 81       	ld	r24, Z
    6bcc:	28 1b       	sub	r18, r24
    6bce:	31 09       	sbc	r19, r1
    6bd0:	41 09       	sbc	r20, r1
    6bd2:	51 09       	sbc	r21, r1
    6bd4:	c9 01       	movw	r24, r18
    6bd6:	1f 91       	pop	r17
    6bd8:	0f 91       	pop	r16
    6bda:	ff 90       	pop	r15
    6bdc:	ef 90       	pop	r14
    6bde:	08 95       	ret

00006be0 <__pack_f>:
    6be0:	df 92       	push	r13
    6be2:	ef 92       	push	r14
    6be4:	ff 92       	push	r15
    6be6:	0f 93       	push	r16
    6be8:	1f 93       	push	r17
    6bea:	fc 01       	movw	r30, r24
    6bec:	e4 80       	ldd	r14, Z+4	; 0x04
    6bee:	f5 80       	ldd	r15, Z+5	; 0x05
    6bf0:	06 81       	ldd	r16, Z+6	; 0x06
    6bf2:	17 81       	ldd	r17, Z+7	; 0x07
    6bf4:	d1 80       	ldd	r13, Z+1	; 0x01
    6bf6:	80 81       	ld	r24, Z
    6bf8:	82 30       	cpi	r24, 0x02	; 2
    6bfa:	48 f4       	brcc	.+18     	; 0x6c0e <__pack_f+0x2e>
    6bfc:	80 e0       	ldi	r24, 0x00	; 0
    6bfe:	90 e0       	ldi	r25, 0x00	; 0
    6c00:	a0 e1       	ldi	r26, 0x10	; 16
    6c02:	b0 e0       	ldi	r27, 0x00	; 0
    6c04:	e8 2a       	or	r14, r24
    6c06:	f9 2a       	or	r15, r25
    6c08:	0a 2b       	or	r16, r26
    6c0a:	1b 2b       	or	r17, r27
    6c0c:	a5 c0       	rjmp	.+330    	; 0x6d58 <__pack_f+0x178>
    6c0e:	84 30       	cpi	r24, 0x04	; 4
    6c10:	09 f4       	brne	.+2      	; 0x6c14 <__pack_f+0x34>
    6c12:	9f c0       	rjmp	.+318    	; 0x6d52 <__pack_f+0x172>
    6c14:	82 30       	cpi	r24, 0x02	; 2
    6c16:	21 f4       	brne	.+8      	; 0x6c20 <__pack_f+0x40>
    6c18:	ee 24       	eor	r14, r14
    6c1a:	ff 24       	eor	r15, r15
    6c1c:	87 01       	movw	r16, r14
    6c1e:	05 c0       	rjmp	.+10     	; 0x6c2a <__pack_f+0x4a>
    6c20:	e1 14       	cp	r14, r1
    6c22:	f1 04       	cpc	r15, r1
    6c24:	01 05       	cpc	r16, r1
    6c26:	11 05       	cpc	r17, r1
    6c28:	19 f4       	brne	.+6      	; 0x6c30 <__pack_f+0x50>
    6c2a:	e0 e0       	ldi	r30, 0x00	; 0
    6c2c:	f0 e0       	ldi	r31, 0x00	; 0
    6c2e:	96 c0       	rjmp	.+300    	; 0x6d5c <__pack_f+0x17c>
    6c30:	62 81       	ldd	r22, Z+2	; 0x02
    6c32:	73 81       	ldd	r23, Z+3	; 0x03
    6c34:	9f ef       	ldi	r25, 0xFF	; 255
    6c36:	62 38       	cpi	r22, 0x82	; 130
    6c38:	79 07       	cpc	r23, r25
    6c3a:	0c f0       	brlt	.+2      	; 0x6c3e <__pack_f+0x5e>
    6c3c:	5b c0       	rjmp	.+182    	; 0x6cf4 <__pack_f+0x114>
    6c3e:	22 e8       	ldi	r18, 0x82	; 130
    6c40:	3f ef       	ldi	r19, 0xFF	; 255
    6c42:	26 1b       	sub	r18, r22
    6c44:	37 0b       	sbc	r19, r23
    6c46:	2a 31       	cpi	r18, 0x1A	; 26
    6c48:	31 05       	cpc	r19, r1
    6c4a:	2c f0       	brlt	.+10     	; 0x6c56 <__pack_f+0x76>
    6c4c:	20 e0       	ldi	r18, 0x00	; 0
    6c4e:	30 e0       	ldi	r19, 0x00	; 0
    6c50:	40 e0       	ldi	r20, 0x00	; 0
    6c52:	50 e0       	ldi	r21, 0x00	; 0
    6c54:	2a c0       	rjmp	.+84     	; 0x6caa <__pack_f+0xca>
    6c56:	b8 01       	movw	r22, r16
    6c58:	a7 01       	movw	r20, r14
    6c5a:	02 2e       	mov	r0, r18
    6c5c:	04 c0       	rjmp	.+8      	; 0x6c66 <__pack_f+0x86>
    6c5e:	76 95       	lsr	r23
    6c60:	67 95       	ror	r22
    6c62:	57 95       	ror	r21
    6c64:	47 95       	ror	r20
    6c66:	0a 94       	dec	r0
    6c68:	d2 f7       	brpl	.-12     	; 0x6c5e <__pack_f+0x7e>
    6c6a:	81 e0       	ldi	r24, 0x01	; 1
    6c6c:	90 e0       	ldi	r25, 0x00	; 0
    6c6e:	a0 e0       	ldi	r26, 0x00	; 0
    6c70:	b0 e0       	ldi	r27, 0x00	; 0
    6c72:	04 c0       	rjmp	.+8      	; 0x6c7c <__pack_f+0x9c>
    6c74:	88 0f       	add	r24, r24
    6c76:	99 1f       	adc	r25, r25
    6c78:	aa 1f       	adc	r26, r26
    6c7a:	bb 1f       	adc	r27, r27
    6c7c:	2a 95       	dec	r18
    6c7e:	d2 f7       	brpl	.-12     	; 0x6c74 <__pack_f+0x94>
    6c80:	01 97       	sbiw	r24, 0x01	; 1
    6c82:	a1 09       	sbc	r26, r1
    6c84:	b1 09       	sbc	r27, r1
    6c86:	8e 21       	and	r24, r14
    6c88:	9f 21       	and	r25, r15
    6c8a:	a0 23       	and	r26, r16
    6c8c:	b1 23       	and	r27, r17
    6c8e:	00 97       	sbiw	r24, 0x00	; 0
    6c90:	a1 05       	cpc	r26, r1
    6c92:	b1 05       	cpc	r27, r1
    6c94:	21 f0       	breq	.+8      	; 0x6c9e <__pack_f+0xbe>
    6c96:	81 e0       	ldi	r24, 0x01	; 1
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	a0 e0       	ldi	r26, 0x00	; 0
    6c9c:	b0 e0       	ldi	r27, 0x00	; 0
    6c9e:	9a 01       	movw	r18, r20
    6ca0:	ab 01       	movw	r20, r22
    6ca2:	28 2b       	or	r18, r24
    6ca4:	39 2b       	or	r19, r25
    6ca6:	4a 2b       	or	r20, r26
    6ca8:	5b 2b       	or	r21, r27
    6caa:	da 01       	movw	r26, r20
    6cac:	c9 01       	movw	r24, r18
    6cae:	8f 77       	andi	r24, 0x7F	; 127
    6cb0:	90 70       	andi	r25, 0x00	; 0
    6cb2:	a0 70       	andi	r26, 0x00	; 0
    6cb4:	b0 70       	andi	r27, 0x00	; 0
    6cb6:	80 34       	cpi	r24, 0x40	; 64
    6cb8:	91 05       	cpc	r25, r1
    6cba:	a1 05       	cpc	r26, r1
    6cbc:	b1 05       	cpc	r27, r1
    6cbe:	39 f4       	brne	.+14     	; 0x6cce <__pack_f+0xee>
    6cc0:	27 ff       	sbrs	r18, 7
    6cc2:	09 c0       	rjmp	.+18     	; 0x6cd6 <__pack_f+0xf6>
    6cc4:	20 5c       	subi	r18, 0xC0	; 192
    6cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc8:	4f 4f       	sbci	r20, 0xFF	; 255
    6cca:	5f 4f       	sbci	r21, 0xFF	; 255
    6ccc:	04 c0       	rjmp	.+8      	; 0x6cd6 <__pack_f+0xf6>
    6cce:	21 5c       	subi	r18, 0xC1	; 193
    6cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    6cd2:	4f 4f       	sbci	r20, 0xFF	; 255
    6cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    6cd6:	e0 e0       	ldi	r30, 0x00	; 0
    6cd8:	f0 e0       	ldi	r31, 0x00	; 0
    6cda:	20 30       	cpi	r18, 0x00	; 0
    6cdc:	a0 e0       	ldi	r26, 0x00	; 0
    6cde:	3a 07       	cpc	r19, r26
    6ce0:	a0 e0       	ldi	r26, 0x00	; 0
    6ce2:	4a 07       	cpc	r20, r26
    6ce4:	a0 e4       	ldi	r26, 0x40	; 64
    6ce6:	5a 07       	cpc	r21, r26
    6ce8:	10 f0       	brcs	.+4      	; 0x6cee <__pack_f+0x10e>
    6cea:	e1 e0       	ldi	r30, 0x01	; 1
    6cec:	f0 e0       	ldi	r31, 0x00	; 0
    6cee:	79 01       	movw	r14, r18
    6cf0:	8a 01       	movw	r16, r20
    6cf2:	27 c0       	rjmp	.+78     	; 0x6d42 <__pack_f+0x162>
    6cf4:	60 38       	cpi	r22, 0x80	; 128
    6cf6:	71 05       	cpc	r23, r1
    6cf8:	64 f5       	brge	.+88     	; 0x6d52 <__pack_f+0x172>
    6cfa:	fb 01       	movw	r30, r22
    6cfc:	e1 58       	subi	r30, 0x81	; 129
    6cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    6d00:	d8 01       	movw	r26, r16
    6d02:	c7 01       	movw	r24, r14
    6d04:	8f 77       	andi	r24, 0x7F	; 127
    6d06:	90 70       	andi	r25, 0x00	; 0
    6d08:	a0 70       	andi	r26, 0x00	; 0
    6d0a:	b0 70       	andi	r27, 0x00	; 0
    6d0c:	80 34       	cpi	r24, 0x40	; 64
    6d0e:	91 05       	cpc	r25, r1
    6d10:	a1 05       	cpc	r26, r1
    6d12:	b1 05       	cpc	r27, r1
    6d14:	39 f4       	brne	.+14     	; 0x6d24 <__pack_f+0x144>
    6d16:	e7 fe       	sbrs	r14, 7
    6d18:	0d c0       	rjmp	.+26     	; 0x6d34 <__pack_f+0x154>
    6d1a:	80 e4       	ldi	r24, 0x40	; 64
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	a0 e0       	ldi	r26, 0x00	; 0
    6d20:	b0 e0       	ldi	r27, 0x00	; 0
    6d22:	04 c0       	rjmp	.+8      	; 0x6d2c <__pack_f+0x14c>
    6d24:	8f e3       	ldi	r24, 0x3F	; 63
    6d26:	90 e0       	ldi	r25, 0x00	; 0
    6d28:	a0 e0       	ldi	r26, 0x00	; 0
    6d2a:	b0 e0       	ldi	r27, 0x00	; 0
    6d2c:	e8 0e       	add	r14, r24
    6d2e:	f9 1e       	adc	r15, r25
    6d30:	0a 1f       	adc	r16, r26
    6d32:	1b 1f       	adc	r17, r27
    6d34:	17 ff       	sbrs	r17, 7
    6d36:	05 c0       	rjmp	.+10     	; 0x6d42 <__pack_f+0x162>
    6d38:	16 95       	lsr	r17
    6d3a:	07 95       	ror	r16
    6d3c:	f7 94       	ror	r15
    6d3e:	e7 94       	ror	r14
    6d40:	31 96       	adiw	r30, 0x01	; 1
    6d42:	87 e0       	ldi	r24, 0x07	; 7
    6d44:	16 95       	lsr	r17
    6d46:	07 95       	ror	r16
    6d48:	f7 94       	ror	r15
    6d4a:	e7 94       	ror	r14
    6d4c:	8a 95       	dec	r24
    6d4e:	d1 f7       	brne	.-12     	; 0x6d44 <__pack_f+0x164>
    6d50:	05 c0       	rjmp	.+10     	; 0x6d5c <__pack_f+0x17c>
    6d52:	ee 24       	eor	r14, r14
    6d54:	ff 24       	eor	r15, r15
    6d56:	87 01       	movw	r16, r14
    6d58:	ef ef       	ldi	r30, 0xFF	; 255
    6d5a:	f0 e0       	ldi	r31, 0x00	; 0
    6d5c:	6e 2f       	mov	r22, r30
    6d5e:	67 95       	ror	r22
    6d60:	66 27       	eor	r22, r22
    6d62:	67 95       	ror	r22
    6d64:	90 2f       	mov	r25, r16
    6d66:	9f 77       	andi	r25, 0x7F	; 127
    6d68:	d7 94       	ror	r13
    6d6a:	dd 24       	eor	r13, r13
    6d6c:	d7 94       	ror	r13
    6d6e:	8e 2f       	mov	r24, r30
    6d70:	86 95       	lsr	r24
    6d72:	49 2f       	mov	r20, r25
    6d74:	46 2b       	or	r20, r22
    6d76:	58 2f       	mov	r21, r24
    6d78:	5d 29       	or	r21, r13
    6d7a:	b7 01       	movw	r22, r14
    6d7c:	ca 01       	movw	r24, r20
    6d7e:	1f 91       	pop	r17
    6d80:	0f 91       	pop	r16
    6d82:	ff 90       	pop	r15
    6d84:	ef 90       	pop	r14
    6d86:	df 90       	pop	r13
    6d88:	08 95       	ret

00006d8a <__unpack_f>:
    6d8a:	fc 01       	movw	r30, r24
    6d8c:	db 01       	movw	r26, r22
    6d8e:	40 81       	ld	r20, Z
    6d90:	51 81       	ldd	r21, Z+1	; 0x01
    6d92:	22 81       	ldd	r18, Z+2	; 0x02
    6d94:	62 2f       	mov	r22, r18
    6d96:	6f 77       	andi	r22, 0x7F	; 127
    6d98:	70 e0       	ldi	r23, 0x00	; 0
    6d9a:	22 1f       	adc	r18, r18
    6d9c:	22 27       	eor	r18, r18
    6d9e:	22 1f       	adc	r18, r18
    6da0:	93 81       	ldd	r25, Z+3	; 0x03
    6da2:	89 2f       	mov	r24, r25
    6da4:	88 0f       	add	r24, r24
    6da6:	82 2b       	or	r24, r18
    6da8:	28 2f       	mov	r18, r24
    6daa:	30 e0       	ldi	r19, 0x00	; 0
    6dac:	99 1f       	adc	r25, r25
    6dae:	99 27       	eor	r25, r25
    6db0:	99 1f       	adc	r25, r25
    6db2:	11 96       	adiw	r26, 0x01	; 1
    6db4:	9c 93       	st	X, r25
    6db6:	11 97       	sbiw	r26, 0x01	; 1
    6db8:	21 15       	cp	r18, r1
    6dba:	31 05       	cpc	r19, r1
    6dbc:	a9 f5       	brne	.+106    	; 0x6e28 <__unpack_f+0x9e>
    6dbe:	41 15       	cp	r20, r1
    6dc0:	51 05       	cpc	r21, r1
    6dc2:	61 05       	cpc	r22, r1
    6dc4:	71 05       	cpc	r23, r1
    6dc6:	11 f4       	brne	.+4      	; 0x6dcc <__unpack_f+0x42>
    6dc8:	82 e0       	ldi	r24, 0x02	; 2
    6dca:	37 c0       	rjmp	.+110    	; 0x6e3a <__unpack_f+0xb0>
    6dcc:	82 e8       	ldi	r24, 0x82	; 130
    6dce:	9f ef       	ldi	r25, 0xFF	; 255
    6dd0:	13 96       	adiw	r26, 0x03	; 3
    6dd2:	9c 93       	st	X, r25
    6dd4:	8e 93       	st	-X, r24
    6dd6:	12 97       	sbiw	r26, 0x02	; 2
    6dd8:	9a 01       	movw	r18, r20
    6dda:	ab 01       	movw	r20, r22
    6ddc:	67 e0       	ldi	r22, 0x07	; 7
    6dde:	22 0f       	add	r18, r18
    6de0:	33 1f       	adc	r19, r19
    6de2:	44 1f       	adc	r20, r20
    6de4:	55 1f       	adc	r21, r21
    6de6:	6a 95       	dec	r22
    6de8:	d1 f7       	brne	.-12     	; 0x6dde <__unpack_f+0x54>
    6dea:	83 e0       	ldi	r24, 0x03	; 3
    6dec:	8c 93       	st	X, r24
    6dee:	0d c0       	rjmp	.+26     	; 0x6e0a <__unpack_f+0x80>
    6df0:	22 0f       	add	r18, r18
    6df2:	33 1f       	adc	r19, r19
    6df4:	44 1f       	adc	r20, r20
    6df6:	55 1f       	adc	r21, r21
    6df8:	12 96       	adiw	r26, 0x02	; 2
    6dfa:	8d 91       	ld	r24, X+
    6dfc:	9c 91       	ld	r25, X
    6dfe:	13 97       	sbiw	r26, 0x03	; 3
    6e00:	01 97       	sbiw	r24, 0x01	; 1
    6e02:	13 96       	adiw	r26, 0x03	; 3
    6e04:	9c 93       	st	X, r25
    6e06:	8e 93       	st	-X, r24
    6e08:	12 97       	sbiw	r26, 0x02	; 2
    6e0a:	20 30       	cpi	r18, 0x00	; 0
    6e0c:	80 e0       	ldi	r24, 0x00	; 0
    6e0e:	38 07       	cpc	r19, r24
    6e10:	80 e0       	ldi	r24, 0x00	; 0
    6e12:	48 07       	cpc	r20, r24
    6e14:	80 e4       	ldi	r24, 0x40	; 64
    6e16:	58 07       	cpc	r21, r24
    6e18:	58 f3       	brcs	.-42     	; 0x6df0 <__unpack_f+0x66>
    6e1a:	14 96       	adiw	r26, 0x04	; 4
    6e1c:	2d 93       	st	X+, r18
    6e1e:	3d 93       	st	X+, r19
    6e20:	4d 93       	st	X+, r20
    6e22:	5c 93       	st	X, r21
    6e24:	17 97       	sbiw	r26, 0x07	; 7
    6e26:	08 95       	ret
    6e28:	2f 3f       	cpi	r18, 0xFF	; 255
    6e2a:	31 05       	cpc	r19, r1
    6e2c:	79 f4       	brne	.+30     	; 0x6e4c <__unpack_f+0xc2>
    6e2e:	41 15       	cp	r20, r1
    6e30:	51 05       	cpc	r21, r1
    6e32:	61 05       	cpc	r22, r1
    6e34:	71 05       	cpc	r23, r1
    6e36:	19 f4       	brne	.+6      	; 0x6e3e <__unpack_f+0xb4>
    6e38:	84 e0       	ldi	r24, 0x04	; 4
    6e3a:	8c 93       	st	X, r24
    6e3c:	08 95       	ret
    6e3e:	64 ff       	sbrs	r22, 4
    6e40:	03 c0       	rjmp	.+6      	; 0x6e48 <__unpack_f+0xbe>
    6e42:	81 e0       	ldi	r24, 0x01	; 1
    6e44:	8c 93       	st	X, r24
    6e46:	12 c0       	rjmp	.+36     	; 0x6e6c <__unpack_f+0xe2>
    6e48:	1c 92       	st	X, r1
    6e4a:	10 c0       	rjmp	.+32     	; 0x6e6c <__unpack_f+0xe2>
    6e4c:	2f 57       	subi	r18, 0x7F	; 127
    6e4e:	30 40       	sbci	r19, 0x00	; 0
    6e50:	13 96       	adiw	r26, 0x03	; 3
    6e52:	3c 93       	st	X, r19
    6e54:	2e 93       	st	-X, r18
    6e56:	12 97       	sbiw	r26, 0x02	; 2
    6e58:	83 e0       	ldi	r24, 0x03	; 3
    6e5a:	8c 93       	st	X, r24
    6e5c:	87 e0       	ldi	r24, 0x07	; 7
    6e5e:	44 0f       	add	r20, r20
    6e60:	55 1f       	adc	r21, r21
    6e62:	66 1f       	adc	r22, r22
    6e64:	77 1f       	adc	r23, r23
    6e66:	8a 95       	dec	r24
    6e68:	d1 f7       	brne	.-12     	; 0x6e5e <__unpack_f+0xd4>
    6e6a:	70 64       	ori	r23, 0x40	; 64
    6e6c:	14 96       	adiw	r26, 0x04	; 4
    6e6e:	4d 93       	st	X+, r20
    6e70:	5d 93       	st	X+, r21
    6e72:	6d 93       	st	X+, r22
    6e74:	7c 93       	st	X, r23
    6e76:	17 97       	sbiw	r26, 0x07	; 7
    6e78:	08 95       	ret

00006e7a <__fpcmp_parts_f>:
    6e7a:	1f 93       	push	r17
    6e7c:	dc 01       	movw	r26, r24
    6e7e:	fb 01       	movw	r30, r22
    6e80:	9c 91       	ld	r25, X
    6e82:	92 30       	cpi	r25, 0x02	; 2
    6e84:	08 f4       	brcc	.+2      	; 0x6e88 <__fpcmp_parts_f+0xe>
    6e86:	47 c0       	rjmp	.+142    	; 0x6f16 <__fpcmp_parts_f+0x9c>
    6e88:	80 81       	ld	r24, Z
    6e8a:	82 30       	cpi	r24, 0x02	; 2
    6e8c:	08 f4       	brcc	.+2      	; 0x6e90 <__fpcmp_parts_f+0x16>
    6e8e:	43 c0       	rjmp	.+134    	; 0x6f16 <__fpcmp_parts_f+0x9c>
    6e90:	94 30       	cpi	r25, 0x04	; 4
    6e92:	51 f4       	brne	.+20     	; 0x6ea8 <__fpcmp_parts_f+0x2e>
    6e94:	11 96       	adiw	r26, 0x01	; 1
    6e96:	1c 91       	ld	r17, X
    6e98:	84 30       	cpi	r24, 0x04	; 4
    6e9a:	99 f5       	brne	.+102    	; 0x6f02 <__fpcmp_parts_f+0x88>
    6e9c:	81 81       	ldd	r24, Z+1	; 0x01
    6e9e:	68 2f       	mov	r22, r24
    6ea0:	70 e0       	ldi	r23, 0x00	; 0
    6ea2:	61 1b       	sub	r22, r17
    6ea4:	71 09       	sbc	r23, r1
    6ea6:	3f c0       	rjmp	.+126    	; 0x6f26 <__fpcmp_parts_f+0xac>
    6ea8:	84 30       	cpi	r24, 0x04	; 4
    6eaa:	21 f0       	breq	.+8      	; 0x6eb4 <__fpcmp_parts_f+0x3a>
    6eac:	92 30       	cpi	r25, 0x02	; 2
    6eae:	31 f4       	brne	.+12     	; 0x6ebc <__fpcmp_parts_f+0x42>
    6eb0:	82 30       	cpi	r24, 0x02	; 2
    6eb2:	b9 f1       	breq	.+110    	; 0x6f22 <__fpcmp_parts_f+0xa8>
    6eb4:	81 81       	ldd	r24, Z+1	; 0x01
    6eb6:	88 23       	and	r24, r24
    6eb8:	89 f1       	breq	.+98     	; 0x6f1c <__fpcmp_parts_f+0xa2>
    6eba:	2d c0       	rjmp	.+90     	; 0x6f16 <__fpcmp_parts_f+0x9c>
    6ebc:	11 96       	adiw	r26, 0x01	; 1
    6ebe:	1c 91       	ld	r17, X
    6ec0:	11 97       	sbiw	r26, 0x01	; 1
    6ec2:	82 30       	cpi	r24, 0x02	; 2
    6ec4:	f1 f0       	breq	.+60     	; 0x6f02 <__fpcmp_parts_f+0x88>
    6ec6:	81 81       	ldd	r24, Z+1	; 0x01
    6ec8:	18 17       	cp	r17, r24
    6eca:	d9 f4       	brne	.+54     	; 0x6f02 <__fpcmp_parts_f+0x88>
    6ecc:	12 96       	adiw	r26, 0x02	; 2
    6ece:	2d 91       	ld	r18, X+
    6ed0:	3c 91       	ld	r19, X
    6ed2:	13 97       	sbiw	r26, 0x03	; 3
    6ed4:	82 81       	ldd	r24, Z+2	; 0x02
    6ed6:	93 81       	ldd	r25, Z+3	; 0x03
    6ed8:	82 17       	cp	r24, r18
    6eda:	93 07       	cpc	r25, r19
    6edc:	94 f0       	brlt	.+36     	; 0x6f02 <__fpcmp_parts_f+0x88>
    6ede:	28 17       	cp	r18, r24
    6ee0:	39 07       	cpc	r19, r25
    6ee2:	bc f0       	brlt	.+46     	; 0x6f12 <__fpcmp_parts_f+0x98>
    6ee4:	14 96       	adiw	r26, 0x04	; 4
    6ee6:	8d 91       	ld	r24, X+
    6ee8:	9d 91       	ld	r25, X+
    6eea:	0d 90       	ld	r0, X+
    6eec:	bc 91       	ld	r27, X
    6eee:	a0 2d       	mov	r26, r0
    6ef0:	24 81       	ldd	r18, Z+4	; 0x04
    6ef2:	35 81       	ldd	r19, Z+5	; 0x05
    6ef4:	46 81       	ldd	r20, Z+6	; 0x06
    6ef6:	57 81       	ldd	r21, Z+7	; 0x07
    6ef8:	28 17       	cp	r18, r24
    6efa:	39 07       	cpc	r19, r25
    6efc:	4a 07       	cpc	r20, r26
    6efe:	5b 07       	cpc	r21, r27
    6f00:	18 f4       	brcc	.+6      	; 0x6f08 <__fpcmp_parts_f+0x8e>
    6f02:	11 23       	and	r17, r17
    6f04:	41 f0       	breq	.+16     	; 0x6f16 <__fpcmp_parts_f+0x9c>
    6f06:	0a c0       	rjmp	.+20     	; 0x6f1c <__fpcmp_parts_f+0xa2>
    6f08:	82 17       	cp	r24, r18
    6f0a:	93 07       	cpc	r25, r19
    6f0c:	a4 07       	cpc	r26, r20
    6f0e:	b5 07       	cpc	r27, r21
    6f10:	40 f4       	brcc	.+16     	; 0x6f22 <__fpcmp_parts_f+0xa8>
    6f12:	11 23       	and	r17, r17
    6f14:	19 f0       	breq	.+6      	; 0x6f1c <__fpcmp_parts_f+0xa2>
    6f16:	61 e0       	ldi	r22, 0x01	; 1
    6f18:	70 e0       	ldi	r23, 0x00	; 0
    6f1a:	05 c0       	rjmp	.+10     	; 0x6f26 <__fpcmp_parts_f+0xac>
    6f1c:	6f ef       	ldi	r22, 0xFF	; 255
    6f1e:	7f ef       	ldi	r23, 0xFF	; 255
    6f20:	02 c0       	rjmp	.+4      	; 0x6f26 <__fpcmp_parts_f+0xac>
    6f22:	60 e0       	ldi	r22, 0x00	; 0
    6f24:	70 e0       	ldi	r23, 0x00	; 0
    6f26:	cb 01       	movw	r24, r22
    6f28:	1f 91       	pop	r17
    6f2a:	08 95       	ret

00006f2c <__udivmodhi4>:
    6f2c:	aa 1b       	sub	r26, r26
    6f2e:	bb 1b       	sub	r27, r27
    6f30:	51 e1       	ldi	r21, 0x11	; 17
    6f32:	07 c0       	rjmp	.+14     	; 0x6f42 <__udivmodhi4_ep>

00006f34 <__udivmodhi4_loop>:
    6f34:	aa 1f       	adc	r26, r26
    6f36:	bb 1f       	adc	r27, r27
    6f38:	a6 17       	cp	r26, r22
    6f3a:	b7 07       	cpc	r27, r23
    6f3c:	10 f0       	brcs	.+4      	; 0x6f42 <__udivmodhi4_ep>
    6f3e:	a6 1b       	sub	r26, r22
    6f40:	b7 0b       	sbc	r27, r23

00006f42 <__udivmodhi4_ep>:
    6f42:	88 1f       	adc	r24, r24
    6f44:	99 1f       	adc	r25, r25
    6f46:	5a 95       	dec	r21
    6f48:	a9 f7       	brne	.-22     	; 0x6f34 <__udivmodhi4_loop>
    6f4a:	80 95       	com	r24
    6f4c:	90 95       	com	r25
    6f4e:	bc 01       	movw	r22, r24
    6f50:	cd 01       	movw	r24, r26
    6f52:	08 95       	ret

00006f54 <__prologue_saves__>:
    6f54:	2f 92       	push	r2
    6f56:	3f 92       	push	r3
    6f58:	4f 92       	push	r4
    6f5a:	5f 92       	push	r5
    6f5c:	6f 92       	push	r6
    6f5e:	7f 92       	push	r7
    6f60:	8f 92       	push	r8
    6f62:	9f 92       	push	r9
    6f64:	af 92       	push	r10
    6f66:	bf 92       	push	r11
    6f68:	cf 92       	push	r12
    6f6a:	df 92       	push	r13
    6f6c:	ef 92       	push	r14
    6f6e:	ff 92       	push	r15
    6f70:	0f 93       	push	r16
    6f72:	1f 93       	push	r17
    6f74:	cf 93       	push	r28
    6f76:	df 93       	push	r29
    6f78:	cd b7       	in	r28, 0x3d	; 61
    6f7a:	de b7       	in	r29, 0x3e	; 62
    6f7c:	ca 1b       	sub	r28, r26
    6f7e:	db 0b       	sbc	r29, r27
    6f80:	0f b6       	in	r0, 0x3f	; 63
    6f82:	f8 94       	cli
    6f84:	de bf       	out	0x3e, r29	; 62
    6f86:	0f be       	out	0x3f, r0	; 63
    6f88:	cd bf       	out	0x3d, r28	; 61
    6f8a:	19 94       	eijmp

00006f8c <__epilogue_restores__>:
    6f8c:	2a 88       	ldd	r2, Y+18	; 0x12
    6f8e:	39 88       	ldd	r3, Y+17	; 0x11
    6f90:	48 88       	ldd	r4, Y+16	; 0x10
    6f92:	5f 84       	ldd	r5, Y+15	; 0x0f
    6f94:	6e 84       	ldd	r6, Y+14	; 0x0e
    6f96:	7d 84       	ldd	r7, Y+13	; 0x0d
    6f98:	8c 84       	ldd	r8, Y+12	; 0x0c
    6f9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    6f9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    6f9e:	b9 84       	ldd	r11, Y+9	; 0x09
    6fa0:	c8 84       	ldd	r12, Y+8	; 0x08
    6fa2:	df 80       	ldd	r13, Y+7	; 0x07
    6fa4:	ee 80       	ldd	r14, Y+6	; 0x06
    6fa6:	fd 80       	ldd	r15, Y+5	; 0x05
    6fa8:	0c 81       	ldd	r16, Y+4	; 0x04
    6faa:	1b 81       	ldd	r17, Y+3	; 0x03
    6fac:	aa 81       	ldd	r26, Y+2	; 0x02
    6fae:	b9 81       	ldd	r27, Y+1	; 0x01
    6fb0:	ce 0f       	add	r28, r30
    6fb2:	d1 1d       	adc	r29, r1
    6fb4:	0f b6       	in	r0, 0x3f	; 63
    6fb6:	f8 94       	cli
    6fb8:	de bf       	out	0x3e, r29	; 62
    6fba:	0f be       	out	0x3f, r0	; 63
    6fbc:	cd bf       	out	0x3d, r28	; 61
    6fbe:	ed 01       	movw	r28, r26
    6fc0:	08 95       	ret

00006fc2 <_exit>:
    6fc2:	f8 94       	cli

00006fc4 <__stop_program>:
    6fc4:	ff cf       	rjmp	.-2      	; 0x6fc4 <__stop_program>
